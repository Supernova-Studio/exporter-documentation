
{* Get page from context *}
{[ let page = context /]}

{* Get containing group. If the group represents tab, then use that group configuration to build header, and use its title as well. For non-tabbed pages, configuration is taken from the page object *}
{[ let group = page.parent /]}
{[ let groupIsTabContainer = (group.groupBehavior === "Tabs") /]}
{[ let configuration = (groupIsTabContainer ? group.configuration : page.configuration) /]}
{[ let headerConfiguration = configuration.header /]}
{[ let globalConfiguration = exportConfiguration() /]}

{* Title *}
{[ let title = (group.groupBehavior === "Tabs" ? htmlSafeString(group.title) : htmlSafeString(page.title)) /]}

{* Configure appropriate classes based on the configuration *}
{[ let centeredClass = (headerConfiguration.alignment === "Center" ? " centered" : "") /]}
{[ let flexedClass = (headerConfiguration.minHeight ? " flexed" : "") /]}
{[ let layoutTypeClass = "" /]}

{* Configure height *}
{[ let heightStyle = "" /]}
{[ if headerConfiguration.minHeight ]}
    {[ heightStyle = ("min-height:" + headerConfiguration.minHeight.toString() + "px; ") /]}
    {[ flexedClass = " flexed" /]}
{[/]}

{[ if (globalConfiguration.lookAndFeelHeaderLayoutStyle === "Boxed") ]}
    {[ layoutTypeClass = " style-boxed" /]}
{[/]}

{* Background image set on the page overrides all settings *}
{[ if headerConfiguration.backgroundImageAssetUrl ]}
<div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}background: url({{ headerConfiguration.backgroundImageAssetUrl }}) no-repeat center center; background-size: {{ headerConfiguration.backgroundImageScaleType === "AspectFill" ? "cover" : "contain" }};">

{* Background image set on doc export settings level overrides all settings *}
{[ elseif (globalConfiguration.lookAndFeelHeaderBackgroundImage && globalConfiguration.lookAndFeelHeaderBackgroundImage.assetUrl) ]}
<div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}background: url({{ globalConfiguration.lookAndFeelHeaderBackgroundImage.assetUrl }}) no-repeat center center; background-size: {{ headerConfiguration.backgroundImageScaleType === "AspectFill" ? "cover" : "contain" }};">

{* Background color provided per-page takes over transparent default if provided *}
{[ elseif headerConfiguration.backgroundColor ]}
    {[ if headerConfiguration.backgroundColor.value ]}
        {* Background color provided as raw value *}
        <div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}background-color: {{ headerConfiguration.backgroundColor.value }};">
    {[ elseif headerConfiguration.backgroundColor.aliasTo ]}
        {* Background color provided as token *}
        {[ let colorToken = ds.tokenById(headerConfiguration.backgroundColor.aliasTo) /]}
        {[ if colorToken ]}
        <div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}background-color: #{{ colorToken.value.hex }};">
        {[/]}
    {[ else ]}
        <div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}">
    {[/]}
{* Default without any configuration *}
{[ else ]}
<div class="container-title{{ centeredClass }}{{ flexedClass }}{{layoutTypeClass}}" style="{{ heightStyle }}">
{[/]}
    {[ if headerConfiguration.showBackgroundOverlay ]}
        <div class="container-title-overlay"></div>
    {[/]}
    <div class="slider">
        {* Show title and description if enabled *}
        {[ if headerConfiguration.showCoverText ]}

            {[ let color = "" /]}
            {[ if (headerConfiguration.foregroundColor && headerConfiguration.foregroundColor.value) ]}
                {* Foreground color provided as raw value *}
                {[ color = headerConfiguration.foregroundColor.value /]}
            {[ elseif (headerConfiguration.foregroundColor && headerConfiguration.foregroundColor.aliasTo) ]}
                {* Foreground color provided as token *}
                {[ let colorToken = ds.tokenById(headerConfiguration.foregroundColor.aliasTo) /]}
                {[ if colorToken ]}
                    {[ color = colorToken.value.hex.prefixed("#") /]}
                {[/]}
            {[/]}
            {[ let style = (color.count() > 0 ? "color: " + color : "") /]}
            {* Show title - always *}
            <h1 class="page-title" style="{{ style }}">{{ withHTMLNewlines(title) }}</h1>
            {* Show description if provided *}
            {[ if headerConfiguration.description ]}
                <p class="subtitle" style="{{ style }}">{{ withHTMLNewlines(htmlSafeString(headerConfiguration.description)) }}</p>
            {[/]}
        {[/]}
    </div>
</div>

{* Generate tabs if parent is group *}
{[ if groupIsTabContainer ]}
<style>
 :root { --tabOffset: 40px; }
</style>
<div class="container-tabs">    
    <div class="tabbed-navigation">
        <ul class="nav nav-tabs" id="page-tab" role="tablist">
            {[ for tab in group.pages ]}
                {[ if isExportable(tab) ]}
                <li class="nav-item">
                    {[ let url = pageUrl(tab, ds.documentationDomain()) /]}
                    <a class="nav-link {{ page.id === tab.id ? "active" : "" }}" id="tab-{{ tab.id }}" href="{{ url }}" role="tab" aria-controls="home" aria-selected="true"><span>{{ htmlSafeString(tab.title) }}</span></a>
                </li>
                {[/]}
            {[/]}
        </ul>
    </div>
</div>
{[ else ]}
<div class="no-container-tabs"></div>
{[/]}