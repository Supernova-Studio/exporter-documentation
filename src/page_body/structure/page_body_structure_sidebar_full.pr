{* Fetch the page structure *}
{[ let rootGroup = [] /]}
{[ let page = context.page /]}

{[ if context.groupId ]}
    {* If we pass id of a group, we can request it directly *}
    {[ rootGroup = ds.documentationGroupById(context.groupId) /]}
{[ else ]}
    {* If we are not showing tabbar at the top, then we want to generate from true root, and show all categories *}
    {[ rootGroup = ds.rootDocumentationGroup() /]}
{[/]}

{[ if rootGroup ]}
    <ul class="nav full flex-column ">
        {[ for item in rootGroup.children ]}
            {* Only show items that are exportable *}
            {[ if isExportable(item) ]}
                {[ let isActive = pageOrGroupActiveInContext(page, item) /]}
                {[ let activeClass = (isActive === true ? "active" : "") /]}
                {[ let itemId = item.id /]}
                {[ if item.type.equals("Page") ]}
                    <li class="nav-item"><a class="nav-link typographyDocsViewNavigation {{ activeClass }}" href="{{ pageUrl(item, ds.documentationDomain()) }}"> {{ htmlSafeString(item.title) }}</a><li>
                {[ else ]}
                    <li class="nav-item">
                    {[ let firstDescendingPage = firstPageFromTop(item) /]}
                    {* Group will either link to the first page, or be fully disabled *}
                    {[ if firstDescendingPage ]}
                        <a class="nav-link typographyDocsViewNavigation group {{ activeClass }}" href="{{ pageUrl(firstDescendingPage, ds.documentationDomain()) }}"> {{ htmlSafeString(item.title) }}</a>
                    {[ else ]}  
                        <a class="nav-link typographyDocsViewNavigation group {{ activeClass }}"> {{ htmlSafeString(item.title) }}</a>
                    {[/]}
                    {[ if isActive ]}
                        {[ let data = { "page": page, "groupId": itemId } /]}
                        {[ inject "page_body_structure_sidebar_full" context data /]}
                    {[/]}
                    </li>
                {[/]}
            {[/]}
        {[/]}
    </ul>
{[ else ]}
    <div class="nav-name">
        <span class="typographyDocsViewLabelCaps">{{ htmlSafeString(context.page.title.uppercased()) }}</span>
    </div>
{[/]}