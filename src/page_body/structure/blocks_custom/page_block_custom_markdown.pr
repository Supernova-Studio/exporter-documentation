{[ const block = context /]}

{[ let variant = block.variantKey /]}

{* Render markdown block from configuration *}
{[ let url = block.properties.markdownUrl /]}

{[ if url && url.trim().length > 0 ]}
    {* Fetch the markdown data from the remote URL *}
    {[ let headers = {} /]}
    {[ if (exportConfiguration().contentMarkdownToken) ]}
        {[ headers = { "failable": true, "timeout": 5000, "authToken": exportConfiguration().contentMarkdownToken } /]}
    {[ else ]}
        {[ headers = { "failable": true, "timeout": 5000 } /]}
    {[/]}
    {[ let markdownData = getNetworkData(url, headers) /]}

    {[ if markdownData ]}
        {* Render converted markdown. We use showdown markdown engine with github extension to convert the data *}
        <div class="markdown-container {{ variant }}">
            {{ markdownToHTML(markdownData) }}
        </div>
    {[ else ]}
        {* Markdown download failed *}
        <p>Unable to render Markdown block with url {{ url }}, might not be Markdown definition or is unreachable. If Markdown is private, please provide authentication token in the documentation settings first.</p>
    {[/]}
{[ else ]}
<p>Unable to render Markdown block, please provide valid <code>.md</code> URL.</p>
{[/]}
