{[ const block = context /]}

{[ let variant = block.variantKey /]}

{* Render markdown block from configuration *}
{[ let url = block.properties.markdownUrl /]}

{[ if url && url.trim().length > 0 ]}
    {* Fetch the markdown data from the remote URL *}
    {[ let settings = {} /]}
    {[ let headers = {} /]}
    {[ let token = exportConfiguration().contentMarkdownToken /]}
    {[ if (token) ]}
        {[ if (token.contains("token") || token.contains("Bearer")) ]}
            {[ headers = { "Authorization" : token } /]}
        {[ else ]}
            {* Default to token *}
            {[ headers = { "Authorization" : "token " + token } /]}
        {[/]}
    {[/]}

    {[ settings = { "failable": true, "timeout": 15000, "headers": headers } /]}

    {* Prepare URL. Handle special cases *}
    {[ if (url.contains("github.com")) ]}
        {* Special handling for github - change URL to raw file API, removing blob storage so we have pure path  *}
        {[ url = url.replacing("github.com", "raw.githubusercontent.com") /]}
        {[ url = url.replacing("/blob", "") /]}
    {[/]}

    {* Download markdown data *}
    {[ let markdownData = getNetworkData(url, settings) /]}
    {[ if markdownData ]}
        {* Render converted markdown. We use showdown markdown engine with github extension to convert the data *}
        <div class="content-block content-block--markdown{{ getVariantClass(variant) }}">
            {{ markdownToHTML(markdownData) }}
        </div>
    {[ else ]}
        {* Markdown download failed *}
        <p>Unable to render Markdown block with url {{ url }}, might not be Markdown definition or is unreachable. If Markdown is private, please provide authentication token in the documentation settings first.</p>
    {[/]}
{[ else ]}
<p>Unable to render Markdown block, please provide valid <mark>.md</mark> URL.</p>
{[/]}
