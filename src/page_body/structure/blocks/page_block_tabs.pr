{[ let block = context.block /]}
{[ let pageId = context.pageId /]}
{* Note we are prefixing all ids with a letter because by spec ID can't start with number (which it can coming from the SDK) *}
{[ let blockId = block.id.prefixed("T") /]}
{[ let configuration = exportConfiguration() /]}

{* This block is variant enabled, fetch it *}
{[ let variant = block.variantKey /]}

<div class="content-block content-block--tabs">
  {[ if (variant === "pills") ]}
    {* 
      Pills Variant - Full-width background sections proof of concept
      
      This variant demonstrates one approach to creating sections with backgrounds 
      that can span the full width of the page, breaking out of the normal content 
      container constraints. 

      Why is the Pills variant used? There is not an option to add more variants to Tabs block currently, 
      so we picked one that is used less often in our case. Any of the 4 existing variants could be used.
      
      Purpose:
      - Shows how to achieve full-width background sections using the tab block structure
      - Each tab item becomes a section that can extend its background across the entire viewport
      - Provides a foundation that can be adapted and customized for specific design needs
      
      Implementation approach:
      - Transforms tab items into standalone full-width sections
      - Uses the tab caption as a CSS class name for defining the color
      - Applies "section--full-width" and "section--full-width-background" classes
      - Content flows vertically without traditional tab switching behavior
      
      Note: This is one possible solution. The CSS styling for full-width sections 
      is handled in sections.scss. The implementation serves as a starting point 
      for teams to build upon and customize for their specific design needs.
    *}
    {* Transform each tab item into a full-width section *}
    {[ map (block.children.enumerated()) to index tab ]}
        {[ let id = tab.id.prefixed("T") /]}
        {[ if (tab.type === "TabItem") ]}
        <div class="section section--full-width">
        {* Use tab caption as CSS class for custom styling opportunities *}
        <div class="section--full-width-background {{ tab.caption }}"></div>
          {* Render all child blocks within this section *}
          {[ for child in tab.children ]}
              {[ inject "page_body_structure_block" context ({"block": child, "pageId": pageId}) /]}
          {[/]}
        </div>
        {[/]}
    {[/]}
  {[ elseif (variant === "accordion") ]}
    {* Tab variant where tabs render as collapsible blocks with exactly one block opened *}

  <div class="accordion" id="{{ blockId }}">
  {[ map (block.children.enumerated()) to index tab ]}
      {[ let id = tab.id.prefixed("T") /]}
      {[ if (tab.type === "TabItem") ]}
      <div class="accordion-section">
        <a class="{{ index === "0" ? "active" : "collapsed" }}" id="{{ id }}-tab" data-toggle="collapse" data-target="#collapse-{{ id }}">
          <div class="accordion-header" id="{{ id }}">
          <div class="icon">{[ inject "icon_chevron_right" context configuration /]}</div>{{ tab.caption }}
          </div>
        </a>

        <div id="collapse-{{ id }}" class="tab-pane collapse {{ index === "0" ? "show" : "" }}" aria-labelledby="{{ id }}" data-parent="#{{ blockId }}">
          <div class="accordion-body">
          {[ for child in tab.children ]}
              {[ inject "page_body_structure_block" context ({"block": child, "pageId": pageId}) /]}
          {[/]}
          </div>
        </div>
      </div>
      {[/]}
  {[/]}
  </div>

  {[ elseif (variant === "columns") ]}
    {* Tab variant where tabs render as columns *}
    <div class="row tabs-as-columns">
      {[ map (block.children.enumerated()) to index tab ]}
          {[ let id = tab.id.prefixed("T") /]}
        <div class="col-sm">
          {[ for child in tab.children ]}
            {[ inject "page_body_structure_block" context ({"block": child, "pageId": pageId}) /]}
          {[/]}
        </div>
      {[/]}
    </div>

  {[ else ]}
    {* Default variant - tabs with header row and content below it *}
    {* Tab navigation header *}
    <div class="nav-tabs-container">
      <div class="scroll-arrow scroll-arrow-left">
        {[ inject "icon_arrow_left" context configuration /]}
      </div>
      <ul class="nav nav-tabs nav-tabs-inline" id="{{ blockId }}" role="tablist">
        {[ map (block.children.enumerated()) to index tab ]}
            {[ let id = tab.id.prefixed("T") /]}
            {[ if (tab.type === "TabItem") ]}
            <li class="nav-item" role="presentation">
              <a class="nav-link {{ index === "0" ? "active" : "" }}" id="{{ id }}-tab" data-toggle="tab" href="#{{ id }}" role="tab" aria-controls="{{ id }}" aria-selected="{{ index === "0" ? "true" : "false" }}"><span>{{ tab.caption }}</span></a>
            </li>
            {[/]}
        {[/]}
      </ul>
      <div class="scroll-arrow scroll-arrow-right">
        {[ inject "icon_arrow_right" context configuration /]}
      </div>
    </div>

    {* Tab content, including block content *}
    <div class="tab-content tab-content-block" id="{{ blockId }}-content">
      {[ map (block.children.enumerated()) to index tab ]}
          {[ let id = tab.id.prefixed("T") /]}
          {[ if (tab.type === "TabItem") ]}
          <div class="tab-pane fade{{ index === "0" ? " active show" : "" }}" id="{{ id }}" role="tabpanel" aria-labelledby="{{ id }}-tab">
            {[ for child in tab.children ]}
                {[ inject "page_body_structure_block" context ({"block": child, "pageId": pageId}) /]}
            {[/]}
          </div>
          {[/]}
      {[/]}
    </div>
  {[/]}
</div>
