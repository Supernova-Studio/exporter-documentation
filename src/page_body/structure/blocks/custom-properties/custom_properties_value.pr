{[ let customPropertyValue = context.value /]}
{[ let customProperty = context.info /]}
{[ let mustReturnValue = context.mustReturnValue /]}
{[ let sizeClass = (context.size ? context.size : "") /]}
{[ let configuration = exportConfiguration() /]}

{[ if customProperty.propertyType.equals("Boolean") ]}
        {[ inject "component_icon_boolean" context { "value": customPropertyValue, "label": (customPropertyValue ? "True" : "False") } /]}
{[ elseif customPropertyValue ]}
    {[ if customProperty.propertyType.equals("Select") ]}
        
        {[ let optionValue = "" /]}
        {[ let optionColor = "" /]}
        {[ let contrastColor = "" /]}
        {[ for option in customProperty.options ]}
            {[ if (option.id === customPropertyValue) ]}
                {[ optionValue = option.name /]}
                {[ optionColor = option.backgroundColor /]}
                {[ contrastColor = contrastColor(optionColor) /]}
            {[/]}
        {[/]}  
        <span class="{{ ["property-select-tag", contrastColor, sizeClass].join(" ") }}" style="background-color: {{ optionColor }}">
            {[ if (optionValue !== '') ]}{{ optionValue }}{[ else ]}Not set{[/]}
        </span>

    {[ elseif customProperty.propertyType.equals("Boolean") ]}
        {[ inject "component_icon_boolean" context { "value": customPropertyValue, "label": (customPropertyValue ? "True" : "False") } /]}
    {[ elseif customProperty.propertyType.equals("URL") ]}
        <a class="{{ ["property-link", sizeClass].join(" ") }}" href="{{ customPropertyValue }}" target="_blank">{[ inject "icon_new_window" context configuration /]} Open link</a>
    {[ elseif customProperty.propertyType.equals("Link") ]}
        {[ if customProperty.linkElementType.equals("DocumentationPage") ]}
            {[ let page = ds.documentationPageById(customPropertyValue) /]}

            {[ if page.deployedUrl ]}
                <a class="{{ ["property-link", sizeClass].join(" ") }}" href="{{ page.deployedUrl }}">{[ inject "icon_documentation_page" context configuration /]} Open page</a>
            {[ else ]}
                -
            {[/]}
        {[ elseif (customProperty.linkElementType.equals("FigmaComponent") && designComponent) ]}
            {[ let designComponent = ds.designComponentById(customPropertyValue) /]}
            <a class="{{ ["property-link", sizeClass].join(" ") }}" href="{{ getFigmaFileUrl(designComponent) }}" target="_blank">{[ inject "icon_figma" context configuration /]} Open in Figma</a>
        {[/]}
        
    {[ elseif customProperty.propertyType.equals("Generic") ]}
        <mark>{{ customPropertyValue }}</mark>
    {[ else ]}
        {{ customPropertyValue }} 
    {[/]}
{[ elseif mustReturnValue ]}
   -
{[/]}