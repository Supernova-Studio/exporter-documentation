{[ let block = context.block /]}  
{[ let pageId = context.pageId /]}  

{* Calculate table width for scrolling *}
{[ let tableWidth = 0 /]}
{[ for column in block.tableProperties.columns ]}
    {[ tableWidth = (tableWidth + column.width.value.measure) /]}
{[/]}

{[ let tableWidthStyle = "" /]}

{* This is hardcoded value on backend when the user sets "Fit to page width" *}
{[ if (tableWidth === 751 || tableWidth === 752 || tableWidth === 753) ]}
    {[ tableWidthStyle = ["width: 100%; min-width:", tableWidth, "px"].join("") /]}
{[ else ]}
    {[ tableWidthStyle = ["width:", tableWidth, "px"].join("") /]}
{[/]}

{[ let borderless = (!block.tableProperties.showBorders ? " borderless" : "") /]}
{[ let headerRow = (block.tableProperties.showHeaderRow ? " header-row" : "") /]}
{[ let headerColumn = (block.tableProperties.showHeaderColumn ? " header-column" : "") /]}

{* Scroll wrapper boundary *}
<div class="content-block content-block--table data-table-wrapper">
<div>
  <table class="data-table{{ borderless }}{{ headerRow }}{{ headerColumn }}" style="{{ tableWidthStyle }}">
  {* Row scope *}
  {[ let rowIndex = 0 /]}
  {[ for row in block.children ]}
    {[ if (rowIndex === 0 && headerRow) ]}
    <thead>
    {[/]}
    {[ if (rowIndex === 1 && headerRow) ]}
    </thead>
    <tbody>
    {[/]}
    {[ if (rowIndex === 0 && !headerRow) ]}
    <tbody>
    {[/]}
    <tr>
    {[ let cellTag = (((rowIndex === 0) && block.tableProperties.showHeaderRow) ? "th" : "td") /]}
    {* Cell scope *}
    {[ let cellIndex = 0 /]}
    {[ for cell in row.children ]}
      {[ let alignment = cell.alignment.lowercased() /]}
      {[ let resolvedCellTag = (((cellIndex === 0) && block.tableProperties.showHeaderColumn) ? "th" : cellTag) /]}

      {[ if (rowIndex === 0) ]}
          {* provide size for column for the first row *}
          {[ let columnSize = "auto" /]}
          {[ for column in block.tableProperties.columns ]}
              {[ if (column.id === cell.columnId) ]}
                  {[ columnSize = (column.width.value.measure.toString().suffixed("px")) /]}
              {[/]}
          {[/]}
          <{{resolvedCellTag}} class="{{ alignment }}" style="width: {{ columnSize }}">
      {[ else ]}
      <{{resolvedCellTag}} class="{{ alignment }}">
      {[/]}
        {* Cell content *}
        {[ for cellBlock in cell.children ]}
            {[ inject "page_body_structure_block" context {"block": cellBlock, "pageId": pageId} /]}
        {[/]}
      </{{resolvedCellTag}}>
      {[ cellIndex = (cellIndex + 1) /]}
    {[/]}
    </tr>
    {[ rowIndex = (rowIndex + 1) /]}
  {[/]}
  </tbody>
  </table>
  </div>
</div>
