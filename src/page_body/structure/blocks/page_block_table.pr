{[ let block = context /]}  

{* Calculate table width for scrolling *}
{[ let tableWidth = 0 /]}
{[ for column in block.tableProperties.columns ]}
    {[ tableWidth = (tableWidth + column.width.value.measure) /]}
{[/]}

{[ let borderless = (!block.tableProperties.showBorders ? "borderless" : "") /]}
{[ let headerRow = (block.tableProperties.showHeaderRow ? "header-row" : "") /]}
{[ let headerColumn = (block.tableProperties.showHeaderColumn ? "header-column" : "") /]}

{* Scroll wrapper boundary *}
<div class="data-table-wrapper">
<table class="data-table {{ borderless }} {{ headerRow }} {{ headerColumn }}">
{* Row scope *}
{[ let rowIndex = 0 /]}
{[ for row in block.children ]}
  {[ if (headerRow) ]}
    {[ if (rowIndex === 0) ]}
      <thead>
        <tr>
          {* Cell scope *}
          {[ for cell in row.children ]}
            {[ let alignment = cell.alignment.lowercased() /]}
            <th class="{{ alignment }}">
              {* Cell content *}
              {[ for cellBlock in cell.children ]}
                {[ inject "page_body_structure_block" context cellBlock /]}
              {[/]}
            </th>
          {[/]}
        </tr>
      </thead>
    {[ else ]}
      <tr>
        {* Cell scope *}
        {[ for cell in row.children ]}
          {[ let alignment = cell.alignment.lowercased() /]}
          <td class="{{ alignment }}">
            {* Cell content *}
            {[ for cellBlock in cell.children ]}
              {[ inject "page_body_structure_block" context cellBlock /]}
            {[/]}
          </td>
        {[/]}
      </tr>
    {[/]}
  {[ else ]}
    <tr>
      {[ if (headerColumn) ]}
        {* Cell scope *}
        {[ let colIndex = 0 /]}
        {[ for cell in row.children ]}
          {[ let alignment = cell.alignment.lowercased() /]}
          {[ if (colIndex === 0) ]}
            <th class="{{ alignment }}">
              {* Cell content *}
              {[ for cellBlock in cell.children ]}
                {[ inject "page_body_structure_block" context cellBlock /]}
              {[/]}
            </th>
          {[ else ]}
            <td class="{{ alignment }}">
              {* Cell content *}
              {[ for cellBlock in cell.children ]}
                {[ inject "page_body_structure_block" context cellBlock /]}
              {[/]}
            </td>
          {[/]}
          {[ colIndex = (colIndex + 1) /]}
        {[/]}
      {[ else ]}
        {* Cell scope *}
        {[ for cell in row.children ]}
          {[ let alignment = cell.alignment.lowercased() /]}
          <td class="{{ alignment }}">
            {* Cell content *}
            {[ for cellBlock in cell.children ]}
              {[ inject "page_body_structure_block" context cellBlock /]}
            {[/]}
          </td>
        {[/]}
      {[/]}
    </tr>
  {[/]}
  {[ rowIndex = (rowIndex + 1) /]}
{[/]}
</table>
</div>
