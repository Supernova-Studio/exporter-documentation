{[ let block = context /]}  

{* Calculate table width for scrolling *}
{[ let tableWidth = 0 /]}
{[ for column in block.tableProperties.columns ]}
    {[ tableWidth = (tableWidth + column.width.value.measure) /]}
{[/]}

{[ let borderless = (!block.tableProperties.showBorders ? "borderless" : "") /]}
{[ let headerRow = (block.tableProperties.showHeaderRow ? "header-row" : "") /]}
{[ let headerColumn = (block.tableProperties.showHeaderColumn ? "header-column" : "") /]}

{* Scroll wrapper boundary *}
<div class="data-table-wrapper">
<table class="data-table {{ borderless }} {{ headerRow }} {{ headerColumn }}" style="width: {{ tableWidth }}px">
{* Row scope *}
{[ let rowIndex = 0 /]}
{[ for row in block.children ]}
  <tr>
  {* Cell scope *}
  {[ for cell in row.children ]}
    {[ let alignment = cell.alignment.lowercased() /]}
    {[ if (rowIndex === 0) ]}
        {* provide size for column for the first row *}
        {[ let columnSize = "auto" /]}
        {[ for column in block.tableProperties.columns ]}
            {[ if (column.id === cell.columnId) ]}
                {[ columnSize = (column.width.value.measure.toString().suffixed("px")) /]}
            {[/]}
        {[/]}
        <td class="{{ alignment }}" style="width: {{ columnSize }}">
    {[ else ]}
    <td class="{{ alignment }}">
    {[/]}
      {* Cell content *}
      {[ for cellBlock in cell.children ]}
          {[ inject "page_body_structure_block" context cellBlock /]}
      {[/]}      
    </td>
  {[/]}
  </tr>
  {[ rowIndex = (rowIndex + 1) /]}
{[/]}
</table>
</div>
