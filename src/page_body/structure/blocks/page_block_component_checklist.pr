
{* Get block *}
{[ const block = context /]}
{[ let configuration = exportConfiguration() /]}

{* Get properties *}
{[ let componentId = block.properties.componentId /]}
{[ let header = block.properties.header /]}
{[ let propertiesToHighlight = block.properties.propertiesToHighlight ? block.properties.propertiesToHighlight : [] /]}
{[ let showPropertyDescription = (block.properties.showPropertyDescription || block.properties.showPropertyDescription === undefined) ? true : false /]}

{[ let hasBooleanPropertiesToShow = false /]}
{[ let hasNonBooleanPropertiesToShow = false /]}

{* Render content health block *}
{[ if componentId ]}
    {[ let component = ds.componentById(componentId) /]}

    {[ if component ]}
        {[ for property in component.properties ]}
            {[ if ((property.propertyType === "Boolean") && (propertiesToHighlight.contains(property.persistentId))) ]}
                {[ hasBooleanPropertiesToShow = true /]}
            {[/]}
        {[/]}

        {[ for property in component.properties ]}
            {[ if ((property.propertyType !== "Boolean") && (propertiesToHighlight.contains(property.persistentId))) ]}
                {[ hasNonBooleanPropertiesToShow = true /]}
            {[/]}
        {[/]}

        {[ if header ]}
            <h4 class="component-checklist--header">{{ header }}</h4>
        {[/]}

        {[ if (hasBooleanPropertiesToShow || hasNonBooleanPropertiesToShow) ]}
            <div class="content-block content-block--component-checklist">
                {[ if hasBooleanPropertiesToShow ]}
                <div class="component-checklist--grid">
                {[ for property in component.properties ]}
                    {[ if ((property.propertyType === "Boolean") && (propertiesToHighlight.contains(property.persistentId))) ]}
                        {[ let value = component.propertyValues[property.codeName] /]}
                        <div class="list-item">
                            <div class="status">
                                {[ inject "component_icon_boolean" context { "value": value, "label": (value ? "True" : "False") } /]}
                            </div>

                            <div class="text">
                                <p class="title">{{ property.name }}</p>
                                {[ if showPropertyDescription ]}<p class="description">{{ property.description }}</p>{[/]}
                            </div>
                        </div>
                    {[/]}
                {[/]}
                </div>
                {[/]}
                {[ if hasNonBooleanPropertiesToShow ]}
                <div class="component-checklist--list">
                {[ for property in component.properties ]}
                    {[ if ((property.propertyType !== "Boolean") && (propertiesToHighlight.contains(property.persistentId))) ]}
                        {[ let value = component.propertyValues[property.codeName] /]}
                        <div class="list-item">
                            <div class="text">
                                <p class="title">{{ property.name }}</p>
                                {[ if showPropertyDescription ]}<p class="description">{{ property.description }}</p>{[/]}
                            </div>

                            <div class="value">
                                {[ inject "custom_properties_value" context { "value": value, "info": property, "mustReturnValue": true } /]}
                            </div>
                        </div>
                    {[/]}
                {[/]}
                </div>
                {[/]}
            </div>
        {[ else ]}
            {[ inject "component_callout" context ({"type": "warning", "text": "<strong>Unable to show component checklist block</strong><br />Please select properties to show.", "blockId": block.id }) /]}
        {[/]}
    {[ else ]}
        {[ inject "component_callout" context ({"type": "warning", "text": "<strong>Unable to show component checklist block</strong><br />Reason: Unknown component. Please contact the support.", "blockId": block.id }) /]}
    {[/]}
{[ else ]}
    {[ inject "component_callout" context ({"type": "warning", "text": "<strong>Unable to show component checklist block</strong><br />Please select a component in the block.", "blockId": block.id }) /]}
{[/]}
