
{* Get block *}
{[ const block = context /]}

{* Get properties *}
{[ let componentId = block.properties.componentId /]}

{* Render content health block *}
{[ if componentId ]}
    {[ let component = ds.componentById(componentId) /]}
    {[ if (component && block.properties.propertiesToHighlight) ]}
            
        {[ let properties = component.properties /]}
        {[ let propertyValues = component.propertyValues /]}

        {[ let propertiesToHighlight = block.properties.propertiesToHighlight ? block.properties.propertiesToHighlight : [] /]}
        {[ let linkPropertiesToHighlight = 0 /]}
        {[ for property in component.properties ]}
            {[ if (propertiesToHighlight.contains(property.persistentId) && ["URL"].contains(property.propertyType)) ]}
                {[ linkPropertiesToHighlight = (linkPropertiesToHighlight + 1) /]}
            {[/]}
        {[/]}
        {[ let staticPropertiesToHighlight = (propertiesToHighlight.count() - linkPropertiesToHighlight) /]}

        {* Get health tag *}
        {[ let healthTag = convertHealthTagIfAny(component) /]}
        {[ let healthTagReadable = healthTag.name /]}
        {[ let healthTagSlug = "status-"+healthTag.slug /]}
        {[ let healthTagContrastColor = contrastColor(healthTag.backgroundColor) /]}

        {* Generate inline component health *}
        <div class="content-block content-block--component-health {{ healthTagSlug }} {{ healthTagContrastColor }}" style="background-color: {{ healthTag.backgroundColor }}" aria-role="button" data-block-id="{{ block.id }}">
            <div class="health-tag-title">
                <div class="status-icon">
                    <svg enable-background="new 0 0 512 512" height="20" width="20" viewBox="0 0 512 512" fill="currentColor" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m121.472 166.116c2.024 24.213 6.672 57.38 17.189 92.205 22.336 73.956 61.794 126.543 117.339 156.427 55.545-29.884 95.003-82.471 117.338-156.427 10.517-34.822 15.164-67.99 17.19-92.205l-134.528-67.264z"/><path d="m481.854 119.657c-.28-5.394-3.44-10.221-8.271-12.636l-210.875-105.438c-4.223-2.111-9.193-2.111-13.416 0l-210.875 105.438c-4.831 2.415-7.991 7.242-8.271 12.636-.16 3.07-3.628 76.168 21.273 161.035 14.734 50.214 36.406 94.071 64.414 130.354 35.295 45.722 80.659 79.357 134.832 99.973 1.719.653 3.526.98 5.335.98s3.616-.327 5.335-.98c54.173-20.615 99.537-54.251 134.832-99.973 28.008-36.283 49.68-80.141 64.414-130.354 24.901-84.867 21.433-157.965 21.273-161.035zm-219.206 325.414c-2.095 1.036-4.372 1.554-6.648 1.554s-4.554-.518-6.648-1.554c-66.792-33.024-113.696-92.938-139.408-178.076-12.86-42.583-17.503-82.709-19.133-108.871-.375-6.008 2.879-11.657 8.263-14.349l150.219-75.109c4.223-2.11 9.193-2.111 13.416 0l150.22 75.109c5.384 2.691 8.638 8.342 8.263 14.35-1.631 26.164-6.274 66.291-19.134 108.87-25.714 85.137-72.618 145.051-139.41 178.076z"/></g></svg>
                </div>
                <div class="name">
                    {{ healthTagReadable }}
                </div>
            </div>
            {*
            {[ if (component && component.updatedAt) ]}
            <div class="date">
                Last updated: {{ component.updatedAt.formatDate("MMMM DD, YYYY") }}
            </div>
            {[/]}
            *}
        </div>

        {* Generate component health popup *}
        <div class="health-overlay d-none" id="overlay-{{ block.id }}">
            <div class="health-overlay-content {{ healthTagSlug }}">
                <div class="header {{ healthTagContrastColor }}" style="background-color: {{ healthTag.backgroundColor }}">
                    <div class="health-tag-title">
                        <div class="status-icon">
                            <svg enable-background="new 0 0 512 512" height="20" width="20" viewBox="0 0 512 512" fill="currentColor" width="512" xmlns="http://www.w3.org/2000/svg"><g><path d="m121.472 166.116c2.024 24.213 6.672 57.38 17.189 92.205 22.336 73.956 61.794 126.543 117.339 156.427 55.545-29.884 95.003-82.471 117.338-156.427 10.517-34.822 15.164-67.99 17.19-92.205l-134.528-67.264z"/><path d="m481.854 119.657c-.28-5.394-3.44-10.221-8.271-12.636l-210.875-105.438c-4.223-2.111-9.193-2.111-13.416 0l-210.875 105.438c-4.831 2.415-7.991 7.242-8.271 12.636-.16 3.07-3.628 76.168 21.273 161.035 14.734 50.214 36.406 94.071 64.414 130.354 35.295 45.722 80.659 79.357 134.832 99.973 1.719.653 3.526.98 5.335.98s3.616-.327 5.335-.98c54.173-20.615 99.537-54.251 134.832-99.973 28.008-36.283 49.68-80.141 64.414-130.354 24.901-84.867 21.433-157.965 21.273-161.035zm-219.206 325.414c-2.095 1.036-4.372 1.554-6.648 1.554s-4.554-.518-6.648-1.554c-66.792-33.024-113.696-92.938-139.408-178.076-12.86-42.583-17.503-82.709-19.133-108.871-.375-6.008 2.879-11.657 8.263-14.349l150.219-75.109c4.223-2.11 9.193-2.111 13.416 0l150.22 75.109c5.384 2.691 8.638 8.342 8.263 14.35-1.631 26.164-6.274 66.291-19.134 108.87-25.714 85.137-72.618 145.051-139.41 178.076z"/></g></svg>
                        </div>
                        <div class="name">
                            {{ healthTagReadable }}
                        </div>
                    </div>
                    {*
                    <div>
                        <div><strong>Published:</strong> {{ component.createdAt.formatDate("MMMM DD, YYYY") }}</div>
                        <div><strong>Updated:</strong> {{ component.updatedAt.formatDate("MMMM DD, YYYY") }}</div>
                    </div>  
                    *}
                </div>

                {* Generate properties that are of non-link type properties *}
                {[ if (staticPropertiesToHighlight > 0) ]}
                    <div class="links">
                        {[ for property in component.properties ]}
                            {[ if (propertiesToHighlight.contains(property.persistentId) && ["Text", "Number", "Generic", "Boolean", "Select"].contains(property.propertyType)) ]}
                                {* Generate content for each property *}
                                <div class="row">
                                    {* Property name *}
                                    <div class="col-6 lighter">{{ property.name }}</div>
                                    {* Property value *}
                                    <div class="col-6 text-right">
                                    {[ switch property.propertyType ]}
                                        {[ case "Text" ]}
                                            {{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}
                                        {[ case "Number" ]}
                                            {{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}
                                        {[ case "Generic" ]}
                                            <mark>{{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}</mark>
                                        {[ case "Boolean" ]}
                                            <span class="{{ propertyValues[property.codeName] ? "yes" : "no"}}">{{ propertyValues[property.codeName] ? "Yes" : "No"}}</span>
                                        {[ case "Select" ]}
                                            {[ let optionValue = "" /]}
                                            {[ let optionColor = "" /]}
                                            {[ let contrastColor = "" /]}
                                            {[ for option in property.options ]}
                                                {[ if (option.id === propertyValues[property.codeName]) ]}
                                                    {[ optionValue = option.name /]}
                                                    {[ optionColor = option.backgroundColor /]}
                                                    {[ contrastColor = contrastColor(optionColor) /]}
                                                {[/]}
                                            {[/]}  
                                            <span class="component-select-tag {{ contrastColor }}" style="background-color: {{ optionColor }}">
                                                {[ if (optionValue !== '') ]}{{ optionValue }}{[ else ]}Not set{[/]}
                                            </span>
                                    {[/]}
                                    </div>
                                </div>
                            {[/]}
                        {[/]}
                    </div>
                {[/]}

                {[ if (linkPropertiesToHighlight > 0) ]}
                    <div class="links">
                        {[ for property in component.properties ]}
                            {[ if (propertiesToHighlight.contains(property.persistentId) && ["URL", "Link"].contains(property.propertyType)) ]}
                                {* Limiting only to URL now, since the Link doesn't have data in the payload yet *}
                                {[ if (["URL"].contains(property.propertyType) && propertyValues[property.codeName]) ]}
                                    {* Generate link container, if needed *}
                                    {[ switch property.propertyType ]}
                                        {[ case "URL" ]}
                                            <a href="{{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "#" }}">
                                        {[ case "Link" ]}
                                            <a href="#TODO">
                                    {[/]}
                                    {* Generate content for each property *}
                                    <div class="row">
                                        {* Property name *}
                                        <div class="col-6 lighter">{{ property.name }}</div>
                                        {* Property value *}
                                        <div class="col-6 text-right">
                                        {[ switch property.propertyType ]}
                                            {[ case "Link" ]}
                                            <img class="link-chevron" />
                                            {[ case "URL" ]}
                                            <img class="link-chevron" />
                                        {[/]}
                                        </div>
                                    </div>
                                    </a>
                                {[/]}
                            {[/]}
                        {[/]}
                    </div>
                {[/]}
            </div>
        </div>
    {[ else ]}
    <p>Unable to show component health - unknown component</p>
    {[/]}
{[ else ]}
<p>Unable to show component health - please specify component first</p>
{[/]}
