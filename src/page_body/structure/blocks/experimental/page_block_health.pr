
{* Get block *}
{[ const block = context /]}

{* Get properties *}
{[ let componentId = block.properties.componentId /]}

{* Render content health block *}
{[ if componentId ]}
    {[ let component = ds.componentById(componentId) /]}
    {[ if component ]}
            
        {[ let properties = component.properties /]}
        {[ let propertyValues = component.propertyValues /]}

        {[ let propertiesToHighlight = block.properties.propertiesToHighlight ? block.properties.propertiesToHighlight : [] /]}
        {[ let linkPropertiesToHighlight = 0 /]}
        {[ for property in component.properties ]}
            {[ if (propertiesToHighlight.contains(property.persistentId) && property.propertyType === "URL" || property.propertyType === "Link") ]}
                {[ linkPropertiesToHighlight = (linkPropertiesToHighlight + 1) /]}
            {[/]}
        {[/]}
        {[ let staticPropertiesToHighlight = (propertiesToHighlight.count() - linkPropertiesToHighlight) /]}

        {* Get health tag *}
        {[ let healthTag = convertHealthTagIfAny(component) /]}
        {[ let healthTagReadable = "" /]}
        {[ switch healthTag ]}
            {[ case "healthy" ]}
                {[ healthTagReadable = "Healthy" /]}
            {[ case "withering" ]}
                {[ healthTagReadable = "Known Issues" /]}
            {[ case "dormant" ]}
                {[ healthTagReadable = "Deprecated" /]}
            {[ case "unknown" ]}
                {[ healthTagReadable = "Unknown" /]}
        {[/]}

        {* Generate inline component health *}
        <div class="component-health-row {{ healthTag }}" aria-role="button" data-block-id="{{ block.id }}">
            <div class="name">
                {{ healthTagReadable }}
            </div>
            <div class="date">
                Last modified {{ component.updatedAt.formatDate("MMMM DD, YYYY") }}
            </div>
        </div>

        {* Generate component health popup *}
        <div class="health-overlay d-none" id="overlay-{{ block.id }}">
            <div class="health-overlay-content {{ healthTag }}">
                <div class="header">
                    <div class="component-health-row {{ healthTag }}">
                        <div class="name">
                            {{ healthTagReadable }}
                        </div>
                    </div>
                    {[ switch healthTag ]}
                        {[ case "healthy" ]}
                        <span class="subtitle">This component is accurate and represents our most up-to-date recommendations.</span>
                        {[ case "withering" ]}
                        <span class="subtitle">This component has known issues, but is still generally recomended for use.</span>
                        {[ case "dormant" ]}
                        <span class="subtitle">This component is no longer recommended for use, and is in need of foundational updates.</span>
                        {[ case "unknown" ]}
                        <span class="subtitle">This component doesn't provide information about its health</span>
                    {[/]}
                    <div class="row">
                        <div class="col-6"><strong>Published</strong> {{ component.createdAt.formatDate("MMMM DD, YYYY") }}</div>
                        <div class="col-6"><strong>Modified</strong> {{ component.updatedAt.formatDate("MMMM DD, YYYY") }}</div>
                    </div>  
                </div>

                {* Generate properties that are of non-link type properties *}
                {[ if (staticPropertiesToHighlight > 0) ]}
                    <div class="links">
                        {[ for property in component.properties ]}
                            {[ if (propertiesToHighlight.contains(property.persistentId) && ["Text", "Number", "Generic", "Boolean", "Select"].contains(property.propertyType)) ]}
                                {* Generate content for each property *}
                                <div class="row">
                                    {* Property name *}
                                    <div class="col-6 lighter">{{ property.name }}</div>
                                    {* Property value *}
                                    <div class="col-6 text-right">
                                    {[ switch property.propertyType ]}
                                        {[ case "Text" ]}
                                            {{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}
                                        {[ case "Number" ]}
                                            {{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}
                                        {[ case "Generic" ]}
                                            <mark>{{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "-" }}</mark>
                                        {[ case "Boolean" ]}
                                            <span class="{{ propertyValues[property.codeName] ? "yes" : "no"}}">{{ propertyValues[property.codeName] ? "Yes" : "No"}}</span>
                                        {[ case "Select" ]}
                                            {[ let optionValue = "" /]}
                                            {[ let optionColor = "" /]}
                                            {[ let contrastColor = "" /]}
                                            {[ for option in property.options ]}
                                                {[ if (option.id === propertyValues[property.codeName]) ]}
                                                    {[ optionValue = option.name /]}
                                                    {[ optionColor = option.backgroundColor /]}
                                                    {[ contrastColor = contrastColor(optionColor) /]}
                                                {[/]}
                                            {[/]}  
                                            <span class="component-select-tag {{ contrastColor }}" style="background-color: {{ optionColor }}">
                                                {[ if (optionValue !== '') ]}{{ optionValue }}{[ else ]}Not set{[/]}
                                            </span>
                                    {[/]}
                                    </div>
                                </div>
                            {[/]}
                        {[/]}
                    </div>
                {[/]}

                {[ if (linkPropertiesToHighlight > 0) ]}
                    <div class="links">
                        {[ for property in component.properties ]}
                            {[ if (propertiesToHighlight.contains(property.persistentId) && ["URL", "Link"].contains(property.propertyType)) ]}
                                {* Limiting only to URL now, since the Link doesn't have data in the payload yet *}
                                {[ if (["URL"].contains(property.propertyType) && propertyValues[property.codeName]) ]}
                                    {* Generate link container, if needed *}
                                    {[ switch property.propertyType ]}
                                        {[ case "URL" ]}
                                            <a href="{{ propertyValues[property.codeName] ? propertyValues[property.codeName] : "#" }}">
                                        {[ case "Link" ]}
                                            <a href="#TODO">
                                    {[/]}
                                    {* Generate content for each property *}
                                    <div class="row">
                                        {* Property name *}
                                        <div class="col-6 lighter">{{ property.name }}</div>
                                        {* Property value *}
                                        <div class="col-6 text-right">
                                        {[ switch property.propertyType ]}
                                            {[ case "Link" ]}
                                            <img class="link-chevron" />
                                            {[ case "URL" ]}
                                            <img class="link-chevron" />
                                        {[/]}
                                        </div>
                                    </div>
                                    </a>
                                {[/]}
                            {[/]}
                        {[/]}
                    </div>
                {[/]}
            </div>
        </div>
    {[ else ]}
    <p>Unable to show component health - unknown component</p>
    {[/]}
{[ else ]}
<p>Unable to show component health - please specify component first</p>
{[/]}
