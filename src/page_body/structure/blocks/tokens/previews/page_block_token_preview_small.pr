{[ const token = context.token /]}
{[ const themes = context.themes /]}

{[ if token.tokenType.equals("Color") ]}
    {[ let colorLightnessCheck = contrastColorAPCA(token.value.hex) /]}
    <div class="token-preview-container checkered-background-light{{ (token.value.hex !== "ffffffff") ? " borderless" : "" }}">
        <div class="color-preview{{ ((colorLightnessCheck === "light") ? " inverted-text" : "") }}" style="background-color: #{{ token.value.hex }};">
            {[ inject "page_block_token_reference_badge" context token /]}
            {[ inject "page_block_token_themes_badge" context themes /]}
        </div>
    </div>

{[ elseif token.tokenType.equals("Border")]}
    <div class="token-preview-container borderless">
        <div class="token-preview-container-border" style="border: {{ token.value.width.measure }}px solid #{{ token.value.color.hex }};">
            {[ inject "page_block_token_reference_badge" context token /]}
            {[ inject "page_block_token_themes_badge" context themes /]}
        </div>
    </div>
{[ elseif token.tokenType.equals("Blur")]}
    {[ let measure = token.value.radius.measure /]}
    {[ switch token.value.type ]}
        {[ case "Background" ]}
            <div class="token-preview-container checkered-background-light-small">
                {[ inject "page_block_token_reference_badge" context token /]}
                {[ inject "page_block_token_themes_badge" context themes /]}
                <div class="token-preview-container-blur" style="background-color: transparent; width: 100%; height: 100%; backdrop-filter: blur({{ measure }}px);"></div>
                <div class="token-preview-container-blur-text-unblurred" style="color: #141618">
                {{ measure }}
                </div>
            </div>
        {[ case "Layer" ]}
            <div class="token-preview-container checkered-background-light-small">
                {[ inject "page_block_token_reference_badge" context token /]}
                {[ inject "page_block_token_themes_badge" context themes /]}
                <div class="token-preview-container-blur" style="background-color: #363a3e; filter: blur({{ measure }}px);">
                </div>
                <div class="token-preview-container-blur-text-unblurred">
                {{ measure }}
                </div>
            </div>
    {[/]}
{[ elseif token.tokenType.equals("Font")]}
    <div class="token-preview-container">Ag{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
{[ elseif token.tokenType.equals("Gradient")]}
    <div class="token-preview-container checkered-background-light">
        <div class="color-preview" style="background: {{ gradientTokenValue(token) }}">{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
    </div>
{[ elseif token.tokenType.equals("Measure")]}
    {[ if includes(token.parent.path, "Border Radius") ]}
        <div class="token-preview-container small-text" style="border-radius: {{ token.value.measure}}{{ measureTypeIntoReadableUnit(token.value.unit) }}; border-color: var(--colorBorderProminent)">{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
    {[ else ]}
        <div class="token-preview-container small-text">{{ token.value.measure}}{{ measureTypeIntoReadableUnit(token.value.unit) }}{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
    {[/]}
{[ elseif token.tokenType.equals("Radius")]}
        <div class="token-preview-container" style="border-radius: {{ token.value.radius.measure}}px; border-color: var(--colorBorderProminent)">{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
{[ elseif token.tokenType.equals("Shadow")]}
    <div class="token-preview-container overflowing borderless">
        {[ inject "page_block_token_reference_badge" context token /]}
        {[ inject "page_block_token_themes_badge" context themes /]}
        <div class="token-type-shadow" style="box-shadow: {{ shadowDescription(token) }}"></div>
    </div>
{[ elseif token.tokenType.equals("Text")]}
    <div class="token-preview-container">T{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
{[ elseif token.tokenType.equals("Typography")]}
    {[ const typographyCSS = convertTypographyTokenToCSS(token) /]}
    <div class="token-preview-container token-type-typography" style="{{ typographyCSS }}">Ag{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
{[ elseif token.tokenType.equals("GenericToken")]}
    <div class="token-preview-container small-text">{{ token.value.text }}{[ inject "page_block_token_reference_badge" context token /]}{[ inject "page_block_token_themes_badge" context themes /]}</div>
{[/]}
