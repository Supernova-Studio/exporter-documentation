{[ const token = context /]}

{[ if token.tokenType.equals("Color") ]}
    <div class="token-preview-container" style="background-color: #{{ token.value.hex }};"></div>
{[ elseif token.tokenType.equals("Border")]}
    <div class="token-preview-container">
        <div class="token-preview-container-border" style="border: {{ token.value.width.measure }}px solid #{{ token.value.color.hex }};"></div>
    </div>
{[ elseif token.tokenType.equals("Blur")]}
    {[ let measure = token.value.radius.measure /]}
    {[ switch token.value.type ]}
        {[ case "Background" ]}
            <div class="token-preview-container checkered-background-light-small">
                <div class="token-preview-container-blur" style="background-color: transparent; width: 100%; height: 100%; backdrop-filter: blur({{ measure }}px);">
                </div>
                <div class="token-preview-container-blur-text-unblurred" style="color: #141618">
                {{ measure }}
                </div>
            </div>
        {[ case "Layer" ]}
            <div class="token-preview-container checkered-background-light-small">
                <div class="token-preview-container-blur" style="background-color: #363a3e; filter: blur({{ measure }}px);">
                </div>
                <div class="token-preview-container-blur-text-unblurred">
                {{ measure }}
                </div>
            </div>
    {[/]}
{[ elseif token.tokenType.equals("Font")]}
    <div class="token-preview-container">Ag</div>
{[ elseif token.tokenType.equals("Gradient")]}
    <div class="token-preview-container checkered-background-light">
        <div class="color-preview" style="background: {{ gradientTokenValue(token) }}"></div>
    </div>
{[ elseif token.tokenType.equals("Measure")]}
    <div class="token-preview-container small-text">{{ token.value.measure}}{{ measureTypeIntoReadableUnit(token.value.unit) }}</div>
{[ elseif token.tokenType.equals("Radius")]}
    <div class="token-preview-container" style="border-radius: {{ token.value.radius.measure}}px; border-color: var(--colorBorderColorProminent)"></div>
{[ elseif token.tokenType.equals("Shadow")]}
    <div class="token-preview-container">
        <div class="token-type-shadow" style="box-shadow: {{ scaledShadowTokenValue(token, 4) }}"></div>
    </div>
{[ elseif token.tokenType.equals("Text")]}
    <div class="token-preview-container">T</div>
{[ elseif token.tokenType.equals("Typography")]}
    <div class="token-preview-container">Ag</div>
{[ elseif token.tokenType.equals("GenericToken")]}
    <div class="token-preview-container small-text">{{ token.value.text }}</div>
{[/]}
