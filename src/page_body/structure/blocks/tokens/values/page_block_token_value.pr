{[ let token = context /]}
<span class="token-value">
{[ if token.tokenType.equals("Color") ]}
    {{getFormattedColor(token.value)}}
{[ elseif token.tokenType.equals("Blur") ]}
    {[ switch token.value.type ]}
        {[ case "Background" ]}
            backdrop-filter: blur({{ measureValueToReadableUnit(token.value.radius) }})
        {[ case "Layer" ]}
            filter: blur({{ measureValueToReadableUnit(token.value.radius) }})
    {[/]}
{[ elseif token.tokenType.equals("Border") ]}
    {{ measureValueToReadableUnit(token.value.width) }} {{ getBorderStyleValue(token.value.style) }} {{ getFormattedColor(token.value.color) }}
{[ elseif token.tokenType.equals("Font") ]}
    {{ token.value.fontFamily.text }} {{ token.value.fontWeight.text }}
{[ elseif token.tokenType.equals("Gradient") ]}
    {{ gradientDescription(token) }}
{[ elseif token.tokenType.equals("Shadow")]}
    {{ shadowDescription(token) }}
{[ elseif token.tokenType.equals("Typography") ]}
    {{ typographyDescription(token)}}
{[ elseif isStringToken(token.tokenType)]}
    {{ token.value.text }}
{[ elseif (isDimensionToken(token.tokenType))]}
    {{ measureValueToReadableUnit(token.value) }}
{[ elseif token.tokenType.equals("GenericToken")]}
    {{ token.value.text }}
{[/]}
</span>