{* Fetch block from injection context, expected type 'Token' *}
{[ const block = context /]}

{[ let variant = block.variantKey /]}

{* Ignore block if it is empty *}
{[ if block.tokenIds.count() > 0) ]}
  <div class="content-block content-block--token-container">
    {[ if (variant === "table") ]}
    {* Displaying the list of tokens as a table *}
      <div class="token-table">
        {* Render all tokens *}
        {[ for tokenId in block.tokenIds ]}
          {[ const token = ds.tokenById(tokenId) /]}
          {[ inject "page_block_token_variant_table_item" context ({"token": token, "block": block}) /]}
        {[/]}
      </div>

      {[ elseif (variant.contains("stack")) ]}
      {* Stack â€“ Displaying the list of tokens as a stack (great for colors) *}

        <div class="stack{{ getVariantClass(variant) }}">
        {* Render all tokens *}
          {[ for tokenId in block.tokenIds ]}
            {[ const token = ds.tokenById(tokenId) /]}
            {[ inject "page_block_token_variant_stack_item" context ({"token": token, "block": block}) /]}
          {[/]}
        </div>
    {[ else ]}
    {* Default variant - displayed as a grid, support 2/3/4 items in a row (4 is default) *}

      <div class="grid{{ getVariantClass(variant) }}">
        {[ for tokenId in block.tokenIds ]}
          {[ const token = ds.tokenById(tokenId) /]}
          {[ inject "page_block_token_variant_grid_item" context ({"token": token, "block": block}) /]}
        {[/]}
      </div>

    {[/]} 
  </div>
{[/]}