{* Fetch block from injection context, expected type 'Token' *}
{[ const token = context.token /]}
{[ const block = context.block /]}

{[ if token.tokenType.equals("Color") ]}
    <div class="stack-item is-color">

        {[ if (block.theme && (block.theme.themeIds.length > 0)) ]}
            {* Intentionally selecting only one theme as it's supported by the Editor like this *}
            {[ let themeId = block.theme.themeIds[0] /]}
            {[ let themedToken = ds.tokensByApplyingThemes([token.id], [themeId]) /]}
            {[ let theme = ds.themeById(themeId) /]}

            {[ if (block.theme.type === "Comparison") ]}
                <div class="previews-side-by-side">
                {[ inject "page_block_token_preview_stack" context ({"token": token, "theme": null})  /]}  
                {[ inject "page_block_token_preview_stack" context ({"token": themedToken[0], "theme": theme})  /]}
                </div>
            {[ else ]}
                {[ inject "page_block_token_preview_stack" context ({"token": themedToken[0], "theme": theme})  /]}
            {[/]}
        {[ else ]}
            {[ inject "page_block_token_preview_stack" context ({"token": token, "theme": null})  /]} 
        {[/]}   
    </div>

{[ else ]}
    <div class="stack-item fallback">
        {[ inject "page_block_token_preview_stack" context ({"token": token, "theme": null})  /]}
    </div>
{[/]}
