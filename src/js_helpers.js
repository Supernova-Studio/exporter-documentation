(()=>{var e={"./node_modules/css-color-list/index.js":(e,r,t)=>{"use strict";var n=t("./node_modules/css-color-list/node_modules/css-color-names/css-color-names.json");e.exports=function(){return Object.keys(n)}},"./node_modules/get-contrast/index.js":(e,r,t)=>{const n=t("./node_modules/rgb/index.js"),a=t("./node_modules/wcag-contrast/dist/index.m.js"),o=t("./node_modules/is-blank/index.js"),s=t("./node_modules/is-named-css-color/index.js"),i=t("./node_modules/css-color-names/css-color-names.json");function l(e,r,t){return e=c(e,t),r=c(r,t),a.rgb(e,r)}function c(e,r){if("string"!=typeof e)throw new TypeError("get-contrast expects colors as strings");let t=e.toLowerCase();return s(t)&&(t=i[t]),t=u(t,r),t.match(/\((.*)\)/)[1].split(",").slice(0,3)}function u(e,r){r=r||{};const t=(e=n(e)).match(/\((.*)\)/)[1].split(",");if(4!=t.length||"0"!=t[3]||r.ignoreAlpha)return e;throw new TypeError("get-contrast cannot contrast transparent colors")}e.exports.ratio=l,e.exports.score=function(e,r,t){var n=a.score(l(e,r,t));return o(n)?"F":n},e.exports.isAccessible=function(e,r,t){return l(e,r,t)>4.5},e.exports.isNotTransparent=u},"./node_modules/hash-string/build/hash-string.js":function(e,r){var t,n,a;n=[],void 0===(a="function"==typeof(t=function(){function e(e){"use strict";for(var r=5381,t=e.length;t;)r=33*r^e.charCodeAt(--t);return r>>>0}return e})?t.apply(r,n):t)||(e.exports=a)},"./node_modules/is-blank/index.js":(e,r,t)=>{var n=t("./node_modules/is-empty/lib/index.js"),a=t("./node_modules/is-whitespace/index.js");e.exports=function(e){return function(e){return"string"==typeof e}(e)&&e.length?a(e):n(e)}},"./node_modules/is-empty/lib/index.js":e=>{var r=Object.prototype.hasOwnProperty,t=Object.prototype.toString;e.exports=function(e){if(null==e)return!0;if("boolean"==typeof e)return!1;if("number"==typeof e)return 0===e;if("string"==typeof e)return 0===e.length;if("function"==typeof e)return 0===e.length;if(Array.isArray(e))return 0===e.length;if(e instanceof Error)return""===e.message;if(e.toString==t)switch(e.toString()){case"[object File]":case"[object Map]":case"[object Set]":return 0===e.size;case"[object Object]":for(var n in e)if(r.call(e,n))return!1;return!0}return!1}},"./node_modules/is-named-css-color/index.js":(e,r,t)=>{"use strict";var n=t("./node_modules/css-color-list/index.js");e.exports=function(e){if("string"!=typeof e)throw new TypeError("is-named-css-color expects a string");return new RegExp("^"+n().join("|")+"$","i").test(e)}},"./node_modules/is-whitespace/index.js":e=>{"use strict";var r;e.exports=function(e){return"string"==typeof e&&(r||(r=new RegExp('^[\\s\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"]+$'))).test(e)}},"./node_modules/rgb/index.js":e=>{"use strict";var r={maroon:"#800000",red:"#ff0000",orange:"#ffA500",yellow:"#ffff00",olive:"#808000",purple:"#800080",fuchsia:"#ff00ff",white:"#ffffff",lime:"#00ff00",green:"#008000",navy:"#000080",blue:"#0000ff",aqua:"#00ffff",teal:"#008080",black:"#000000",silver:"#c0c0c0",gray:"#808080",transparent:"#0000"},t=function(e,r,t,n){return null!=n&&""!==n||(n=1),e=parseFloat(e),r=parseFloat(r),t=parseFloat(t),n=parseFloat(n),e<=255&&e>=0&&r<=255&&r>=0&&t<=255&&t>=0&&n<=1&&n>=0?[Math.round(e),Math.round(r),Math.round(t),n]:null},n=function(e,r,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?e+6*(r-e)*t:t<.5?r:t<2/3?e+(r-e)*(2/3-t)*6:e},a=function(e,r,t,a){var o,s,i;if(null!=a&&""!==a||(a=1),e=parseFloat(e)/360,r=parseFloat(r)/100,t=parseFloat(t)/100,a=parseFloat(a)/1,e>1||e<0||r>1||r<0||t>1||t<0||a>1||a<0)return null;if(0===r)o=s=i=t;else{var l=t<.5?t*(1+r):t+r-t*r,c=2*t-l;o=n(c,l,e+1/3),i=n(c,l,e),s=n(c,l,e-1/3)}return[255*o,255*i,255*s,a]},o=[];for(var s in r)o.push(s);var i="(?:#([a-f0-9]{3,8}))",l="\\s*([.\\d%]+)\\s*",c="\\("+[l,l,l]+"(?:,\\s*([.\\d]+)\\s*)?\\)",u="(?:rgb)a?",d="(?:hsl)a?",p="("+o.join("|")+")",f=RegExp(i,"i"),h=RegExp(u+c,"i"),g=RegExp(d+c,"i"),m=function(e,n){if(null==e)return null;e=(e+"").replace(/\s+/,"");var o=r[e];if(o)return m(o,n);if(o=e.match(f))e=function(e){if(3===e.length&&(e+="f"),4===e.length){var r=e.charAt(0),t=e.charAt(1),n=e.charAt(2),a=e.charAt(3);e=r+r+t+t+n+n+a+a}6===e.length&&(e+="ff");for(var o=[],s=0,i=e.length;s<i;s+=2)o.push(parseInt(e.substr(s,2),16)/(6===s?255:1));return o}(o[1]);else if(o=e.match(h))e=o.slice(1);else{if(!(o=e.match(g)))return null;e=a.apply(null,o.slice(1))}return e&&(e=t.apply(null,e))?n?e:(1===e[3]&&e.splice(3,1),"rgb"+(4===e.length?"a":"")+"("+e+")"):null},b=RegExp([p,i,u+c,d+c].join("|"),"gi");m.replace=function(e,r){return r||(r=function(e){return m(e)}),(e+"").replace(b,r)},m.matches=function(e){return!!(e+"").match(b)},e.exports=m},"./node_modules/semver-regex/index.js":e=>{"use strict";e.exports=()=>/(?:(?<=^v?|\sv?)(?:(?:0|[1-9]\d{0,9}?)\.){2}(?:0|[1-9]\d{0,9}?)(?:-(?:0|[1-9]\d*?|[\da-z-]*?[a-z-][\da-z-]*?){0,100}?(?:\.(?:0|[1-9]\d*?|[\da-z-]*?[a-z-][\da-z-]*?))*?){0,100}?(?:\+[\da-z-]+?(?:\.[\da-z-]+?)*?){0,100}?\b){1,200}?/gi},"./node_modules/semver-sort/index.js":(e,r,t)=>{"use strict";var n=t("./node_modules/semver-sort/node_modules/semver/semver.js"),a=t("./node_modules/semver-regex/index.js");function o(e,r){if(!e instanceof Array)throw new Error("It is not an array");return e.sort((function(e,t){var n=a().exec(e)[0]||e,o=a().exec(t)[0]||t;return r(n,o)}))}e.exports={asc:function(e){return o(e,n.compare)},desc:function(e){return o(e,n.rcompare)}}},"./node_modules/semver-sort/node_modules/semver/semver.js":(e,r)=>{var t;r=e.exports=J,t="object"==typeof process&&process.env&&process.env.NODE_DEBUG&&/\bsemver\b/i.test(process.env.NODE_DEBUG)?function(){var e=Array.prototype.slice.call(arguments,0);e.unshift("SEMVER"),console.log.apply(console,e)}:function(){},r.SEMVER_SPEC_VERSION="2.0.0";var n=256,a=Number.MAX_SAFE_INTEGER||9007199254740991,o=r.re=[],s=r.safeRe=[],i=r.src=[],l=0,c="[a-zA-Z0-9-]",u=[["\\s",1],["\\d",n],[c,250]];function d(e){for(var r=0;r<u.length;r++){var t=u[r][0],n=u[r][1];e=e.split(t+"*").join(t+"{0,"+n+"}").split(t+"+").join(t+"{1,"+n+"}")}return e}var p=l++;i[p]="0|[1-9]\\d*";var f=l++;i[f]="\\d+";var h=l++;i[h]="\\d*[a-zA-Z-][a-zA-Z0-9-]*";var g=l++;i[g]="("+i[p]+")\\.("+i[p]+")\\.("+i[p]+")";var m=l++;i[m]="("+i[f]+")\\.("+i[f]+")\\.("+i[f]+")";var b=l++;i[b]="(?:"+i[p]+"|"+i[h]+")";var _=l++;i[_]="(?:"+i[f]+"|"+i[h]+")";var w=l++;i[w]="(?:-("+i[b]+"(?:\\."+i[b]+")*))";var v=l++;i[v]="(?:-?("+i[_]+"(?:\\."+i[_]+")*))";var y=l++;i[y]="[a-zA-Z0-9-]+";var k=l++;i[k]="(?:\\+("+i[y]+"(?:\\."+i[y]+")*))";var M=l++,x="v?"+i[g]+i[w]+"?"+i[k]+"?";i[M]="^"+x+"$";var P="[v=\\s]*"+i[m]+i[v]+"?"+i[k]+"?",C=l++;i[C]="^"+P+"$";var j=l++;i[j]="((?:<|>)?=?)";var S=l++;i[S]=i[f]+"|x|X|\\*";var z=l++;i[z]=i[p]+"|x|X|\\*";var E=l++;i[E]="[v=\\s]*("+i[z]+")(?:\\.("+i[z]+")(?:\\.("+i[z]+")(?:"+i[w]+")?"+i[k]+"?)?)?";var A=l++;i[A]="[v=\\s]*("+i[S]+")(?:\\.("+i[S]+")(?:\\.("+i[S]+")(?:"+i[v]+")?"+i[k]+"?)?)?";var T=l++;i[T]="^"+i[j]+"\\s*"+i[E]+"$";var L=l++;i[L]="^"+i[j]+"\\s*"+i[A]+"$";var $=l++;i[$]="(?:^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])";var F=l++;i[F]="(?:~>?)";var I=l++;i[I]="(\\s*)"+i[F]+"\\s+",o[I]=new RegExp(i[I],"g"),s[I]=new RegExp(d(i[I]),"g");var B=l++;i[B]="^"+i[F]+i[E]+"$";var R=l++;i[R]="^"+i[F]+i[A]+"$";var H=l++;i[H]="(?:\\^)";var N=l++;i[N]="(\\s*)"+i[H]+"\\s+",o[N]=new RegExp(i[N],"g"),s[N]=new RegExp(d(i[N]),"g");var O=l++;i[O]="^"+i[H]+i[E]+"$";var D=l++;i[D]="^"+i[H]+i[A]+"$";var q=l++;i[q]="^"+i[j]+"\\s*("+P+")$|^$";var U=l++;i[U]="^"+i[j]+"\\s*("+x+")$|^$";var V=l++;i[V]="(\\s*)"+i[j]+"\\s*("+P+"|"+i[E]+")",o[V]=new RegExp(i[V],"g"),s[V]=new RegExp(d(i[V]),"g");var G=l++;i[G]="^\\s*("+i[E]+")\\s+-\\s+("+i[E]+")\\s*$";var W=l++;i[W]="^\\s*("+i[A]+")\\s+-\\s+("+i[A]+")\\s*$";var Z=l++;i[Z]="(<|>)?=?\\s*\\*";for(var Y=0;Y<35;Y++)t(Y,i[Y]),o[Y]||(o[Y]=new RegExp(i[Y]),s[Y]=new RegExp(d(i[Y])));function X(e,r){if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),e instanceof J)return e;if("string"!=typeof e)return null;if(e.length>n)return null;if(!(r.loose?s[C]:s[M]).test(e))return null;try{return new J(e,r)}catch(e){return null}}function J(e,r){if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),e instanceof J){if(e.loose===r.loose)return e;e=e.version}else if("string"!=typeof e)throw new TypeError("Invalid Version: "+e);if(e.length>n)throw new TypeError("version is longer than 256 characters");if(!(this instanceof J))return new J(e,r);t("SemVer",e,r),this.options=r,this.loose=!!r.loose;var o=e.trim().match(r.loose?s[C]:s[M]);if(!o)throw new TypeError("Invalid Version: "+e);if(this.raw=e,this.major=+o[1],this.minor=+o[2],this.patch=+o[3],this.major>a||this.major<0)throw new TypeError("Invalid major version");if(this.minor>a||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>a||this.patch<0)throw new TypeError("Invalid patch version");o[4]?this.prerelease=o[4].split(".").map((function(e){if(/^[0-9]+$/.test(e)){var r=+e;if(r>=0&&r<a)return r}return e})):this.prerelease=[],this.build=o[5]?o[5].split("."):[],this.format()}r.parse=X,r.valid=function(e,r){var t=X(e,r);return t?t.version:null},r.clean=function(e,r){var t=X(e.trim().replace(/^[=v]+/,""),r);return t?t.version:null},r.SemVer=J,J.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},J.prototype.toString=function(){return this.version},J.prototype.compare=function(e){return t("SemVer.compare",this.version,this.options,e),e instanceof J||(e=new J(e,this.options)),this.compareMain(e)||this.comparePre(e)},J.prototype.compareMain=function(e){return e instanceof J||(e=new J(e,this.options)),Q(this.major,e.major)||Q(this.minor,e.minor)||Q(this.patch,e.patch)},J.prototype.comparePre=function(e){if(e instanceof J||(e=new J(e,this.options)),this.prerelease.length&&!e.prerelease.length)return-1;if(!this.prerelease.length&&e.prerelease.length)return 1;if(!this.prerelease.length&&!e.prerelease.length)return 0;var r=0;do{var n=this.prerelease[r],a=e.prerelease[r];if(t("prerelease compare",r,n,a),void 0===n&&void 0===a)return 0;if(void 0===a)return 1;if(void 0===n)return-1;if(n!==a)return Q(n,a)}while(++r)},J.prototype.inc=function(e,r){switch(e){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",r);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",r);break;case"prepatch":this.prerelease.length=0,this.inc("patch",r),this.inc("pre",r);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",r),this.inc("pre",r);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else{for(var t=this.prerelease.length;--t>=0;)"number"==typeof this.prerelease[t]&&(this.prerelease[t]++,t=-2);-1===t&&this.prerelease.push(0)}r&&(this.prerelease[0]===r?isNaN(this.prerelease[1])&&(this.prerelease=[r,0]):this.prerelease=[r,0]);break;default:throw new Error("invalid increment argument: "+e)}return this.format(),this.raw=this.version,this},r.inc=function(e,r,t,n){"string"==typeof t&&(n=t,t=void 0);try{return new J(e,t).inc(r,n).version}catch(e){return null}},r.diff=function(e,r){if(ne(e,r))return null;var t=X(e),n=X(r),a="";if(t.prerelease.length||n.prerelease.length){a="pre";var o="prerelease"}for(var s in t)if(("major"===s||"minor"===s||"patch"===s)&&t[s]!==n[s])return a+s;return o},r.compareIdentifiers=Q;var K=/^[0-9]+$/;function Q(e,r){var t=K.test(e),n=K.test(r);return t&&n&&(e=+e,r=+r),e===r?0:t&&!n?-1:n&&!t?1:e<r?-1:1}function ee(e,r,t){return new J(e,t).compare(new J(r,t))}function re(e,r,t){return ee(e,r,t)>0}function te(e,r,t){return ee(e,r,t)<0}function ne(e,r,t){return 0===ee(e,r,t)}function ae(e,r,t){return 0!==ee(e,r,t)}function oe(e,r,t){return ee(e,r,t)>=0}function se(e,r,t){return ee(e,r,t)<=0}function ie(e,r,t,n){switch(r){case"===":return"object"==typeof e&&(e=e.version),"object"==typeof t&&(t=t.version),e===t;case"!==":return"object"==typeof e&&(e=e.version),"object"==typeof t&&(t=t.version),e!==t;case"":case"=":case"==":return ne(e,t,n);case"!=":return ae(e,t,n);case">":return re(e,t,n);case">=":return oe(e,t,n);case"<":return te(e,t,n);case"<=":return se(e,t,n);default:throw new TypeError("Invalid operator: "+r)}}function le(e,r){if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),e instanceof le){if(e.loose===!!r.loose)return e;e=e.value}if(!(this instanceof le))return new le(e,r);e=e.trim().split(/\s+/).join(" "),t("comparator",e,r),this.options=r,this.loose=!!r.loose,this.parse(e),this.semver===ce?this.value="":this.value=this.operator+this.semver.version,t("comp",this)}r.rcompareIdentifiers=function(e,r){return Q(r,e)},r.major=function(e,r){return new J(e,r).major},r.minor=function(e,r){return new J(e,r).minor},r.patch=function(e,r){return new J(e,r).patch},r.compare=ee,r.compareLoose=function(e,r){return ee(e,r,!0)},r.rcompare=function(e,r,t){return ee(r,e,t)},r.sort=function(e,t){return e.sort((function(e,n){return r.compare(e,n,t)}))},r.rsort=function(e,t){return e.sort((function(e,n){return r.rcompare(e,n,t)}))},r.gt=re,r.lt=te,r.eq=ne,r.neq=ae,r.gte=oe,r.lte=se,r.cmp=ie,r.Comparator=le;var ce={};function ue(e,r){if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),e instanceof ue)return e.loose===!!r.loose&&e.includePrerelease===!!r.includePrerelease?e:new ue(e.raw,r);if(e instanceof le)return new ue(e.value,r);if(!(this instanceof ue))return new ue(e,r);if(this.options=r,this.loose=!!r.loose,this.includePrerelease=!!r.includePrerelease,this.raw=e.trim().split(/\s+/).join(" "),this.set=this.raw.split("||").map((function(e){return this.parseRange(e.trim())}),this).filter((function(e){return e.length})),!this.set.length)throw new TypeError("Invalid SemVer Range: "+this.raw);this.format()}function de(e){return!e||"x"===e.toLowerCase()||"*"===e}function pe(e,r,t,n,a,o,s,i,l,c,u,d,p){return((r=de(t)?"":de(n)?">="+t+".0.0":de(a)?">="+t+"."+n+".0":">="+r)+" "+(i=de(l)?"":de(c)?"<"+(+l+1)+".0.0":de(u)?"<"+l+"."+(+c+1)+".0":d?"<="+l+"."+c+"."+u+"-"+d:"<="+i)).trim()}function fe(e,r,n){for(var a=0;a<e.length;a++)if(!e[a].test(r))return!1;if(r.prerelease.length&&!n.includePrerelease){for(a=0;a<e.length;a++)if(t(e[a].semver),e[a].semver!==ce&&e[a].semver.prerelease.length>0){var o=e[a].semver;if(o.major===r.major&&o.minor===r.minor&&o.patch===r.patch)return!0}return!1}return!0}function he(e,r,t){try{r=new ue(r,t)}catch(e){return!1}return r.test(e)}function ge(e,r,t,n){var a,o,s,i,l;switch(e=new J(e,n),r=new ue(r,n),t){case">":a=re,o=se,s=te,i=">",l=">=";break;case"<":a=te,o=oe,s=re,i="<",l="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(he(e,r,n))return!1;for(var c=0;c<r.set.length;++c){var u=r.set[c],d=null,p=null;if(u.forEach((function(e){e.semver===ce&&(e=new le(">=0.0.0")),d=d||e,p=p||e,a(e.semver,d.semver,n)?d=e:s(e.semver,p.semver,n)&&(p=e)})),d.operator===i||d.operator===l)return!1;if((!p.operator||p.operator===i)&&o(e,p.semver))return!1;if(p.operator===l&&s(e,p.semver))return!1}return!0}le.prototype.parse=function(e){var r=this.options.loose?s[q]:s[U],t=e.match(r);if(!t)throw new TypeError("Invalid comparator: "+e);this.operator=t[1],"="===this.operator&&(this.operator=""),t[2]?this.semver=new J(t[2],this.options.loose):this.semver=ce},le.prototype.toString=function(){return this.value},le.prototype.test=function(e){return t("Comparator.test",e,this.options.loose),this.semver===ce||("string"==typeof e&&(e=new J(e,this.options)),ie(e,this.operator,this.semver,this.options))},le.prototype.intersects=function(e,r){if(!(e instanceof le))throw new TypeError("a Comparator is required");var t;if(r&&"object"==typeof r||(r={loose:!!r,includePrerelease:!1}),""===this.operator)return t=new ue(e.value,r),he(this.value,t,r);if(""===e.operator)return t=new ue(this.value,r),he(e.semver,t,r);var n=!(">="!==this.operator&&">"!==this.operator||">="!==e.operator&&">"!==e.operator),a=!("<="!==this.operator&&"<"!==this.operator||"<="!==e.operator&&"<"!==e.operator),o=this.semver.version===e.semver.version,s=!(">="!==this.operator&&"<="!==this.operator||">="!==e.operator&&"<="!==e.operator),i=ie(this.semver,"<",e.semver,r)&&(">="===this.operator||">"===this.operator)&&("<="===e.operator||"<"===e.operator),l=ie(this.semver,">",e.semver,r)&&("<="===this.operator||"<"===this.operator)&&(">="===e.operator||">"===e.operator);return n||a||o&&s||i||l},r.Range=ue,ue.prototype.format=function(){return this.range=this.set.map((function(e){return e.join(" ").trim()})).join("||").trim(),this.range},ue.prototype.toString=function(){return this.range},ue.prototype.parseRange=function(e){var r=this.options.loose,n=r?s[W]:s[G];e=e.replace(n,pe),t("hyphen replace",e),e=e.replace(s[V],"$1$2$3"),t("comparator trim",e,s[V]),e=(e=e.replace(s[I],"$1~")).replace(s[N],"$1^");var a=r?s[q]:s[U],o=e.split(" ").map((function(e){return function(e,r){return t("comp",e,r),e=function(e,r){return e.trim().split(/\s+/).map((function(e){return function(e,r){t("caret",e,r);var n=r.loose?s[D]:s[O];return e.replace(n,(function(r,n,a,o,s){var i;return t("caret",e,r,n,a,o,s),de(n)?i="":de(a)?i=">="+n+".0.0 <"+(+n+1)+".0.0":de(o)?i="0"===n?">="+n+"."+a+".0 <"+n+"."+(+a+1)+".0":">="+n+"."+a+".0 <"+(+n+1)+".0.0":s?(t("replaceCaret pr",s),i="0"===n?"0"===a?">="+n+"."+a+"."+o+"-"+s+" <"+n+"."+a+"."+(+o+1):">="+n+"."+a+"."+o+"-"+s+" <"+n+"."+(+a+1)+".0":">="+n+"."+a+"."+o+"-"+s+" <"+(+n+1)+".0.0"):(t("no pr"),i="0"===n?"0"===a?">="+n+"."+a+"."+o+" <"+n+"."+a+"."+(+o+1):">="+n+"."+a+"."+o+" <"+n+"."+(+a+1)+".0":">="+n+"."+a+"."+o+" <"+(+n+1)+".0.0"),t("caret return",i),i}))}(e,r)})).join(" ")}(e,r),t("caret",e),e=function(e,r){return e.trim().split(/\s+/).map((function(e){return function(e,r){var n=r.loose?s[R]:s[B];return e.replace(n,(function(r,n,a,o,s){var i;return t("tilde",e,r,n,a,o,s),de(n)?i="":de(a)?i=">="+n+".0.0 <"+(+n+1)+".0.0":de(o)?i=">="+n+"."+a+".0 <"+n+"."+(+a+1)+".0":s?(t("replaceTilde pr",s),i=">="+n+"."+a+"."+o+"-"+s+" <"+n+"."+(+a+1)+".0"):i=">="+n+"."+a+"."+o+" <"+n+"."+(+a+1)+".0",t("tilde return",i),i}))}(e,r)})).join(" ")}(e,r),t("tildes",e),e=function(e,r){return t("replaceXRanges",e,r),e.split(/\s+/).map((function(e){return function(e,r){e=e.trim();var n=r.loose?s[L]:s[T];return e.replace(n,(function(r,n,a,o,s,i){t("xRange",e,r,n,a,o,s,i);var l=de(a),c=l||de(o),u=c||de(s);return"="===n&&u&&(n=""),l?r=">"===n||"<"===n?"<0.0.0":"*":n&&u?(c&&(o=0),s=0,">"===n?(n=">=",c?(a=+a+1,o=0,s=0):(o=+o+1,s=0)):"<="===n&&(n="<",c?a=+a+1:o=+o+1),r=n+a+"."+o+"."+s):c?r=">="+a+".0.0 <"+(+a+1)+".0.0":u&&(r=">="+a+"."+o+".0 <"+a+"."+(+o+1)+".0"),t("xRange return",r),r}))}(e,r)})).join(" ")}(e,r),t("xrange",e),e=function(e,r){return t("replaceStars",e,r),e.trim().replace(s[Z],"")}(e,r),t("stars",e),e}(e,this.options)}),this).join(" ").split(/\s+/);return this.options.loose&&(o=o.filter((function(e){return!!e.match(a)}))),o=o.map((function(e){return new le(e,this.options)}),this)},ue.prototype.intersects=function(e,r){if(!(e instanceof ue))throw new TypeError("a Range is required");return this.set.some((function(t){return t.every((function(t){return e.set.some((function(e){return e.every((function(e){return t.intersects(e,r)}))}))}))}))},r.toComparators=function(e,r){return new ue(e,r).set.map((function(e){return e.map((function(e){return e.value})).join(" ").trim().split(" ")}))},ue.prototype.test=function(e){if(!e)return!1;"string"==typeof e&&(e=new J(e,this.options));for(var r=0;r<this.set.length;r++)if(fe(this.set[r],e,this.options))return!0;return!1},r.satisfies=he,r.maxSatisfying=function(e,r,t){var n=null,a=null;try{var o=new ue(r,t)}catch(e){return null}return e.forEach((function(e){o.test(e)&&(n&&-1!==a.compare(e)||(a=new J(n=e,t)))})),n},r.minSatisfying=function(e,r,t){var n=null,a=null;try{var o=new ue(r,t)}catch(e){return null}return e.forEach((function(e){o.test(e)&&(n&&1!==a.compare(e)||(a=new J(n=e,t)))})),n},r.minVersion=function(e,r){e=new ue(e,r);var t=new J("0.0.0");if(e.test(t))return t;if(t=new J("0.0.0-0"),e.test(t))return t;t=null;for(var n=0;n<e.set.length;++n){e.set[n].forEach((function(e){var r=new J(e.semver.version);switch(e.operator){case">":0===r.prerelease.length?r.patch++:r.prerelease.push(0),r.raw=r.format();case"":case">=":t&&!re(t,r)||(t=r);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+e.operator)}}))}if(t&&e.test(t))return t;return null},r.validRange=function(e,r){try{return new ue(e,r).range||"*"}catch(e){return null}},r.ltr=function(e,r,t){return ge(e,r,"<",t)},r.gtr=function(e,r,t){return ge(e,r,">",t)},r.outside=ge,r.prerelease=function(e,r){var t=X(e,r);return t&&t.prerelease.length?t.prerelease:null},r.intersects=function(e,r,t){return e=new ue(e,t),r=new ue(r,t),e.intersects(r)},r.coerce=function(e){if(e instanceof J)return e;if("string"!=typeof e)return null;var r=e.match(s[$]);if(null==r)return null;return X(r[1]+"."+(r[2]||"0")+"."+(r[3]||"0"))}},"./node_modules/short-hash/src/index.js":(e,r,t)=>{"use strict";var n=t("./node_modules/hash-string/build/hash-string.js");e.exports=function(e){return n(e).toString(16)}},"./node_modules/showdown/dist/showdown.js":function(e,r,t){var n;(function(){function a(e){"use strict";var r={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:"Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,describe:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,describe:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,describe:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,describe:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,describe:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",describe:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,describe:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,describe:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,describe:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,describe:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,describe:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},ellipsis:{defaultValue:!0,describe:"Replaces three dots with the ellipsis unicode character",type:"boolean"},completeHTMLDocument:{defaultValue:!1,describe:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,describe:"Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,describe:"Split adjacent blockquote blocks",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(r));var t={};for(var n in r)r.hasOwnProperty(n)&&(t[n]=r[n].defaultValue);return t}var o={},s={},i={},l=a(!0),c="vanilla",u={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:a(!0),allOn:function(){"use strict";var e=a(!0),r={};for(var t in e)e.hasOwnProperty(t)&&(r[t]=!0);return r}()};function d(e,r){"use strict";var t=r?"Error in "+r+" extension->":"Error in unnamed extension",n={valid:!0,error:""};o.helper.isArray(e)||(e=[e]);for(var a=0;a<e.length;++a){var s=t+" sub-extension "+a+": ",i=e[a];if("object"!=typeof i)return n.valid=!1,n.error=s+"must be an object, but "+typeof i+" given",n;if(!o.helper.isString(i.type))return n.valid=!1,n.error=s+'property "type" must be a string, but '+typeof i.type+" given",n;var l=i.type=i.type.toLowerCase();if("language"===l&&(l=i.type="lang"),"html"===l&&(l=i.type="output"),"lang"!==l&&"output"!==l&&"listener"!==l)return n.valid=!1,n.error=s+"type "+l+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',n;if("listener"===l){if(o.helper.isUndefined(i.listeners))return n.valid=!1,n.error=s+'. Extensions of type "listener" must have a property called "listeners"',n}else if(o.helper.isUndefined(i.filter)&&o.helper.isUndefined(i.regex))return n.valid=!1,n.error=s+l+' extensions must define either a "regex" property or a "filter" method',n;if(i.listeners){if("object"!=typeof i.listeners)return n.valid=!1,n.error=s+'"listeners" property must be an object but '+typeof i.listeners+" given",n;for(var c in i.listeners)if(i.listeners.hasOwnProperty(c)&&"function"!=typeof i.listeners[c])return n.valid=!1,n.error=s+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+c+" must be a function but "+typeof i.listeners[c]+" given",n}if(i.filter){if("function"!=typeof i.filter)return n.valid=!1,n.error=s+'"filter" must be a function, but '+typeof i.filter+" given",n}else if(i.regex){if(o.helper.isString(i.regex)&&(i.regex=new RegExp(i.regex,"g")),!(i.regex instanceof RegExp))return n.valid=!1,n.error=s+'"regex" property must either be a string or a RegExp object, but '+typeof i.regex+" given",n;if(o.helper.isUndefined(i.replace))return n.valid=!1,n.error=s+'"regex" extensions must implement a replace string or function',n}}return n}function p(e,r){"use strict";return"¨E"+r.charCodeAt(0)+"E"}o.helper={},o.extensions={},o.setOption=function(e,r){"use strict";return l[e]=r,this},o.getOption=function(e){"use strict";return l[e]},o.getOptions=function(){"use strict";return l},o.resetOptions=function(){"use strict";l=a(!0)},o.setFlavor=function(e){"use strict";if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");o.resetOptions();var r=u[e];for(var t in c=e,r)r.hasOwnProperty(t)&&(l[t]=r[t])},o.getFlavor=function(){"use strict";return c},o.getFlavorOptions=function(e){"use strict";if(u.hasOwnProperty(e))return u[e]},o.getDefaultOptions=function(e){"use strict";return a(e)},o.subParser=function(e,r){"use strict";if(o.helper.isString(e)){if(void 0===r){if(s.hasOwnProperty(e))return s[e];throw Error("SubParser named "+e+" not registered!")}s[e]=r}},o.extension=function(e,r){"use strict";if(!o.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=o.helper.stdExtName(e),o.helper.isUndefined(r)){if(!i.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return i[e]}"function"==typeof r&&(r=r()),o.helper.isArray(r)||(r=[r]);var t=d(r,e);if(!t.valid)throw Error(t.error);i[e]=r},o.getAllExtensions=function(){"use strict";return i},o.removeExtension=function(e){"use strict";delete i[e]},o.resetExtensions=function(){"use strict";i={}},o.validateExtension=function(e){"use strict";var r=d(e,null);return!!r.valid||(console.warn(r.error),!1)},o.hasOwnProperty("helper")||(o.helper={}),o.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},o.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},o.helper.isArray=function(e){"use strict";return Array.isArray(e)},o.helper.isUndefined=function(e){"use strict";return void 0===e},o.helper.forEach=function(e,r){"use strict";if(o.helper.isUndefined(e))throw new Error("obj param is required");if(o.helper.isUndefined(r))throw new Error("callback param is required");if(!o.helper.isFunction(r))throw new Error("callback param must be a function/closure");if("function"==typeof e.forEach)e.forEach(r);else if(o.helper.isArray(e))for(var t=0;t<e.length;t++)r(e[t],t,e);else{if("object"!=typeof e)throw new Error("obj does not seem to be an array or an iterable object");for(var n in e)e.hasOwnProperty(n)&&r(e[n],n,e)}},o.helper.stdExtName=function(e){"use strict";return e.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()},o.helper.escapeCharactersCallback=p,o.helper.escapeCharacters=function(e,r,t){"use strict";var n="(["+r.replace(/([\[\]\\])/g,"\\$1")+"])";t&&(n="\\\\"+n);var a=new RegExp(n,"g");return e=e.replace(a,p)},o.helper.unescapeHTMLEntities=function(e){"use strict";return e.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var f=function(e,r,t,n){"use strict";var a,o,s,i,l,c=n||"",u=c.indexOf("g")>-1,d=new RegExp(r+"|"+t,"g"+c.replace(/g/g,"")),p=new RegExp(r,c.replace(/g/g,"")),f=[];do{for(a=0;s=d.exec(e);)if(p.test(s[0]))a++||(i=(o=d.lastIndex)-s[0].length);else if(a&&!--a){l=s.index+s[0].length;var h={left:{start:i,end:o},match:{start:o,end:s.index},right:{start:s.index,end:l},wholeMatch:{start:i,end:l}};if(f.push(h),!u)return f}}while(a&&(d.lastIndex=o));return f};o.helper.matchRecursiveRegExp=function(e,r,t,n){"use strict";for(var a=f(e,r,t,n),o=[],s=0;s<a.length;++s)o.push([e.slice(a[s].wholeMatch.start,a[s].wholeMatch.end),e.slice(a[s].match.start,a[s].match.end),e.slice(a[s].left.start,a[s].left.end),e.slice(a[s].right.start,a[s].right.end)]);return o},o.helper.replaceRecursiveRegExp=function(e,r,t,n,a){"use strict";if(!o.helper.isFunction(r)){var s=r;r=function(){return s}}var i=f(e,t,n,a),l=e,c=i.length;if(c>0){var u=[];0!==i[0].wholeMatch.start&&u.push(e.slice(0,i[0].wholeMatch.start));for(var d=0;d<c;++d)u.push(r(e.slice(i[d].wholeMatch.start,i[d].wholeMatch.end),e.slice(i[d].match.start,i[d].match.end),e.slice(i[d].left.start,i[d].left.end),e.slice(i[d].right.start,i[d].right.end))),d<c-1&&u.push(e.slice(i[d].wholeMatch.end,i[d+1].wholeMatch.start));i[c-1].wholeMatch.end<e.length&&u.push(e.slice(i[c-1].wholeMatch.end)),l=u.join("")}return l},o.helper.regexIndexOf=function(e,r,t){"use strict";if(!o.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(r instanceof RegExp==!1)throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var n=e.substring(t||0).search(r);return n>=0?n+(t||0):n},o.helper.splitAtIndex=function(e,r){"use strict";if(!o.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[e.substring(0,r),e.substring(r)]},o.helper.encodeEmailAddress=function(e){"use strict";var r=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e=e.replace(/./g,(function(e){if("@"===e)e=r[Math.floor(2*Math.random())](e);else{var t=Math.random();e=t>.9?r[2](e):t>.45?r[1](e):r[0](e)}return e}))},o.helper.padEnd=function(e,r,t){"use strict";return r>>=0,t=String(t||" "),e.length>r?String(e):((r-=e.length)>t.length&&(t+=t.repeat(r/t.length)),String(e)+t.slice(0,r))},"undefined"==typeof console&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),o.helper.regexes={asteriskDashAndColon:/([*_:~])/g},o.helper.emojis={"+1":"👍","-1":"👎",100:"💯",1234:"🔢","1st_place_medal":"🥇","2nd_place_medal":"🥈","3rd_place_medal":"🥉","8ball":"🎱",a:"🅰️",ab:"🆎",abc:"🔤",abcd:"🔡",accept:"🉑",aerial_tramway:"🚡",airplane:"✈️",alarm_clock:"⏰",alembic:"⚗️",alien:"👽",ambulance:"🚑",amphora:"🏺",anchor:"⚓️",angel:"👼",anger:"💢",angry:"😠",anguished:"😧",ant:"🐜",apple:"🍎",aquarius:"♒️",aries:"♈️",arrow_backward:"◀️",arrow_double_down:"⏬",arrow_double_up:"⏫",arrow_down:"⬇️",arrow_down_small:"🔽",arrow_forward:"▶️",arrow_heading_down:"⤵️",arrow_heading_up:"⤴️",arrow_left:"⬅️",arrow_lower_left:"↙️",arrow_lower_right:"↘️",arrow_right:"➡️",arrow_right_hook:"↪️",arrow_up:"⬆️",arrow_up_down:"↕️",arrow_up_small:"🔼",arrow_upper_left:"↖️",arrow_upper_right:"↗️",arrows_clockwise:"🔃",arrows_counterclockwise:"🔄",art:"🎨",articulated_lorry:"🚛",artificial_satellite:"🛰",astonished:"😲",athletic_shoe:"👟",atm:"🏧",atom_symbol:"⚛️",avocado:"🥑",b:"🅱️",baby:"👶",baby_bottle:"🍼",baby_chick:"🐤",baby_symbol:"🚼",back:"🔙",bacon:"🥓",badminton:"🏸",baggage_claim:"🛄",baguette_bread:"🥖",balance_scale:"⚖️",balloon:"🎈",ballot_box:"🗳",ballot_box_with_check:"☑️",bamboo:"🎍",banana:"🍌",bangbang:"‼️",bank:"🏦",bar_chart:"📊",barber:"💈",baseball:"⚾️",basketball:"🏀",basketball_man:"⛹️",basketball_woman:"⛹️&zwj;♀️",bat:"🦇",bath:"🛀",bathtub:"🛁",battery:"🔋",beach_umbrella:"🏖",bear:"🐻",bed:"🛏",bee:"🐝",beer:"🍺",beers:"🍻",beetle:"🐞",beginner:"🔰",bell:"🔔",bellhop_bell:"🛎",bento:"🍱",biking_man:"🚴",bike:"🚲",biking_woman:"🚴&zwj;♀️",bikini:"👙",biohazard:"☣️",bird:"🐦",birthday:"🎂",black_circle:"⚫️",black_flag:"🏴",black_heart:"🖤",black_joker:"🃏",black_large_square:"⬛️",black_medium_small_square:"◾️",black_medium_square:"◼️",black_nib:"✒️",black_small_square:"▪️",black_square_button:"🔲",blonde_man:"👱",blonde_woman:"👱&zwj;♀️",blossom:"🌼",blowfish:"🐡",blue_book:"📘",blue_car:"🚙",blue_heart:"💙",blush:"😊",boar:"🐗",boat:"⛵️",bomb:"💣",book:"📖",bookmark:"🔖",bookmark_tabs:"📑",books:"📚",boom:"💥",boot:"👢",bouquet:"💐",bowing_man:"🙇",bow_and_arrow:"🏹",bowing_woman:"🙇&zwj;♀️",bowling:"🎳",boxing_glove:"🥊",boy:"👦",bread:"🍞",bride_with_veil:"👰",bridge_at_night:"🌉",briefcase:"💼",broken_heart:"💔",bug:"🐛",building_construction:"🏗",bulb:"💡",bullettrain_front:"🚅",bullettrain_side:"🚄",burrito:"🌯",bus:"🚌",business_suit_levitating:"🕴",busstop:"🚏",bust_in_silhouette:"👤",busts_in_silhouette:"👥",butterfly:"🦋",cactus:"🌵",cake:"🍰",calendar:"📆",call_me_hand:"🤙",calling:"📲",camel:"🐫",camera:"📷",camera_flash:"📸",camping:"🏕",cancer:"♋️",candle:"🕯",candy:"🍬",canoe:"🛶",capital_abcd:"🔠",capricorn:"♑️",car:"🚗",card_file_box:"🗃",card_index:"📇",card_index_dividers:"🗂",carousel_horse:"🎠",carrot:"🥕",cat:"🐱",cat2:"🐈",cd:"💿",chains:"⛓",champagne:"🍾",chart:"💹",chart_with_downwards_trend:"📉",chart_with_upwards_trend:"📈",checkered_flag:"🏁",cheese:"🧀",cherries:"🍒",cherry_blossom:"🌸",chestnut:"🌰",chicken:"🐔",children_crossing:"🚸",chipmunk:"🐿",chocolate_bar:"🍫",christmas_tree:"🎄",church:"⛪️",cinema:"🎦",circus_tent:"🎪",city_sunrise:"🌇",city_sunset:"🌆",cityscape:"🏙",cl:"🆑",clamp:"🗜",clap:"👏",clapper:"🎬",classical_building:"🏛",clinking_glasses:"🥂",clipboard:"📋",clock1:"🕐",clock10:"🕙",clock1030:"🕥",clock11:"🕚",clock1130:"🕦",clock12:"🕛",clock1230:"🕧",clock130:"🕜",clock2:"🕑",clock230:"🕝",clock3:"🕒",clock330:"🕞",clock4:"🕓",clock430:"🕟",clock5:"🕔",clock530:"🕠",clock6:"🕕",clock630:"🕡",clock7:"🕖",clock730:"🕢",clock8:"🕗",clock830:"🕣",clock9:"🕘",clock930:"🕤",closed_book:"📕",closed_lock_with_key:"🔐",closed_umbrella:"🌂",cloud:"☁️",cloud_with_lightning:"🌩",cloud_with_lightning_and_rain:"⛈",cloud_with_rain:"🌧",cloud_with_snow:"🌨",clown_face:"🤡",clubs:"♣️",cocktail:"🍸",coffee:"☕️",coffin:"⚰️",cold_sweat:"😰",comet:"☄️",computer:"💻",computer_mouse:"🖱",confetti_ball:"🎊",confounded:"😖",confused:"😕",congratulations:"㊗️",construction:"🚧",construction_worker_man:"👷",construction_worker_woman:"👷&zwj;♀️",control_knobs:"🎛",convenience_store:"🏪",cookie:"🍪",cool:"🆒",policeman:"👮",copyright:"©️",corn:"🌽",couch_and_lamp:"🛋",couple:"👫",couple_with_heart_woman_man:"💑",couple_with_heart_man_man:"👨&zwj;❤️&zwj;👨",couple_with_heart_woman_woman:"👩&zwj;❤️&zwj;👩",couplekiss_man_man:"👨&zwj;❤️&zwj;💋&zwj;👨",couplekiss_man_woman:"💏",couplekiss_woman_woman:"👩&zwj;❤️&zwj;💋&zwj;👩",cow:"🐮",cow2:"🐄",cowboy_hat_face:"🤠",crab:"🦀",crayon:"🖍",credit_card:"💳",crescent_moon:"🌙",cricket:"🏏",crocodile:"🐊",croissant:"🥐",crossed_fingers:"🤞",crossed_flags:"🎌",crossed_swords:"⚔️",crown:"👑",cry:"😢",crying_cat_face:"😿",crystal_ball:"🔮",cucumber:"🥒",cupid:"💘",curly_loop:"➰",currency_exchange:"💱",curry:"🍛",custard:"🍮",customs:"🛃",cyclone:"🌀",dagger:"🗡",dancer:"💃",dancing_women:"👯",dancing_men:"👯&zwj;♂️",dango:"🍡",dark_sunglasses:"🕶",dart:"🎯",dash:"💨",date:"📅",deciduous_tree:"🌳",deer:"🦌",department_store:"🏬",derelict_house:"🏚",desert:"🏜",desert_island:"🏝",desktop_computer:"🖥",male_detective:"🕵️",diamond_shape_with_a_dot_inside:"💠",diamonds:"♦️",disappointed:"😞",disappointed_relieved:"😥",dizzy:"💫",dizzy_face:"😵",do_not_litter:"🚯",dog:"🐶",dog2:"🐕",dollar:"💵",dolls:"🎎",dolphin:"🐬",door:"🚪",doughnut:"🍩",dove:"🕊",dragon:"🐉",dragon_face:"🐲",dress:"👗",dromedary_camel:"🐪",drooling_face:"🤤",droplet:"💧",drum:"🥁",duck:"🦆",dvd:"📀","e-mail":"📧",eagle:"🦅",ear:"👂",ear_of_rice:"🌾",earth_africa:"🌍",earth_americas:"🌎",earth_asia:"🌏",egg:"🥚",eggplant:"🍆",eight_pointed_black_star:"✴️",eight_spoked_asterisk:"✳️",electric_plug:"🔌",elephant:"🐘",email:"✉️",end:"🔚",envelope_with_arrow:"📩",euro:"💶",european_castle:"🏰",european_post_office:"🏤",evergreen_tree:"🌲",exclamation:"❗️",expressionless:"😑",eye:"👁",eye_speech_bubble:"👁&zwj;🗨",eyeglasses:"👓",eyes:"👀",face_with_head_bandage:"🤕",face_with_thermometer:"🤒",fist_oncoming:"👊",factory:"🏭",fallen_leaf:"🍂",family_man_woman_boy:"👪",family_man_boy:"👨&zwj;👦",family_man_boy_boy:"👨&zwj;👦&zwj;👦",family_man_girl:"👨&zwj;👧",family_man_girl_boy:"👨&zwj;👧&zwj;👦",family_man_girl_girl:"👨&zwj;👧&zwj;👧",family_man_man_boy:"👨&zwj;👨&zwj;👦",family_man_man_boy_boy:"👨&zwj;👨&zwj;👦&zwj;👦",family_man_man_girl:"👨&zwj;👨&zwj;👧",family_man_man_girl_boy:"👨&zwj;👨&zwj;👧&zwj;👦",family_man_man_girl_girl:"👨&zwj;👨&zwj;👧&zwj;👧",family_man_woman_boy_boy:"👨&zwj;👩&zwj;👦&zwj;👦",family_man_woman_girl:"👨&zwj;👩&zwj;👧",family_man_woman_girl_boy:"👨&zwj;👩&zwj;👧&zwj;👦",family_man_woman_girl_girl:"👨&zwj;👩&zwj;👧&zwj;👧",family_woman_boy:"👩&zwj;👦",family_woman_boy_boy:"👩&zwj;👦&zwj;👦",family_woman_girl:"👩&zwj;👧",family_woman_girl_boy:"👩&zwj;👧&zwj;👦",family_woman_girl_girl:"👩&zwj;👧&zwj;👧",family_woman_woman_boy:"👩&zwj;👩&zwj;👦",family_woman_woman_boy_boy:"👩&zwj;👩&zwj;👦&zwj;👦",family_woman_woman_girl:"👩&zwj;👩&zwj;👧",family_woman_woman_girl_boy:"👩&zwj;👩&zwj;👧&zwj;👦",family_woman_woman_girl_girl:"👩&zwj;👩&zwj;👧&zwj;👧",fast_forward:"⏩",fax:"📠",fearful:"😨",feet:"🐾",female_detective:"🕵️&zwj;♀️",ferris_wheel:"🎡",ferry:"⛴",field_hockey:"🏑",file_cabinet:"🗄",file_folder:"📁",film_projector:"📽",film_strip:"🎞",fire:"🔥",fire_engine:"🚒",fireworks:"🎆",first_quarter_moon:"🌓",first_quarter_moon_with_face:"🌛",fish:"🐟",fish_cake:"🍥",fishing_pole_and_fish:"🎣",fist_raised:"✊",fist_left:"🤛",fist_right:"🤜",flags:"🎏",flashlight:"🔦",fleur_de_lis:"⚜️",flight_arrival:"🛬",flight_departure:"🛫",floppy_disk:"💾",flower_playing_cards:"🎴",flushed:"😳",fog:"🌫",foggy:"🌁",football:"🏈",footprints:"👣",fork_and_knife:"🍴",fountain:"⛲️",fountain_pen:"🖋",four_leaf_clover:"🍀",fox_face:"🦊",framed_picture:"🖼",free:"🆓",fried_egg:"🍳",fried_shrimp:"🍤",fries:"🍟",frog:"🐸",frowning:"😦",frowning_face:"☹️",frowning_man:"🙍&zwj;♂️",frowning_woman:"🙍",middle_finger:"🖕",fuelpump:"⛽️",full_moon:"🌕",full_moon_with_face:"🌝",funeral_urn:"⚱️",game_die:"🎲",gear:"⚙️",gem:"💎",gemini:"♊️",ghost:"👻",gift:"🎁",gift_heart:"💝",girl:"👧",globe_with_meridians:"🌐",goal_net:"🥅",goat:"🐐",golf:"⛳️",golfing_man:"🏌️",golfing_woman:"🏌️&zwj;♀️",gorilla:"🦍",grapes:"🍇",green_apple:"🍏",green_book:"📗",green_heart:"💚",green_salad:"🥗",grey_exclamation:"❕",grey_question:"❔",grimacing:"😬",grin:"😁",grinning:"😀",guardsman:"💂",guardswoman:"💂&zwj;♀️",guitar:"🎸",gun:"🔫",haircut_woman:"💇",haircut_man:"💇&zwj;♂️",hamburger:"🍔",hammer:"🔨",hammer_and_pick:"⚒",hammer_and_wrench:"🛠",hamster:"🐹",hand:"✋",handbag:"👜",handshake:"🤝",hankey:"💩",hatched_chick:"🐥",hatching_chick:"🐣",headphones:"🎧",hear_no_evil:"🙉",heart:"❤️",heart_decoration:"💟",heart_eyes:"😍",heart_eyes_cat:"😻",heartbeat:"💓",heartpulse:"💗",hearts:"♥️",heavy_check_mark:"✔️",heavy_division_sign:"➗",heavy_dollar_sign:"💲",heavy_heart_exclamation:"❣️",heavy_minus_sign:"➖",heavy_multiplication_x:"✖️",heavy_plus_sign:"➕",helicopter:"🚁",herb:"🌿",hibiscus:"🌺",high_brightness:"🔆",high_heel:"👠",hocho:"🔪",hole:"🕳",honey_pot:"🍯",horse:"🐴",horse_racing:"🏇",hospital:"🏥",hot_pepper:"🌶",hotdog:"🌭",hotel:"🏨",hotsprings:"♨️",hourglass:"⌛️",hourglass_flowing_sand:"⏳",house:"🏠",house_with_garden:"🏡",houses:"🏘",hugs:"🤗",hushed:"😯",ice_cream:"🍨",ice_hockey:"🏒",ice_skate:"⛸",icecream:"🍦",id:"🆔",ideograph_advantage:"🉐",imp:"👿",inbox_tray:"📥",incoming_envelope:"📨",tipping_hand_woman:"💁",information_source:"ℹ️",innocent:"😇",interrobang:"⁉️",iphone:"📱",izakaya_lantern:"🏮",jack_o_lantern:"🎃",japan:"🗾",japanese_castle:"🏯",japanese_goblin:"👺",japanese_ogre:"👹",jeans:"👖",joy:"😂",joy_cat:"😹",joystick:"🕹",kaaba:"🕋",key:"🔑",keyboard:"⌨️",keycap_ten:"🔟",kick_scooter:"🛴",kimono:"👘",kiss:"💋",kissing:"😗",kissing_cat:"😽",kissing_closed_eyes:"😚",kissing_heart:"😘",kissing_smiling_eyes:"😙",kiwi_fruit:"🥝",koala:"🐨",koko:"🈁",label:"🏷",large_blue_circle:"🔵",large_blue_diamond:"🔷",large_orange_diamond:"🔶",last_quarter_moon:"🌗",last_quarter_moon_with_face:"🌜",latin_cross:"✝️",laughing:"😆",leaves:"🍃",ledger:"📒",left_luggage:"🛅",left_right_arrow:"↔️",leftwards_arrow_with_hook:"↩️",lemon:"🍋",leo:"♌️",leopard:"🐆",level_slider:"🎚",libra:"♎️",light_rail:"🚈",link:"🔗",lion:"🦁",lips:"👄",lipstick:"💄",lizard:"🦎",lock:"🔒",lock_with_ink_pen:"🔏",lollipop:"🍭",loop:"➿",loud_sound:"🔊",loudspeaker:"📢",love_hotel:"🏩",love_letter:"💌",low_brightness:"🔅",lying_face:"🤥",m:"Ⓜ️",mag:"🔍",mag_right:"🔎",mahjong:"🀄️",mailbox:"📫",mailbox_closed:"📪",mailbox_with_mail:"📬",mailbox_with_no_mail:"📭",man:"👨",man_artist:"👨&zwj;🎨",man_astronaut:"👨&zwj;🚀",man_cartwheeling:"🤸&zwj;♂️",man_cook:"👨&zwj;🍳",man_dancing:"🕺",man_facepalming:"🤦&zwj;♂️",man_factory_worker:"👨&zwj;🏭",man_farmer:"👨&zwj;🌾",man_firefighter:"👨&zwj;🚒",man_health_worker:"👨&zwj;⚕️",man_in_tuxedo:"🤵",man_judge:"👨&zwj;⚖️",man_juggling:"🤹&zwj;♂️",man_mechanic:"👨&zwj;🔧",man_office_worker:"👨&zwj;💼",man_pilot:"👨&zwj;✈️",man_playing_handball:"🤾&zwj;♂️",man_playing_water_polo:"🤽&zwj;♂️",man_scientist:"👨&zwj;🔬",man_shrugging:"🤷&zwj;♂️",man_singer:"👨&zwj;🎤",man_student:"👨&zwj;🎓",man_teacher:"👨&zwj;🏫",man_technologist:"👨&zwj;💻",man_with_gua_pi_mao:"👲",man_with_turban:"👳",tangerine:"🍊",mans_shoe:"👞",mantelpiece_clock:"🕰",maple_leaf:"🍁",martial_arts_uniform:"🥋",mask:"😷",massage_woman:"💆",massage_man:"💆&zwj;♂️",meat_on_bone:"🍖",medal_military:"🎖",medal_sports:"🏅",mega:"📣",melon:"🍈",memo:"📝",men_wrestling:"🤼&zwj;♂️",menorah:"🕎",mens:"🚹",metal:"🤘",metro:"🚇",microphone:"🎤",microscope:"🔬",milk_glass:"🥛",milky_way:"🌌",minibus:"🚐",minidisc:"💽",mobile_phone_off:"📴",money_mouth_face:"🤑",money_with_wings:"💸",moneybag:"💰",monkey:"🐒",monkey_face:"🐵",monorail:"🚝",moon:"🌔",mortar_board:"🎓",mosque:"🕌",motor_boat:"🛥",motor_scooter:"🛵",motorcycle:"🏍",motorway:"🛣",mount_fuji:"🗻",mountain:"⛰",mountain_biking_man:"🚵",mountain_biking_woman:"🚵&zwj;♀️",mountain_cableway:"🚠",mountain_railway:"🚞",mountain_snow:"🏔",mouse:"🐭",mouse2:"🐁",movie_camera:"🎥",moyai:"🗿",mrs_claus:"🤶",muscle:"💪",mushroom:"🍄",musical_keyboard:"🎹",musical_note:"🎵",musical_score:"🎼",mute:"🔇",nail_care:"💅",name_badge:"📛",national_park:"🏞",nauseated_face:"🤢",necktie:"👔",negative_squared_cross_mark:"❎",nerd_face:"🤓",neutral_face:"😐",new:"🆕",new_moon:"🌑",new_moon_with_face:"🌚",newspaper:"📰",newspaper_roll:"🗞",next_track_button:"⏭",ng:"🆖",no_good_man:"🙅&zwj;♂️",no_good_woman:"🙅",night_with_stars:"🌃",no_bell:"🔕",no_bicycles:"🚳",no_entry:"⛔️",no_entry_sign:"🚫",no_mobile_phones:"📵",no_mouth:"😶",no_pedestrians:"🚷",no_smoking:"🚭","non-potable_water":"🚱",nose:"👃",notebook:"📓",notebook_with_decorative_cover:"📔",notes:"🎶",nut_and_bolt:"🔩",o:"⭕️",o2:"🅾️",ocean:"🌊",octopus:"🐙",oden:"🍢",office:"🏢",oil_drum:"🛢",ok:"🆗",ok_hand:"👌",ok_man:"🙆&zwj;♂️",ok_woman:"🙆",old_key:"🗝",older_man:"👴",older_woman:"👵",om:"🕉",on:"🔛",oncoming_automobile:"🚘",oncoming_bus:"🚍",oncoming_police_car:"🚔",oncoming_taxi:"🚖",open_file_folder:"📂",open_hands:"👐",open_mouth:"😮",open_umbrella:"☂️",ophiuchus:"⛎",orange_book:"📙",orthodox_cross:"☦️",outbox_tray:"📤",owl:"🦉",ox:"🐂",package:"📦",page_facing_up:"📄",page_with_curl:"📃",pager:"📟",paintbrush:"🖌",palm_tree:"🌴",pancakes:"🥞",panda_face:"🐼",paperclip:"📎",paperclips:"🖇",parasol_on_ground:"⛱",parking:"🅿️",part_alternation_mark:"〽️",partly_sunny:"⛅️",passenger_ship:"🛳",passport_control:"🛂",pause_button:"⏸",peace_symbol:"☮️",peach:"🍑",peanuts:"🥜",pear:"🍐",pen:"🖊",pencil2:"✏️",penguin:"🐧",pensive:"😔",performing_arts:"🎭",persevere:"😣",person_fencing:"🤺",pouting_woman:"🙎",phone:"☎️",pick:"⛏",pig:"🐷",pig2:"🐖",pig_nose:"🐽",pill:"💊",pineapple:"🍍",ping_pong:"🏓",pisces:"♓️",pizza:"🍕",place_of_worship:"🛐",plate_with_cutlery:"🍽",play_or_pause_button:"⏯",point_down:"👇",point_left:"👈",point_right:"👉",point_up:"☝️",point_up_2:"👆",police_car:"🚓",policewoman:"👮&zwj;♀️",poodle:"🐩",popcorn:"🍿",post_office:"🏣",postal_horn:"📯",postbox:"📮",potable_water:"🚰",potato:"🥔",pouch:"👝",poultry_leg:"🍗",pound:"💷",rage:"😡",pouting_cat:"😾",pouting_man:"🙎&zwj;♂️",pray:"🙏",prayer_beads:"📿",pregnant_woman:"🤰",previous_track_button:"⏮",prince:"🤴",princess:"👸",printer:"🖨",purple_heart:"💜",purse:"👛",pushpin:"📌",put_litter_in_its_place:"🚮",question:"❓",rabbit:"🐰",rabbit2:"🐇",racehorse:"🐎",racing_car:"🏎",radio:"📻",radio_button:"🔘",radioactive:"☢️",railway_car:"🚃",railway_track:"🛤",rainbow:"🌈",rainbow_flag:"🏳️&zwj;🌈",raised_back_of_hand:"🤚",raised_hand_with_fingers_splayed:"🖐",raised_hands:"🙌",raising_hand_woman:"🙋",raising_hand_man:"🙋&zwj;♂️",ram:"🐏",ramen:"🍜",rat:"🐀",record_button:"⏺",recycle:"♻️",red_circle:"🔴",registered:"®️",relaxed:"☺️",relieved:"😌",reminder_ribbon:"🎗",repeat:"🔁",repeat_one:"🔂",rescue_worker_helmet:"⛑",restroom:"🚻",revolving_hearts:"💞",rewind:"⏪",rhinoceros:"🦏",ribbon:"🎀",rice:"🍚",rice_ball:"🍙",rice_cracker:"🍘",rice_scene:"🎑",right_anger_bubble:"🗯",ring:"💍",robot:"🤖",rocket:"🚀",rofl:"🤣",roll_eyes:"🙄",roller_coaster:"🎢",rooster:"🐓",rose:"🌹",rosette:"🏵",rotating_light:"🚨",round_pushpin:"📍",rowing_man:"🚣",rowing_woman:"🚣&zwj;♀️",rugby_football:"🏉",running_man:"🏃",running_shirt_with_sash:"🎽",running_woman:"🏃&zwj;♀️",sa:"🈂️",sagittarius:"♐️",sake:"🍶",sandal:"👡",santa:"🎅",satellite:"📡",saxophone:"🎷",school:"🏫",school_satchel:"🎒",scissors:"✂️",scorpion:"🦂",scorpius:"♏️",scream:"😱",scream_cat:"🙀",scroll:"📜",seat:"💺",secret:"㊙️",see_no_evil:"🙈",seedling:"🌱",selfie:"🤳",shallow_pan_of_food:"🥘",shamrock:"☘️",shark:"🦈",shaved_ice:"🍧",sheep:"🐑",shell:"🐚",shield:"🛡",shinto_shrine:"⛩",ship:"🚢",shirt:"👕",shopping:"🛍",shopping_cart:"🛒",shower:"🚿",shrimp:"🦐",signal_strength:"📶",six_pointed_star:"🔯",ski:"🎿",skier:"⛷",skull:"💀",skull_and_crossbones:"☠️",sleeping:"😴",sleeping_bed:"🛌",sleepy:"😪",slightly_frowning_face:"🙁",slightly_smiling_face:"🙂",slot_machine:"🎰",small_airplane:"🛩",small_blue_diamond:"🔹",small_orange_diamond:"🔸",small_red_triangle:"🔺",small_red_triangle_down:"🔻",smile:"😄",smile_cat:"😸",smiley:"😃",smiley_cat:"😺",smiling_imp:"😈",smirk:"😏",smirk_cat:"😼",smoking:"🚬",snail:"🐌",snake:"🐍",sneezing_face:"🤧",snowboarder:"🏂",snowflake:"❄️",snowman:"⛄️",snowman_with_snow:"☃️",sob:"😭",soccer:"⚽️",soon:"🔜",sos:"🆘",sound:"🔉",space_invader:"👾",spades:"♠️",spaghetti:"🍝",sparkle:"❇️",sparkler:"🎇",sparkles:"✨",sparkling_heart:"💖",speak_no_evil:"🙊",speaker:"🔈",speaking_head:"🗣",speech_balloon:"💬",speedboat:"🚤",spider:"🕷",spider_web:"🕸",spiral_calendar:"🗓",spiral_notepad:"🗒",spoon:"🥄",squid:"🦑",stadium:"🏟",star:"⭐️",star2:"🌟",star_and_crescent:"☪️",star_of_david:"✡️",stars:"🌠",station:"🚉",statue_of_liberty:"🗽",steam_locomotive:"🚂",stew:"🍲",stop_button:"⏹",stop_sign:"🛑",stopwatch:"⏱",straight_ruler:"📏",strawberry:"🍓",stuck_out_tongue:"😛",stuck_out_tongue_closed_eyes:"😝",stuck_out_tongue_winking_eye:"😜",studio_microphone:"🎙",stuffed_flatbread:"🥙",sun_behind_large_cloud:"🌥",sun_behind_rain_cloud:"🌦",sun_behind_small_cloud:"🌤",sun_with_face:"🌞",sunflower:"🌻",sunglasses:"😎",sunny:"☀️",sunrise:"🌅",sunrise_over_mountains:"🌄",surfing_man:"🏄",surfing_woman:"🏄&zwj;♀️",sushi:"🍣",suspension_railway:"🚟",sweat:"😓",sweat_drops:"💦",sweat_smile:"😅",sweet_potato:"🍠",swimming_man:"🏊",swimming_woman:"🏊&zwj;♀️",symbols:"🔣",synagogue:"🕍",syringe:"💉",taco:"🌮",tada:"🎉",tanabata_tree:"🎋",taurus:"♉️",taxi:"🚕",tea:"🍵",telephone_receiver:"📞",telescope:"🔭",tennis:"🎾",tent:"⛺️",thermometer:"🌡",thinking:"🤔",thought_balloon:"💭",ticket:"🎫",tickets:"🎟",tiger:"🐯",tiger2:"🐅",timer_clock:"⏲",tipping_hand_man:"💁&zwj;♂️",tired_face:"😫",tm:"™️",toilet:"🚽",tokyo_tower:"🗼",tomato:"🍅",tongue:"👅",top:"🔝",tophat:"🎩",tornado:"🌪",trackball:"🖲",tractor:"🚜",traffic_light:"🚥",train:"🚋",train2:"🚆",tram:"🚊",triangular_flag_on_post:"🚩",triangular_ruler:"📐",trident:"🔱",triumph:"😤",trolleybus:"🚎",trophy:"🏆",tropical_drink:"🍹",tropical_fish:"🐠",truck:"🚚",trumpet:"🎺",tulip:"🌷",tumbler_glass:"🥃",turkey:"🦃",turtle:"🐢",tv:"📺",twisted_rightwards_arrows:"🔀",two_hearts:"💕",two_men_holding_hands:"👬",two_women_holding_hands:"👭",u5272:"🈹",u5408:"🈴",u55b6:"🈺",u6307:"🈯️",u6708:"🈷️",u6709:"🈶",u6e80:"🈵",u7121:"🈚️",u7533:"🈸",u7981:"🈲",u7a7a:"🈳",umbrella:"☔️",unamused:"😒",underage:"🔞",unicorn:"🦄",unlock:"🔓",up:"🆙",upside_down_face:"🙃",v:"✌️",vertical_traffic_light:"🚦",vhs:"📼",vibration_mode:"📳",video_camera:"📹",video_game:"🎮",violin:"🎻",virgo:"♍️",volcano:"🌋",volleyball:"🏐",vs:"🆚",vulcan_salute:"🖖",walking_man:"🚶",walking_woman:"🚶&zwj;♀️",waning_crescent_moon:"🌘",waning_gibbous_moon:"🌖",warning:"⚠️",wastebasket:"🗑",watch:"⌚️",water_buffalo:"🐃",watermelon:"🍉",wave:"👋",wavy_dash:"〰️",waxing_crescent_moon:"🌒",wc:"🚾",weary:"😩",wedding:"💒",weight_lifting_man:"🏋️",weight_lifting_woman:"🏋️&zwj;♀️",whale:"🐳",whale2:"🐋",wheel_of_dharma:"☸️",wheelchair:"♿️",white_check_mark:"✅",white_circle:"⚪️",white_flag:"🏳️",white_flower:"💮",white_large_square:"⬜️",white_medium_small_square:"◽️",white_medium_square:"◻️",white_small_square:"▫️",white_square_button:"🔳",wilted_flower:"🥀",wind_chime:"🎐",wind_face:"🌬",wine_glass:"🍷",wink:"😉",wolf:"🐺",woman:"👩",woman_artist:"👩&zwj;🎨",woman_astronaut:"👩&zwj;🚀",woman_cartwheeling:"🤸&zwj;♀️",woman_cook:"👩&zwj;🍳",woman_facepalming:"🤦&zwj;♀️",woman_factory_worker:"👩&zwj;🏭",woman_farmer:"👩&zwj;🌾",woman_firefighter:"👩&zwj;🚒",woman_health_worker:"👩&zwj;⚕️",woman_judge:"👩&zwj;⚖️",woman_juggling:"🤹&zwj;♀️",woman_mechanic:"👩&zwj;🔧",woman_office_worker:"👩&zwj;💼",woman_pilot:"👩&zwj;✈️",woman_playing_handball:"🤾&zwj;♀️",woman_playing_water_polo:"🤽&zwj;♀️",woman_scientist:"👩&zwj;🔬",woman_shrugging:"🤷&zwj;♀️",woman_singer:"👩&zwj;🎤",woman_student:"👩&zwj;🎓",woman_teacher:"👩&zwj;🏫",woman_technologist:"👩&zwj;💻",woman_with_turban:"👳&zwj;♀️",womans_clothes:"👚",womans_hat:"👒",women_wrestling:"🤼&zwj;♀️",womens:"🚺",world_map:"🗺",worried:"😟",wrench:"🔧",writing_hand:"✍️",x:"❌",yellow_heart:"💛",yen:"💴",yin_yang:"☯️",yum:"😋",zap:"⚡️",zipper_mouth_face:"🤐",zzz:"💤",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:"<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"},o.Converter=function(e){"use strict";var r={},t=[],n=[],a={},s=c,p={parsed:{},raw:"",format:""};function f(e,r){if(r=r||null,o.helper.isString(e)){if(r=e=o.helper.stdExtName(e),o.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,r){"function"==typeof e&&(e=e(new o.Converter));o.helper.isArray(e)||(e=[e]);var a=d(e,r);if(!a.valid)throw Error(a.error);for(var s=0;s<e.length;++s)switch(e[s].type){case"lang":t.push(e[s]);break;case"output":n.push(e[s]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(o.extensions[e],e);if(o.helper.isUndefined(i[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=i[e]}"function"==typeof e&&(e=e()),o.helper.isArray(e)||(e=[e]);var a=d(e,r);if(!a.valid)throw Error(a.error);for(var s=0;s<e.length;++s){switch(e[s].type){case"lang":t.push(e[s]);break;case"output":n.push(e[s])}if(e[s].hasOwnProperty("listeners"))for(var l in e[s].listeners)e[s].listeners.hasOwnProperty(l)&&h(l,e[s].listeners[l])}}function h(e,r){if(!o.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof r)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof r+" given");a.hasOwnProperty(e)||(a[e]=[]),a[e].push(r)}!function(){for(var t in e=e||{},l)l.hasOwnProperty(t)&&(r[t]=l[t]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var n in e)e.hasOwnProperty(n)&&(r[n]=e[n]);r.extensions&&o.helper.forEach(r.extensions,f)}(),this._dispatch=function(e,r,t,n){if(a.hasOwnProperty(e))for(var o=0;o<a[e].length;++o){var s=a[e][o](e,r,this,t,n);s&&void 0!==s&&(r=s)}return r},this.listen=function(e,r){return h(e,r),this},this.makeHtml=function(e){if(!e)return e;var a={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:t,outputModifiers:n,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return e=(e=(e=(e=(e=e.replace(/¨/g,"¨T")).replace(/\$/g,"¨D")).replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/\u00A0/g,"&nbsp;"),r.smartIndentationFix&&(e=function(e){var r=e.match(/^\s*/)[0].length,t=new RegExp("^\\s{0,"+r+"}","gm");return e.replace(t,"")}(e)),e="\n\n"+e+"\n\n",e=(e=o.subParser("detab")(e,r,a)).replace(/^[ \t]+$/gm,""),o.helper.forEach(t,(function(t){e=o.subParser("runExtension")(t,e,r,a)})),e=o.subParser("metadata")(e,r,a),e=o.subParser("hashPreCodeTags")(e,r,a),e=o.subParser("githubCodeBlocks")(e,r,a),e=o.subParser("hashHTMLBlocks")(e,r,a),e=o.subParser("hashCodeTags")(e,r,a),e=o.subParser("stripLinkDefinitions")(e,r,a),e=o.subParser("blockGamut")(e,r,a),e=o.subParser("unhashHTMLSpans")(e,r,a),e=(e=(e=o.subParser("unescapeSpecialChars")(e,r,a)).replace(/¨D/g,"$$")).replace(/¨T/g,"¨"),e=o.subParser("completeHTMLDocument")(e,r,a),o.helper.forEach(n,(function(t){e=o.subParser("runExtension")(t,e,r,a)})),p=a.metadata,e},this.makeMarkdown=this.makeMd=function(e,r){if(e=(e=(e=e.replace(/\r\n/g,"\n")).replace(/\r/g,"\n")).replace(/>[ \t]+</,">¨NBSP;<"),!r){if(!window||!window.document)throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");r=window.document}var t=r.createElement("div");t.innerHTML=e;var n={preList:function(e){for(var r=e.querySelectorAll("pre"),t=[],n=0;n<r.length;++n)if(1===r[n].childElementCount&&"code"===r[n].firstChild.tagName.toLowerCase()){var a=r[n].firstChild.innerHTML.trim(),s=r[n].firstChild.getAttribute("data-language")||"";if(""===s)for(var i=r[n].firstChild.className.split(" "),l=0;l<i.length;++l){var c=i[l].match(/^language-(.+)$/);if(null!==c){s=c[1];break}}a=o.helper.unescapeHTMLEntities(a),t.push(a),r[n].outerHTML='<precode language="'+s+'" precodenum="'+n.toString()+'"></precode>'}else t.push(r[n].innerHTML),r[n].innerHTML="",r[n].setAttribute("prenum",n.toString());return t}(t)};!function e(r){for(var t=0;t<r.childNodes.length;++t){var n=r.childNodes[t];3===n.nodeType?/\S/.test(n.nodeValue)||/^[ ]+$/.test(n.nodeValue)?(n.nodeValue=n.nodeValue.split("\n").join(" "),n.nodeValue=n.nodeValue.replace(/(\s)+/g,"$1")):(r.removeChild(n),--t):1===n.nodeType&&e(n)}}(t);for(var a=t.childNodes,s="",i=0;i<a.length;i++)s+=o.subParser("makeMarkdown.node")(a[i],n);return s},this.setOption=function(e,t){r[e]=t},this.getOption=function(e){return r[e]},this.getOptions=function(){return r},this.addExtension=function(e,r){f(e,r=r||null)},this.useExtension=function(e){f(e)},this.setFlavor=function(e){if(!u.hasOwnProperty(e))throw Error(e+" flavor was not found");var t=u[e];for(var n in s=e,t)t.hasOwnProperty(n)&&(r[n]=t[n])},this.getFlavor=function(){return s},this.removeExtension=function(e){o.helper.isArray(e)||(e=[e]);for(var r=0;r<e.length;++r){for(var a=e[r],s=0;s<t.length;++s)t[s]===a&&t.splice(s,1);for(var i=0;i<n.length;++i)n[i]===a&&n.splice(i,1)}},this.getAllExtensions=function(){return{language:t,output:n}},this.getMetadata=function(e){return e?p.raw:p.parsed},this.getMetadataFormat=function(){return p.format},this._setMetadataPair=function(e,r){p.parsed[e]=r},this._setMetadataFormat=function(e){p.format=e},this._setMetadataRaw=function(e){p.raw=e}},o.subParser("anchors",(function(e,r,t){"use strict";var n=function(e,n,a,s,i,l,c){if(o.helper.isUndefined(c)&&(c=""),a=a.toLowerCase(),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)s="";else if(!s){if(a||(a=n.toLowerCase().replace(/ ?\n/g," ")),s="#"+a,o.helper.isUndefined(t.gUrls[a]))return e;s=t.gUrls[a],o.helper.isUndefined(t.gTitles[a])||(c=t.gTitles[a])}var u='<a href="'+(s=s.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"';return""!==c&&null!==c&&(u+=' title="'+(c=(c=c.replace(/"/g,"&quot;")).replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"'),r.openLinksInNewWindow&&!/^#/.test(s)&&(u+=' rel="noopener noreferrer" target="¨E95Eblank"'),u+=">"+n+"</a>"};return e=(e=(e=(e=(e=t.converter._dispatch("anchors.before",e,r,t)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,n)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,n)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,n)).replace(/\[([^\[\]]+)]()()()()()/g,n),r.ghMentions&&(e=e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,(function(e,t,n,a,s){if("\\"===n)return t+a;if(!o.helper.isString(r.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var i=r.ghMentionsLink.replace(/\{u}/g,s),l="";return r.openLinksInNewWindow&&(l=' rel="noopener noreferrer" target="¨E95Eblank"'),t+'<a href="'+i+'"'+l+">"+a+"</a>"}))),e=t.converter._dispatch("anchors.after",e,r,t)}));var h=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,g=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,m=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,b=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,_=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,w=function(e){"use strict";return function(r,t,n,a,s,i,l){var c=n=n.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback),u="",d="",p=t||"",f=l||"";return/^www\./i.test(n)&&(n=n.replace(/^www\./i,"http://www.")),e.excludeTrailingPunctuationFromURLs&&i&&(u=i),e.openLinksInNewWindow&&(d=' rel="noopener noreferrer" target="¨E95Eblank"'),p+'<a href="'+n+'"'+d+">"+c+"</a>"+u+f}},v=function(e,r){"use strict";return function(t,n,a){var s="mailto:";return n=n||"",a=o.subParser("unescapeSpecialChars")(a,e,r),e.encodeEmails?(s=o.helper.encodeEmailAddress(s+a),a=o.helper.encodeEmailAddress(a)):s+=a,n+'<a href="'+s+'">'+a+"</a>"}};o.subParser("autoLinks",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("autoLinks.before",e,r,t)).replace(m,w(r))).replace(_,v(r,t)),e=t.converter._dispatch("autoLinks.after",e,r,t)})),o.subParser("simplifiedAutoLinks",(function(e,r,t){"use strict";return r.simplifiedAutoLink?(e=t.converter._dispatch("simplifiedAutoLinks.before",e,r,t),e=(e=r.excludeTrailingPunctuationFromURLs?e.replace(g,w(r)):e.replace(h,w(r))).replace(b,v(r,t)),e=t.converter._dispatch("simplifiedAutoLinks.after",e,r,t)):e})),o.subParser("blockGamut",(function(e,r,t){"use strict";return e=t.converter._dispatch("blockGamut.before",e,r,t),e=o.subParser("blockQuotes")(e,r,t),e=o.subParser("headers")(e,r,t),e=o.subParser("horizontalRule")(e,r,t),e=o.subParser("lists")(e,r,t),e=o.subParser("codeBlocks")(e,r,t),e=o.subParser("tables")(e,r,t),e=o.subParser("hashHTMLBlocks")(e,r,t),e=o.subParser("paragraphs")(e,r,t),e=t.converter._dispatch("blockGamut.after",e,r,t)})),o.subParser("blockQuotes",(function(e,r,t){"use strict";e=t.converter._dispatch("blockQuotes.before",e,r,t),e+="\n\n";var n=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return r.splitAdjacentBlockquotes&&(n=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),e=e.replace(n,(function(e){return e=(e=(e=e.replace(/^[ \t]*>[ \t]?/gm,"")).replace(/¨0/g,"")).replace(/^[ \t]+$/gm,""),e=o.subParser("githubCodeBlocks")(e,r,t),e=(e=(e=o.subParser("blockGamut")(e,r,t)).replace(/(^|\n)/g,"$1  ")).replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,(function(e,r){var t=r;return t=(t=t.replace(/^  /gm,"¨0")).replace(/¨0/g,"")})),o.subParser("hashBlock")("<blockquote>\n"+e+"\n</blockquote>",r,t)})),e=t.converter._dispatch("blockQuotes.after",e,r,t)})),o.subParser("codeBlocks",(function(e,r,t){"use strict";e=t.converter._dispatch("codeBlocks.before",e,r,t);return e=(e=(e+="¨0").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g,(function(e,n,a){var s=n,i=a,l="\n";return s=o.subParser("outdent")(s,r,t),s=o.subParser("encodeCode")(s,r,t),s=(s=(s=o.subParser("detab")(s,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,""),r.omitExtraWLInCodeBlocks&&(l=""),s="<pre><code>"+s+l+"</code></pre>",o.subParser("hashBlock")(s,r,t)+i}))).replace(/¨0/,""),e=t.converter._dispatch("codeBlocks.after",e,r,t)})),o.subParser("codeSpans",(function(e,r,t){"use strict";return void 0===(e=t.converter._dispatch("codeSpans.before",e,r,t))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,(function(e,n,a,s){var i=s;return i=(i=i.replace(/^([ \t]*)/g,"")).replace(/[ \t]*$/g,""),i=n+"<code>"+(i=o.subParser("encodeCode")(i,r,t))+"</code>",i=o.subParser("hashHTMLSpans")(i,r,t)})),e=t.converter._dispatch("codeSpans.after",e,r,t)})),o.subParser("completeHTMLDocument",(function(e,r,t){"use strict";if(!r.completeHTMLDocument)return e;e=t.converter._dispatch("completeHTMLDocument.before",e,r,t);var n="html",a="<!DOCTYPE HTML>\n",o="",s='<meta charset="utf-8">\n',i="",l="";for(var c in void 0!==t.metadata.parsed.doctype&&(a="<!DOCTYPE "+t.metadata.parsed.doctype+">\n","html"!==(n=t.metadata.parsed.doctype.toString().toLowerCase())&&"html5"!==n||(s='<meta charset="utf-8">')),t.metadata.parsed)if(t.metadata.parsed.hasOwnProperty(c))switch(c.toLowerCase()){case"doctype":break;case"title":o="<title>"+t.metadata.parsed.title+"</title>\n";break;case"charset":s="html"===n||"html5"===n?'<meta charset="'+t.metadata.parsed.charset+'">\n':'<meta name="charset" content="'+t.metadata.parsed.charset+'">\n';break;case"language":case"lang":i=' lang="'+t.metadata.parsed[c]+'"',l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n';break;default:l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n'}return e=a+"<html"+i+">\n<head>\n"+o+s+l+"</head>\n<body>\n"+e.trim()+"\n</body>\n</html>",e=t.converter._dispatch("completeHTMLDocument.after",e,r,t)})),o.subParser("detab",(function(e,r,t){"use strict";return e=(e=(e=(e=(e=(e=t.converter._dispatch("detab.before",e,r,t)).replace(/\t(?=\t)/g,"    ")).replace(/\t/g,"¨A¨B")).replace(/¨B(.+?)¨A/g,(function(e,r){for(var t=r,n=4-t.length%4,a=0;a<n;a++)t+=" ";return t}))).replace(/¨A/g,"    ")).replace(/¨B/g,""),e=t.converter._dispatch("detab.after",e,r,t)})),o.subParser("ellipsis",(function(e,r,t){"use strict";return r.ellipsis?(e=(e=t.converter._dispatch("ellipsis.before",e,r,t)).replace(/\.\.\./g,"…"),e=t.converter._dispatch("ellipsis.after",e,r,t)):e})),o.subParser("emoji",(function(e,r,t){"use strict";if(!r.emoji)return e;return e=(e=t.converter._dispatch("emoji.before",e,r,t)).replace(/:([\S]+?):/g,(function(e,r){return o.helper.emojis.hasOwnProperty(r)?o.helper.emojis[r]:e})),e=t.converter._dispatch("emoji.after",e,r,t)})),o.subParser("encodeAmpsAndAngles",(function(e,r,t){"use strict";return e=(e=(e=(e=(e=t.converter._dispatch("encodeAmpsAndAngles.before",e,r,t)).replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;")).replace(/<(?![a-z\/?$!])/gi,"&lt;")).replace(/</g,"&lt;")).replace(/>/g,"&gt;"),e=t.converter._dispatch("encodeAmpsAndAngles.after",e,r,t)})),o.subParser("encodeBackslashEscapes",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("encodeBackslashEscapes.before",e,r,t)).replace(/\\(\\)/g,o.helper.escapeCharactersCallback)).replace(/\\([`*_{}\[\]()>#+.!~=|:-])/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeBackslashEscapes.after",e,r,t)})),o.subParser("encodeCode",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("encodeCode.before",e,r,t)).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeCode.after",e,r,t)})),o.subParser("escapeSpecialCharsWithinTagAttributes",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",e,r,t)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,(function(e){return e.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,o.helper.escapeCharactersCallback)}))).replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi,(function(e){return e.replace(/([\\`*_~=|])/g,o.helper.escapeCharactersCallback)})),e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",e,r,t)})),o.subParser("githubCodeBlocks",(function(e,r,t){"use strict";return r.ghCodeBlocks?(e=t.converter._dispatch("githubCodeBlocks.before",e,r,t),e=(e=(e+="¨0").replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,(function(e,n,a,s){var i=r.omitExtraWLInCodeBlocks?"":"\n";return s=o.subParser("encodeCode")(s,r,t),s="<pre><code"+(a?' class="'+a+" language-"+a+'"':"")+">"+(s=(s=(s=o.subParser("detab")(s,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,""))+i+"</code></pre>",s=o.subParser("hashBlock")(s,r,t),"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:s})-1)+"G\n\n"}))).replace(/¨0/,""),t.converter._dispatch("githubCodeBlocks.after",e,r,t)):e})),o.subParser("hashBlock",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("hashBlock.before",e,r,t)).replace(/(^\n+|\n+$)/g,""),e="\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n",e=t.converter._dispatch("hashBlock.after",e,r,t)})),o.subParser("hashCodeTags",(function(e,r,t){"use strict";e=t.converter._dispatch("hashCodeTags.before",e,r,t);return e=o.helper.replaceRecursiveRegExp(e,(function(e,n,a,s){var i=a+o.subParser("encodeCode")(n,r,t)+s;return"¨C"+(t.gHtmlSpans.push(i)-1)+"C"}),"<code\\b[^>]*>","</code>","gim"),e=t.converter._dispatch("hashCodeTags.after",e,r,t)})),o.subParser("hashElement",(function(e,r,t){"use strict";return function(e,r){var n=r;return n=(n=(n=n.replace(/\n\n/g,"\n")).replace(/^\n/,"")).replace(/\n+$/g,""),n="\n\n¨K"+(t.gHtmlBlocks.push(n)-1)+"K\n\n"}})),o.subParser("hashHTMLBlocks",(function(e,r,t){"use strict";e=t.converter._dispatch("hashHTMLBlocks.before",e,r,t);var n=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],a=function(e,r,n,a){var o=e;return-1!==n.search(/\bmarkdown\b/)&&(o=n+t.converter.makeHtml(r)+a),"\n\n¨K"+(t.gHtmlBlocks.push(o)-1)+"K\n\n"};r.backslashEscapesHTMLTags&&(e=e.replace(/\\<(\/?[^>]+?)>/g,(function(e,r){return"&lt;"+r+"&gt;"})));for(var s=0;s<n.length;++s)for(var i,l=new RegExp("^ {0,3}(<"+n[s]+"\\b[^>]*>)","im"),c="<"+n[s]+"\\b[^>]*>",u="</"+n[s]+">";-1!==(i=o.helper.regexIndexOf(e,l));){var d=o.helper.splitAtIndex(e,i),p=o.helper.replaceRecursiveRegExp(d[1],a,c,u,"im");if(p===d[1])break;e=d[0].concat(p)}return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,o.subParser("hashElement")(e,r,t)),e=(e=o.helper.replaceRecursiveRegExp(e,(function(e){return"\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n"}),"^ {0,3}\x3c!--","--\x3e","gm")).replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,o.subParser("hashElement")(e,r,t)),e=t.converter._dispatch("hashHTMLBlocks.after",e,r,t)})),o.subParser("hashHTMLSpans",(function(e,r,t){"use strict";function n(e){return"¨C"+(t.gHtmlSpans.push(e)-1)+"C"}return e=(e=(e=(e=(e=t.converter._dispatch("hashHTMLSpans.before",e,r,t)).replace(/<[^>]+?\/>/gi,(function(e){return n(e)}))).replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,(function(e){return n(e)}))).replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,(function(e){return n(e)}))).replace(/<[^>]+?>/gi,(function(e){return n(e)})),e=t.converter._dispatch("hashHTMLSpans.after",e,r,t)})),o.subParser("unhashHTMLSpans",(function(e,r,t){"use strict";e=t.converter._dispatch("unhashHTMLSpans.before",e,r,t);for(var n=0;n<t.gHtmlSpans.length;++n){for(var a=t.gHtmlSpans[n],o=0;/¨C(\d+)C/.test(a);){var s=RegExp.$1;if(a=a.replace("¨C"+s+"C",t.gHtmlSpans[s]),10===o){console.error("maximum nesting of 10 spans reached!!!");break}++o}e=e.replace("¨C"+n+"C",a)}return e=t.converter._dispatch("unhashHTMLSpans.after",e,r,t)})),o.subParser("hashPreCodeTags",(function(e,r,t){"use strict";e=t.converter._dispatch("hashPreCodeTags.before",e,r,t);return e=o.helper.replaceRecursiveRegExp(e,(function(e,n,a,s){var i=a+o.subParser("encodeCode")(n,r,t)+s;return"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:i})-1)+"G\n\n"}),"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),e=t.converter._dispatch("hashPreCodeTags.after",e,r,t)})),o.subParser("headers",(function(e,r,t){"use strict";e=t.converter._dispatch("headers.before",e,r,t);var n=isNaN(parseInt(r.headerLevelStart))?1:parseInt(r.headerLevelStart),a=r.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,s=r.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;e=(e=e.replace(a,(function(e,a){var s=o.subParser("spanGamut")(a,r,t),i=r.noHeaderId?"":' id="'+l(a)+'"',c="<h"+n+i+">"+s+"</h"+n+">";return o.subParser("hashBlock")(c,r,t)}))).replace(s,(function(e,a){var s=o.subParser("spanGamut")(a,r,t),i=r.noHeaderId?"":' id="'+l(a)+'"',c=n+1,u="<h"+c+i+">"+s+"</h"+c+">";return o.subParser("hashBlock")(u,r,t)}));var i=r.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;function l(e){var n,a;if(r.customizedHeaderId){var s=e.match(/\{([^{]+?)}\s*$/);s&&s[1]&&(e=s[1])}return n=e,a=o.helper.isString(r.prefixHeaderId)?r.prefixHeaderId:!0===r.prefixHeaderId?"section-":"",r.rawPrefixHeaderId||(n=a+n),n=r.ghCompatibleHeaderId?n.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():r.rawHeaderId?n.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"¨").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():n.replace(/[^\w]/g,"").toLowerCase(),r.rawPrefixHeaderId&&(n=a+n),t.hashLinkCounts[n]?n=n+"-"+t.hashLinkCounts[n]++:t.hashLinkCounts[n]=1,n}return e=e.replace(i,(function(e,a,s){var i=s;r.customizedHeaderId&&(i=s.replace(/\s?\{([^{]+?)}\s*$/,""));var c=o.subParser("spanGamut")(i,r,t),u=r.noHeaderId?"":' id="'+l(s)+'"',d=n-1+a.length,p="<h"+d+u+">"+c+"</h"+d+">";return o.subParser("hashBlock")(p,r,t)})),e=t.converter._dispatch("headers.after",e,r,t)})),o.subParser("horizontalRule",(function(e,r,t){"use strict";e=t.converter._dispatch("horizontalRule.before",e,r,t);var n=o.subParser("hashBlock")("<hr />",r,t);return e=(e=(e=e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,n)).replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,n)).replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,n),e=t.converter._dispatch("horizontalRule.after",e,r,t)})),o.subParser("images",(function(e,r,t){"use strict";function n(e,r,n,a,s,i,l,c){var u=t.gUrls,d=t.gTitles,p=t.gDimensions;if(n=n.toLowerCase(),c||(c=""),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)a="";else if(""===a||null===a){if(""!==n&&null!==n||(n=r.toLowerCase().replace(/ ?\n/g," ")),a="#"+n,o.helper.isUndefined(u[n]))return e;a=u[n],o.helper.isUndefined(d[n])||(c=d[n]),o.helper.isUndefined(p[n])||(s=p[n].width,i=p[n].height)}r=r.replace(/"/g,"&quot;").replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback);var f='<img src="'+(a=a.replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'" alt="'+r+'"';return c&&o.helper.isString(c)&&(f+=' title="'+(c=c.replace(/"/g,"&quot;").replace(o.helper.regexes.asteriskDashAndColon,o.helper.escapeCharactersCallback))+'"'),s&&i&&(f+=' width="'+(s="*"===s?"auto":s)+'"',f+=' height="'+(i="*"===i?"auto":i)+'"'),f+=" />"}return e=(e=(e=(e=(e=(e=t.converter._dispatch("images.before",e,r,t)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,n)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,(function(e,r,t,a,o,s,i,l){return n(e,r,t,a=a.replace(/\s/g,""),o,s,i,l)}))).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,n)).replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,n)).replace(/!\[([^\[\]]+)]()()()()()/g,n),e=t.converter._dispatch("images.after",e,r,t)})),o.subParser("italicsAndBold",(function(e,r,t){"use strict";function n(e,r,t){return r+e+t}return e=t.converter._dispatch("italicsAndBold.before",e,r,t),e=r.literalMidWordUnderscores?(e=(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,r){return n(r,"<strong><em>","</em></strong>")}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,r){return n(r,"<strong>","</strong>")}))).replace(/\b_(\S[\s\S]*?)_\b/g,(function(e,r){return n(r,"<em>","</em>")})):(e=(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,r){return/\S$/.test(r)?n(r,"<strong><em>","</em></strong>"):e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,r){return/\S$/.test(r)?n(r,"<strong>","</strong>"):e}))).replace(/_([^\s_][\s\S]*?)_/g,(function(e,r){return/\S$/.test(r)?n(r,"<em>","</em>"):e})),e=r.literalMidWordAsterisks?(e=(e=e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,(function(e,r,t){return n(t,r+"<strong><em>","</em></strong>")}))).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,(function(e,r,t){return n(t,r+"<strong>","</strong>")}))).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,(function(e,r,t){return n(t,r+"<em>","</em>")})):(e=(e=e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,(function(e,r){return/\S$/.test(r)?n(r,"<strong><em>","</em></strong>"):e}))).replace(/\*\*(\S[\s\S]*?)\*\*/g,(function(e,r){return/\S$/.test(r)?n(r,"<strong>","</strong>"):e}))).replace(/\*([^\s*][\s\S]*?)\*/g,(function(e,r){return/\S$/.test(r)?n(r,"<em>","</em>"):e})),e=t.converter._dispatch("italicsAndBold.after",e,r,t)})),o.subParser("lists",(function(e,r,t){"use strict";function n(e,n){t.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var a=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,s=/\n[ \t]*\n(?!¨0)/.test(e+="¨0");return r.disableForced4SpacesIndentedSublists&&(a=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),e=(e=e.replace(a,(function(e,n,a,i,l,c,u){u=u&&""!==u.trim();var d=o.subParser("outdent")(l,r,t),p="";return c&&r.tasklists&&(p=' class="task-list-item" style="list-style-type: none;"',d=d.replace(/^[ \t]*\[(x|X| )?]/m,(function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return u&&(e+=" checked"),e+=">"}))),d=d.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,(function(e){return"¨A"+e})),n||d.search(/\n{2,}/)>-1?(d=o.subParser("githubCodeBlocks")(d,r,t),d=o.subParser("blockGamut")(d,r,t)):(d=(d=o.subParser("lists")(d,r,t)).replace(/\n$/,""),d=(d=o.subParser("hashHTMLBlocks")(d,r,t)).replace(/\n\n+/g,"\n\n"),d=s?o.subParser("paragraphs")(d,r,t):o.subParser("spanGamut")(d,r,t)),d="<li"+p+">"+(d=d.replace("¨A",""))+"</li>\n"}))).replace(/¨0/g,""),t.gListLevel--,n&&(e=e.replace(/\s+$/,"")),e}function a(e,r){if("ol"===r){var t=e.match(/^ *(\d+)\./);if(t&&"1"!==t[1])return' start="'+t[1]+'"'}return""}function s(e,t,o){var s=r.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,i=r.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,l="ul"===t?s:i,c="";if(-1!==e.search(l))!function r(u){var d=u.search(l),p=a(e,t);-1!==d?(c+="\n\n<"+t+p+">\n"+n(u.slice(0,d),!!o)+"</"+t+">\n",l="ul"===(t="ul"===t?"ol":"ul")?s:i,r(u.slice(d))):c+="\n\n<"+t+p+">\n"+n(u,!!o)+"</"+t+">\n"}(e);else{var u=a(e,t);c="\n\n<"+t+u+">\n"+n(e,!!o)+"</"+t+">\n"}return c}return e=t.converter._dispatch("lists.before",e,r,t),e+="¨0",e=(e=t.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,r,t){return s(r,t.search(/[*+-]/g)>-1?"ul":"ol",!0)})):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,(function(e,r,t,n){return s(t,n.search(/[*+-]/g)>-1?"ul":"ol",!1)}))).replace(/¨0/,""),e=t.converter._dispatch("lists.after",e,r,t)})),o.subParser("metadata",(function(e,r,t){"use strict";if(!r.metadata)return e;function n(e){t.metadata.raw=e,(e=(e=e.replace(/&/g,"&amp;").replace(/"/g,"&quot;")).replace(/\n {4}/g," ")).replace(/^([\S ]+): +([\s\S]+?)$/gm,(function(e,r,n){return t.metadata.parsed[r]=n,""}))}return e=(e=(e=(e=t.converter._dispatch("metadata.before",e,r,t)).replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,(function(e,r,t){return n(t),"¨M"}))).replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,(function(e,r,a){return r&&(t.metadata.format=r),n(a),"¨M"}))).replace(/¨M/g,""),e=t.converter._dispatch("metadata.after",e,r,t)})),o.subParser("outdent",(function(e,r,t){"use strict";return e=(e=(e=t.converter._dispatch("outdent.before",e,r,t)).replace(/^(\t|[ ]{1,4})/gm,"¨0")).replace(/¨0/g,""),e=t.converter._dispatch("outdent.after",e,r,t)})),o.subParser("paragraphs",(function(e,r,t){"use strict";for(var n=(e=(e=(e=t.converter._dispatch("paragraphs.before",e,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),a=[],s=n.length,i=0;i<s;i++){var l=n[i];l.search(/¨(K|G)(\d+)\1/g)>=0?a.push(l):l.search(/\S/)>=0&&(l=(l=o.subParser("spanGamut")(l,r,t)).replace(/^([ \t]*)/g,"<p>"),l+="</p>",a.push(l))}for(s=a.length,i=0;i<s;i++){for(var c="",u=a[i],d=!1;/¨(K|G)(\d+)\1/.test(u);){var p=RegExp.$1,f=RegExp.$2;c=(c="K"===p?t.gHtmlBlocks[f]:d?o.subParser("encodeCode")(t.ghCodeBlocks[f].text,r,t):t.ghCodeBlocks[f].codeblock).replace(/\$/g,"$$$$"),u=u.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,c),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(u)&&(d=!0)}a[i]=u}return e=(e=(e=a.join("\n")).replace(/^\n+/g,"")).replace(/\n+$/g,""),t.converter._dispatch("paragraphs.after",e,r,t)})),o.subParser("runExtension",(function(e,r,t,n){"use strict";if(e.filter)r=e.filter(r,n.converter,t);else if(e.regex){var a=e.regex;a instanceof RegExp||(a=new RegExp(a,"g")),r=r.replace(a,e.replace)}return r})),o.subParser("spanGamut",(function(e,r,t){"use strict";return e=t.converter._dispatch("spanGamut.before",e,r,t),e=o.subParser("codeSpans")(e,r,t),e=o.subParser("escapeSpecialCharsWithinTagAttributes")(e,r,t),e=o.subParser("encodeBackslashEscapes")(e,r,t),e=o.subParser("images")(e,r,t),e=o.subParser("anchors")(e,r,t),e=o.subParser("autoLinks")(e,r,t),e=o.subParser("simplifiedAutoLinks")(e,r,t),e=o.subParser("emoji")(e,r,t),e=o.subParser("underline")(e,r,t),e=o.subParser("italicsAndBold")(e,r,t),e=o.subParser("strikethrough")(e,r,t),e=o.subParser("ellipsis")(e,r,t),e=o.subParser("hashHTMLSpans")(e,r,t),e=o.subParser("encodeAmpsAndAngles")(e,r,t),r.simpleLineBreaks?/\n\n¨K/.test(e)||(e=e.replace(/\n+/g,"<br />\n")):e=e.replace(/  +\n/g,"<br />\n"),e=t.converter._dispatch("spanGamut.after",e,r,t)})),o.subParser("strikethrough",(function(e,r,t){"use strict";return r.strikethrough&&(e=(e=t.converter._dispatch("strikethrough.before",e,r,t)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,(function(e,n){return function(e){return r.simplifiedAutoLink&&(e=o.subParser("simplifiedAutoLinks")(e,r,t)),"<del>"+e+"</del>"}(n)})),e=t.converter._dispatch("strikethrough.after",e,r,t)),e})),o.subParser("stripLinkDefinitions",(function(e,r,t){"use strict";var n=function(n,a,s,i,l,c,u){return a=a.toLowerCase(),e.toLowerCase().split(a).length-1<2?n:(s.match(/^data:.+?\/.+?;base64,/)?t.gUrls[a]=s.replace(/\s/g,""):t.gUrls[a]=o.subParser("encodeAmpsAndAngles")(s,r,t),c?c+u:(u&&(t.gTitles[a]=u.replace(/"|'/g,"&quot;")),r.parseImgDimensions&&i&&l&&(t.gDimensions[a]={width:i,height:l}),""))};return e=(e=(e=(e+="¨0").replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm,n)).replace(/^ {0,3}\[([^\]]+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,n)).replace(/¨0/,"")})),o.subParser("tables",(function(e,r,t){"use strict";if(!r.tables)return e;function n(e,n){return"<td"+n+">"+o.subParser("spanGamut")(e,r,t)+"</td>\n"}function a(e){var a,s=e.split("\n");for(a=0;a<s.length;++a)/^ {0,3}\|/.test(s[a])&&(s[a]=s[a].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(s[a])&&(s[a]=s[a].replace(/\|[ \t]*$/,"")),s[a]=o.subParser("codeSpans")(s[a],r,t);var i,l,c,u,d=s[0].split("|").map((function(e){return e.trim()})),p=s[1].split("|").map((function(e){return e.trim()})),f=[],h=[],g=[],m=[];for(s.shift(),s.shift(),a=0;a<s.length;++a)""!==s[a].trim()&&f.push(s[a].split("|").map((function(e){return e.trim()})));if(d.length<p.length)return e;for(a=0;a<p.length;++a)g.push((i=p[a],/^:[ \t]*--*$/.test(i)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(i)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(i)?' style="text-align:center;"':""));for(a=0;a<d.length;++a)o.helper.isUndefined(g[a])&&(g[a]=""),h.push((l=d[a],c=g[a],u=void 0,u="",l=l.trim(),(r.tablesHeaderId||r.tableHeaderId)&&(u=' id="'+l.replace(/ /g,"_").toLowerCase()+'"'),"<th"+u+c+">"+(l=o.subParser("spanGamut")(l,r,t))+"</th>\n"));for(a=0;a<f.length;++a){for(var b=[],_=0;_<h.length;++_)o.helper.isUndefined(f[a][_]),b.push(n(f[a][_],g[_]));m.push(b)}return function(e,r){for(var t="<table>\n<thead>\n<tr>\n",n=e.length,a=0;a<n;++a)t+=e[a];for(t+="</tr>\n</thead>\n<tbody>\n",a=0;a<r.length;++a){t+="<tr>\n";for(var o=0;o<n;++o)t+=r[a][o];t+="</tr>\n"}return t+"</tbody>\n</table>\n"}(h,m)}return e=(e=(e=(e=t.converter._dispatch("tables.before",e,r,t)).replace(/\\(\|)/g,o.helper.escapeCharactersCallback)).replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,a)).replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm,a),e=t.converter._dispatch("tables.after",e,r,t)})),o.subParser("underline",(function(e,r,t){"use strict";return r.underline?(e=t.converter._dispatch("underline.before",e,r,t),e=(e=r.literalMidWordUnderscores?(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,(function(e,r){return"<u>"+r+"</u>"}))).replace(/\b__(\S[\s\S]*?)__\b/g,(function(e,r){return"<u>"+r+"</u>"})):(e=e.replace(/___(\S[\s\S]*?)___/g,(function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e}))).replace(/__(\S[\s\S]*?)__/g,(function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e}))).replace(/(_)/g,o.helper.escapeCharactersCallback),e=t.converter._dispatch("underline.after",e,r,t)):e})),o.subParser("unescapeSpecialChars",(function(e,r,t){"use strict";return e=(e=t.converter._dispatch("unescapeSpecialChars.before",e,r,t)).replace(/¨E(\d+)E/g,(function(e,r){var t=parseInt(r);return String.fromCharCode(t)})),e=t.converter._dispatch("unescapeSpecialChars.after",e,r,t)})),o.subParser("makeMarkdown.blockquote",(function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var n=e.childNodes,a=n.length,s=0;s<a;++s){var i=o.subParser("makeMarkdown.node")(n[s],r);""!==i&&(t+=i)}return t="> "+(t=t.trim()).split("\n").join("\n> ")})),o.subParser("makeMarkdown.codeBlock",(function(e,r){"use strict";var t=e.getAttribute("language"),n=e.getAttribute("precodenum");return"```"+t+"\n"+r.preList[n]+"\n```"})),o.subParser("makeMarkdown.codeSpan",(function(e){"use strict";return"`"+e.innerHTML+"`"})),o.subParser("makeMarkdown.emphasis",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="*";for(var n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);t+="*"}return t})),o.subParser("makeMarkdown.header",(function(e,r,t){"use strict";var n=new Array(t+1).join("#"),a="";if(e.hasChildNodes()){a=n+" ";for(var s=e.childNodes,i=s.length,l=0;l<i;++l)a+=o.subParser("makeMarkdown.node")(s[l],r)}return a})),o.subParser("makeMarkdown.hr",(function(){"use strict";return"---"})),o.subParser("makeMarkdown.image",(function(e){"use strict";var r="";return e.hasAttribute("src")&&(r+="!["+e.getAttribute("alt")+"](",r+="<"+e.getAttribute("src")+">",e.hasAttribute("width")&&e.hasAttribute("height")&&(r+=" ="+e.getAttribute("width")+"x"+e.getAttribute("height")),e.hasAttribute("title")&&(r+=' "'+e.getAttribute("title")+'"'),r+=")"),r})),o.subParser("makeMarkdown.links",(function(e,r){"use strict";var t="";if(e.hasChildNodes()&&e.hasAttribute("href")){var n=e.childNodes,a=n.length;t="[";for(var s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);t+="](",t+="<"+e.getAttribute("href")+">",e.hasAttribute("title")&&(t+=' "'+e.getAttribute("title")+'"'),t+=")"}return t})),o.subParser("makeMarkdown.list",(function(e,r,t){"use strict";var n="";if(!e.hasChildNodes())return"";for(var a=e.childNodes,s=a.length,i=e.getAttribute("start")||1,l=0;l<s;++l)if(void 0!==a[l].tagName&&"li"===a[l].tagName.toLowerCase()){n+=("ol"===t?i.toString()+". ":"- ")+o.subParser("makeMarkdown.listItem")(a[l],r),++i}return(n+="\n\x3c!-- --\x3e\n").trim()})),o.subParser("makeMarkdown.listItem",(function(e,r){"use strict";for(var t="",n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);return/\n$/.test(t)?t=t.split("\n").join("\n    ").replace(/^ {4}$/gm,"").replace(/\n\n+/g,"\n\n"):t+="\n",t})),o.subParser("makeMarkdown.node",(function(e,r,t){"use strict";t=t||!1;var n="";if(3===e.nodeType)return o.subParser("makeMarkdown.txt")(e,r);if(8===e.nodeType)return"\x3c!--"+e.data+"--\x3e\n\n";if(1!==e.nodeType)return"";switch(e.tagName.toLowerCase()){case"h1":t||(n=o.subParser("makeMarkdown.header")(e,r,1)+"\n\n");break;case"h2":t||(n=o.subParser("makeMarkdown.header")(e,r,2)+"\n\n");break;case"h3":t||(n=o.subParser("makeMarkdown.header")(e,r,3)+"\n\n");break;case"h4":t||(n=o.subParser("makeMarkdown.header")(e,r,4)+"\n\n");break;case"h5":t||(n=o.subParser("makeMarkdown.header")(e,r,5)+"\n\n");break;case"h6":t||(n=o.subParser("makeMarkdown.header")(e,r,6)+"\n\n");break;case"p":t||(n=o.subParser("makeMarkdown.paragraph")(e,r)+"\n\n");break;case"blockquote":t||(n=o.subParser("makeMarkdown.blockquote")(e,r)+"\n\n");break;case"hr":t||(n=o.subParser("makeMarkdown.hr")(e,r)+"\n\n");break;case"ol":t||(n=o.subParser("makeMarkdown.list")(e,r,"ol")+"\n\n");break;case"ul":t||(n=o.subParser("makeMarkdown.list")(e,r,"ul")+"\n\n");break;case"precode":t||(n=o.subParser("makeMarkdown.codeBlock")(e,r)+"\n\n");break;case"pre":t||(n=o.subParser("makeMarkdown.pre")(e,r)+"\n\n");break;case"table":t||(n=o.subParser("makeMarkdown.table")(e,r)+"\n\n");break;case"code":n=o.subParser("makeMarkdown.codeSpan")(e,r);break;case"em":case"i":n=o.subParser("makeMarkdown.emphasis")(e,r);break;case"strong":case"b":n=o.subParser("makeMarkdown.strong")(e,r);break;case"del":n=o.subParser("makeMarkdown.strikethrough")(e,r);break;case"a":n=o.subParser("makeMarkdown.links")(e,r);break;case"img":n=o.subParser("makeMarkdown.image")(e,r);break;default:n=e.outerHTML+"\n\n"}return n})),o.subParser("makeMarkdown.paragraph",(function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);return t=t.trim()})),o.subParser("makeMarkdown.pre",(function(e,r){"use strict";var t=e.getAttribute("prenum");return"<pre>"+r.preList[t]+"</pre>"})),o.subParser("makeMarkdown.strikethrough",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="~~";for(var n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);t+="~~"}return t})),o.subParser("makeMarkdown.strong",(function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="**";for(var n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r);t+="**"}return t})),o.subParser("makeMarkdown.table",(function(e,r){"use strict";var t,n,a="",s=[[],[]],i=e.querySelectorAll("thead>tr>th"),l=e.querySelectorAll("tbody>tr");for(t=0;t<i.length;++t){var c=o.subParser("makeMarkdown.tableCell")(i[t],r),u="---";if(i[t].hasAttribute("style"))switch(i[t].getAttribute("style").toLowerCase().replace(/\s/g,"")){case"text-align:left;":u=":---";break;case"text-align:right;":u="---:";break;case"text-align:center;":u=":---:"}s[0][t]=c.trim(),s[1][t]=u}for(t=0;t<l.length;++t){var d=s.push([])-1,p=l[t].getElementsByTagName("td");for(n=0;n<i.length;++n){var f=" ";void 0!==p[n]&&(f=o.subParser("makeMarkdown.tableCell")(p[n],r)),s[d].push(f)}}var h=3;for(t=0;t<s.length;++t)for(n=0;n<s[t].length;++n){var g=s[t][n].length;g>h&&(h=g)}for(t=0;t<s.length;++t){for(n=0;n<s[t].length;++n)1===t?":"===s[t][n].slice(-1)?s[t][n]=o.helper.padEnd(s[t][n].slice(-1),h-1,"-")+":":s[t][n]=o.helper.padEnd(s[t][n],h,"-"):s[t][n]=o.helper.padEnd(s[t][n],h);a+="| "+s[t].join(" | ")+" |\n"}return a.trim()})),o.subParser("makeMarkdown.tableCell",(function(e,r){"use strict";var t="";if(!e.hasChildNodes())return"";for(var n=e.childNodes,a=n.length,s=0;s<a;++s)t+=o.subParser("makeMarkdown.node")(n[s],r,!0);return t.trim()})),o.subParser("makeMarkdown.txt",(function(e){"use strict";var r=e.nodeValue;return r=(r=r.replace(/ +/g," ")).replace(/¨NBSP;/g," "),r=(r=(r=(r=(r=(r=(r=(r=(r=o.helper.unescapeHTMLEntities(r)).replace(/([*_~|`])/g,"\\$1")).replace(/^(\s*)>/g,"\\$1>")).replace(/^#/gm,"\\#")).replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3")).replace(/^( {0,3}\d+)\./gm,"$1\\.")).replace(/^( {0,3})([+-])/gm,"$1\\$2")).replace(/]([\s]*)\(/g,"\\]$1\\(")).replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:")}));void 0===(n=function(){"use strict";return o}.call(r,t,r,e))||(e.exports=n)}).call(this)},"./typescript/src/doc_functionality/color.ts":function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.getClassForInvertedText=r.returnSwatchClassnames=r.contrastColorAPCA=r.contrastColor=r.getColorContrastRatio=r.getColorContrast=void 0;const a=t("./node_modules/get-contrast/index.js"),o=n(t("./node_modules/colorjs.io/dist/color.cjs"));function s(e){if(!e)return 0;0===e.indexOf("#")&&(e=e.slice(1));return(.299*parseInt(e.substr(0,2),16)+.587*parseInt(e.substr(2,2),16)+.114*parseInt(e.substr(4,2),16))/255}r.getColorContrast=s,r.getColorContrastRatio=function(e,r){return Math.round(10*a.ratio("#"+e,"#"+r))/10},r.contrastColor=function(e){return e?s(e)>.4?"dark":"light":"dark"},r.contrastColorAPCA=function(e){if(!e||!/^#([0-9A-Fa-f]{3}([0-9A-Fa-f]{3})?([0-9A-Fa-f]{2})?)$/.test(e))return"dark";if(9===e.length){if(parseInt(e.slice(7,9),16)/255<.45)return"dark"}const r=new o.default(e);return Math.abs(r.contrast("white","APCA"))>Math.abs(r.contrast("black","APCA"))?"light":"dark"},r.returnSwatchClassnames=function(e){if(!e)return"";let r=new Array;return"ffffffff"===e.hex&&r.push("bordered"),s(e.hex)<.5&&e.a>180&&r.push("inverted-text"),r.join(" ")},r.getClassForInvertedText=function(e){return e&&s(e)<.4?"inverted-text":""}},"./typescript/src/doc_functionality/general-utils.ts":function(e,r,t){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.isNonEmptyString=r.safeArray=r.sortVersionsBySemver=r.generateCustomCSSHash=r.getFormattedDateTime=r.objectValues=r.includes=r.getFullYear=void 0;var a=t("./node_modules/short-hash/src/index.js");const o=n(t("./node_modules/semver-sort/index.js"));r.getFullYear=function(){return(new Date).getFullYear().toString()},r.includes=function(e,r){return e.includes(r)},r.objectValues=function(e){return Object.values(e)},r.getFormattedDateTime=function(e=new Date){return e.toLocaleString("en-us",{day:"numeric",month:"short",year:"numeric",hour12:!1,hour:"2-digit",minute:"2-digit"})},r.generateCustomCSSHash=function(e){const r=["customCSS","customFontFamily","lookAndFeelAccentColor","lookAndFeelAccentAlternativeColor","lookAndFeelAccentSurfaceColor","themeConfiguration","siteMaxWidth","contentContainerWidth","topNavigationStyle","topNavigationBackground","topNavigationHeight","limitSiteMaxWidth","sideNavigationStyle","sideNavigationBackground","headerLogoHeight","iconStrokeWidth","lookAndFeelHeaderLayoutStyle","lookAndFeelHeaderBackgroundColor","lookAndFeelHeaderTextColor","advancedCustomizationCustomCSS"],t=Object.keys(e).filter((e=>r.includes(e))).reduce(((r,t)=>(r[t]=e[t],r)),{});return a(JSON.stringify(t))};r.sortVersionsBySemver=e=>{const r=e.map((e=>{var r;return{original:e,key:(null===(r=e.version.match(/\d+\.\d+\.\d+(-[a-zA-Z0-9_]+)?/))||void 0===r?void 0:r[0])||null}})),t=r.filter((e=>e.key)),n=o.default.desc(t.map((e=>e.key))).map((e=>t.find((r=>r.key===e)).original)),a=r.filter((e=>!e.key)).map((e=>e.original));return n.concat(a)};r.safeArray=e=>e&&e.length>0?e:[];r.isNonEmptyString=e=>!!e},"./typescript/src/doc_functionality/health.ts":(e,r)=>{"use strict";function t(e){e=(e=e.replace(/^\s+|\s+$/g,"")).toLowerCase();for(var r="ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;",t=0,n=r.length;t<n;t++)e=e.replace(new RegExp(r.charAt(t),"g"),"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------".charAt(t));return e=e.replace(/[^a-z0-9 -]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-")}Object.defineProperty(r,"__esModule",{value:!0}),r.getFigmaFileUrl=r.sortComponentsAlphabetically=r.convertHealthTagIfAny=void 0,r.convertHealthTagIfAny=function(e){let r=e.properties,n=e.propertyValues,a=null;for(let e of r)if("status"===e.codeName){let r=n.status,o=e.options;for(let e of o)e.id===r&&(e.slug=t(e.name),a=e)}return a||{name:"Unknown status",slug:"unknown",backgroundColor:"#FFFFFF"}},r.sortComponentsAlphabetically=function(e){return e.sort((function(e,r){return e.name.localeCompare(r.name)})),e},r.getFigmaFileUrl=function(e){return"https://www.figma.com/file/"+e.fileId+"?node-id="+e.nodeId}},"./typescript/src/doc_functionality/lookup.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.checkKeyInArray=r.getCurrentTimestamp=r.isExportable=r.previousPage=r.nextPage=r.flattenedPageStructure=r.resolveMenuLabel=r.isHomepage=r.isHomepageTab=r.firstTabGroupFromTop=r.firstPageFromTop=r.pageOrGroupActiveInContext=r.firstSubgroupOfPage=void 0;const n=t("./typescript/src/doc_functionality/sandbox.ts");function a(e){for(let r of e.children)if(c(r)){if("Page"===r.type)return r;{let e=a(r);if(e)return e}}return null}function o(e){let r=0;for(let t of e.children)if(c(t)){if(0===r&&"Group"===t.type&&"Tabs"===t.groupBehavior)return t.childrenIds;r++}}function s(e,r){let t=a(r);return null!==t&&e.id===t.id}function i(e){let r=[];for(let t of e.children)c(t)&&("Page"===t.type?r.push(t):"Group"===t.type&&(r=r.concat(i(t))));return r}function l(e){return"Group"===e.type?e.children.some((e=>l(e))):!e.configuration.isHidden}function c(e){if(null==e)return!1;if("Group"===e.type){if(e.configuration.isHidden||0===e.children.length||!l(e))return!1;let r=e.parent;return!r||c(r)}return"Page"===e.type&&!e.configuration.isHidden}r.firstSubgroupOfPage=function(e){let r=e.parent;for(;;){if(!r||r.isRoot)return;if(r.parent&&r.parent.isRoot)return r;r=r.parent}},r.pageOrGroupActiveInContext=function e(r,t){if("Page"===t.type){return t.id===r.id}{let n=t;return-1!==n.childrenIds.indexOf(r.persistentId)||!!r.parent&&e(r.parent,n)}},r.firstPageFromTop=a,r.firstTabGroupFromTop=o,r.isHomepageTab=function(e,r){const t=o(r);return!!(null==t?void 0:t.includes(e.persistentId))},r.isHomepage=s,r.resolveMenuLabel=function(e,r,t){return s(e,r)&&""!==t?t:(0,n.htmlSafeString)(e.title)},r.flattenedPageStructure=i,r.nextPage=function(e,r){let t=i(r),n=t.findIndex((r=>r.id===e.id));return-1!==n&&n<t.length-1?t[n+1]:null},r.previousPage=function(e,r){let t=i(r),n=t.findIndex((r=>r.id===e.id));return n>0?t[n-1]:null},r.isExportable=c,r.getCurrentTimestamp=function(){return Math.floor(Date.now()).toString()},r.checkKeyInArray=function(e,r){if(e)for(let t=0;t<e.length;t++)if(e[t]===r)return!0;return!1}},"./typescript/src/doc_functionality/markdown.ts":function(e,r,t){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,r,t,n){void 0===n&&(n=t);var a=Object.getOwnPropertyDescriptor(r,t);a&&!("get"in a?!r.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,n,a)}:function(e,r,t,n){void 0===n&&(n=t),e[n]=r[t]}),a=this&&this.__setModuleDefault||(Object.create?function(e,r){Object.defineProperty(e,"default",{enumerable:!0,value:r})}:function(e,r){e.default=r}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var r={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&n(r,e,t);return a(r,e),r};Object.defineProperty(r,"__esModule",{value:!0}),r.markdownToHTML=void 0;const s=o(t("./node_modules/showdown/dist/showdown.js"));r.markdownToHTML=function(e){s.setFlavor("github"),s.setOption("simpleLineBreaks",!1);let r=new s.Converter;r.addExtension([{type:"output",regex:"<code>(.*?)</code>",replace:function(e,r){return`<mark>${r}</mark>`}}]);const t={table:"data-table header-row table-bordered"},n=Object.keys(t).map((e=>({type:"output",regex:new RegExp(`<${e}(.*)>`,"g"),replace:`<${e} class="${t[e]}" $1>`})));return r.addExtension([...n]),r.addExtension([{type:"output",regex:'<pre><code class="(.+?)">((.|\n)*?)</code></pre>',replace:function(e,r,t){return`<pre class="code-block"><code class="language-${r}">\n\n${t}</code></pre>`}}]),r.addExtension([{type:"output",regex:"<pre><code>",replace:function(){return'<pre class="code-block"><code class="language-typescript">\n\n'}}]),r.addExtension([{type:"output",filter:function(e){return e.replace(/<table/g,'<div class="content-block content-block--table data-table-wrapper"><table').replace(/<\/table>/g,"</table></div>")}}]),`<div class="markdown">${r.makeHtml(e)}</div>`}},"./typescript/src/doc_functionality/sandbox.ts":(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.htmlSafeUrl=r.htmlSafeString=void 0,r.htmlSafeString=function(e){return e?e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"):""},r.htmlSafeUrl=function(e){return(null==e?void 0:e.includes("%"))?e:encodeURI(null!=e?e:"")}},"./typescript/src/doc_functionality/search.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.buildSearchIndexJSON=r.DocSearchResultDataType=void 0;const n=t("./typescript/src/doc_functionality/lookup.ts"),a=t("./typescript/src/doc_functionality/urls.ts");var o;function s(e){let r=e.blocks;for(let t of e.blocks)r=r.concat(i(t));return r}function i(e){let r=e.children;for(let t of e.children)r=r.concat(i(t));return r}!function(e){e.contentBlock="contentBlock",e.sectionHeader="sectionHeader",e.pageTitle="pageTitle",e.groupTitle="groupTitle"}(o=r.DocSearchResultDataType||(r.DocSearchResultDataType={})),r.buildSearchIndexJSON=function(e,r,t){let i=[];for(let r of e){let e=[r.title],l=r.parent,c=!(0,n.isExportable)(r);for(;l&&((0,n.isExportable)(l)||(c=!0),!(null==l?void 0:l.isRoot));)e.splice(0,0,l.title),l=l.parent;if(c)continue;let u=(0,a.pageUrl)(r,t),d=r.title;r.parent&&"Tabs"===r.parent.groupBehavior&&(d=r.parent.title+"/"+d);let p=e.join(" / "),f=s(r);for(let e of f)if(e.hasOwnProperty("text")){let r=e;i.push({text:r.text.spans.map((e=>e.text)).join("").replace(/</g,"&lt;").replace(/>/g,"&gt;"),type:"Heading"===e.type?o.sectionHeader:o.contentBlock,pageName:d,category:p,url:u+"#search-"+e.id})}i.push({text:r.title,type:o.pageTitle,pageName:d,category:p,keywords:p,url:u})}for(let e of r){if(!(0,n.isExportable)(e))continue;let r=[e.title],s=e.parent;for(;s&&!(null==s?void 0:s.isRoot);)r.splice(0,0,s.title),s=s.parent;let l=(0,a.pageUrl)(e,t),c=r.join(" / ");i.push({text:e.title,type:o.groupTitle,pageName:e.title,category:c,url:l})}return`\n  const FuseSearchData = ${JSON.stringify(i,null,2)};\n  `}},"./typescript/src/doc_functionality/string_utils.ts":(e,r)=>{"use strict";function t(e){if(e){var r,t=""+e,n=/["'&<>]/.exec(t);if(!n)return t;var a="",o=0,s=0;for(o=n.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:r="&quot;";break;case 38:r="&amp;";break;case 39:r="&#39;";break;case 60:r="&lt;";break;case 62:r="&gt;";break;default:continue}s!==o&&(a+=t.substring(s,o)),s=o+1,a+=r}return s!==o?a+t.substring(s,o):a}}Object.defineProperty(r,"__esModule",{value:!0}),r.normalizeStringForSearch=r.getVariantClass=r.getSearchIDString=r.changelogToEntries=r.getUrlExtension=r.withHTMLNewlines=r.addSlashes=r.escapeHtml=r.highlightSafeString=void 0,r.highlightSafeString=function(e){return t(e.text.spans.map((e=>e.text)).join(""))},r.escapeHtml=t,r.addSlashes=function(e){return(e+"").replace(/[\\"']/g,"\\$&").replace(/\u0000/g,"\\0")},r.withHTMLNewlines=function(e){return e?e.split("\n").join("<br />"):""},r.getUrlExtension=function(e){if(e)return e.split(".").pop()},r.changelogToEntries=function(e){if(!e)return[];let r=e.split("\n").map((e=>e.trim())),t=new Array;for(let e of r)e.startsWith("-")?t.push(e.substring(1)):t.push(e);return t=t.map((e=>e.trim())).filter((e=>e.trim().length>0)),t},r.getSearchIDString=function(e){return e?"search-"+e:""},r.getVariantClass=function(e){return e?" variant-"+e:""},r.normalizeStringForSearch=function(e){const r=["a","able","about","across","after","all","almost","also","am","among","an","and","any","are","as","at","be","because","been","but","by","can","cannot","could","dear","did","do","does","either","else","ever","every","for","from","get","got","had","has","have","he","her","hers","him","his","how","however","i","if","in","into","is","it","its","just","least","let","like","likely","may","me","might","most","must","my","neither","no","nor","not","of","often","only","or","other","our","own","rather","said","say","says","she","should","since","so","some","than","that","the","their","them","then","there","these","they","this","tis","to","too","twas","us","wants","was","we","were","what","when","where","which","while","who","whom","why","will","with","would","yet","you","your","ain't","aren't","can't","could've","couldn't","didn't","doesn't","don't","hasn't","he'd","he'll","he's","how'd","how'll","how's","i'd","i'll","i'm","i've","isn't","it's","might've","mightn't","must've","mustn't","shan't","she'd","she'll","she's","should've","shouldn't","that'll","that's","there's","they'd","they'll","they're","they've","wasn't","we'd","we'll","we're","weren't","what'd","what's","when'd","when'll","when's","where'd","where'll","where's","who'd","who'll","who's","why'd","why'll","why's","won't","would've","wouldn't","you'd","you'll","you're","you've"];let t,n,a=e.match(/[\w-]+/g),o={},s=[];for(n=0;n<r.length;n++)o[r[n].trim()]=!0;if(!a)return"";for(n=0;n<a.length;n++)t=a[n].trim().toLowerCase(),o[t]||s.push(t);return s.toString().replace(/,/g," ")}},"./typescript/src/doc_functionality/tokens.ts":(e,r)=>{"use strict";function t(e){var r=a(o(e.value.radius.measure)),t=a(e.value.x.measure),s=a(e.value.y.measure),i=a(e.value.spread.measure);return`${"Inner"===e.value.type?"inset ":""}${t} ${s} ${r} ${i} ${n(e.value.color,!0)}`}function n(e,r=!1){if(0===e.a||255===e.a)return r?`rgb(${e.r},${e.g},${e.b})`:(t=e.r,n=e.g,a=e.b,"#"+((1<<24)+(t<<16)+(n<<8)+a).toString(16).slice(1));{const r=Math.round(e.a/255*100)/100;return`rgba(${e.r},${e.g},${e.b},${r})`}var t,n,a}function a(e,r,t){return 0===e&&!0!==t?`${e}`:`${e}px`}function o(e){return e<=0?0:e}function s(e){switch(e){case"Points":return"pt";case"Pixels":return"px";case"Percent":return"%";case"Ems":return"em";case"Rem":return"rem";case"Ms":return"ms";case"Raw":return""}}function i(e){switch(e){case"Upper":return"uppercase";case"Lower":return"lowercase";case"Camel":return"capitalize";default:return"none"}}function l(e){switch(e.toLowerCase()){case"thin":return"100";case"extralight":return"200";case"light":return"300";case"regular":return"400";case"medium":return"500";case"semibold":return"600";case"bold":return"700";case"extrabold":return"800";case"black":return"900";default:return e}}Object.defineProperty(r,"__esModule",{value:!0}),r.getColorValueFromSettings=r.convertTypographyTokenToCSS=r.convertSubfamilyToFontWeight=r.convertTextCaseToTextTransform=r.measureTypeIntoReadableUnit=r.typographyDescription=r.getFormattedColor=r.scaledShadowTokenValue=r.shadowTokenValue=r.shadowDescription=r.gradientTokenValue=r.gradientDescription=r.formattedTokenGroupHeader=r.fullTokenGroupName=void 0,r.fullTokenGroupName=function(e){return[...e.path,e.name].join("/")},r.formattedTokenGroupHeader=function(e,r){if(e.path.length>0&&r){return`<span class="light">${e.path.join(" / ")} / </span>${e.name}`}return e.name},r.gradientDescription=function(e){return`${`${e.value.type} Gradient`}, ${e.value.stops.map((e=>`#${e.color.hex.toUpperCase()}, ${(100*e.position).toFixed(2)}%`)).join(", ")}`},r.gradientTokenValue=function(e){let r="";switch(e.value.type){case"Linear":const t=Math.round(100*(e.value.to.x-e.value.from.x)),n=Math.round(100*(e.value.to.y-e.value.from.y));r=`linear-gradient(${Math.round(Math.atan2(n,t)*(180/Math.PI))+90}deg, `;break;case"Radial":r="radial-gradient(circle, ";break;case"Angular":r="conic-gradient("}return`${r}${e.value.stops.map((e=>`#${e.color.hex.toUpperCase()} ${(100*e.position).toFixed(2)}%`)).join(", ")})`},r.shadowDescription=function(e){var r;return null===(r=e.shadowLayers)||void 0===r?void 0:r.reverse().map((e=>t(e))).join(", ")},r.shadowTokenValue=t,r.scaledShadowTokenValue=function(e,r){var t=o(e.value.radius.measure),s=e.value.x.measure,i=e.value.y.measure,l=e.value.spread.measure;if(null!=r){var c=Math.max(Math.abs(s),Math.abs(i)),u=Math.max(o(t)+Math.max(l,0)+c,1);t=t*r/u,s=s*r/u,i=i*r/u,l=l*r/u}return`${"Inner"===e.value.type?"inset ":""}${a(s)} ${a(i)} ${a(t)} ${a(l)} ${n(e.value.color,!0)}`},r.getFormattedColor=n,r.typographyDescription=function(e){let r=e.value,t=`${r.font.family} ${r.font.subfamily}`,n=`${r.fontSize.measure}${s(r.fontSize.unit)}`,a=r.lineHeight?`/${r.lineHeight.measure}${s(r.lineHeight.unit)}`:"",o="",i="";return null!==r.textDecoration&&"None"!==r.textDecoration&&(o=`, ${r.textDecoration.toLowerCase()}`),null!==r.textCase&&"Original"!==r.textCase&&(i=`, ${r.textCase.toLowerCase()}`),`${t} ${n}${a}${o}${i}`},r.measureTypeIntoReadableUnit=s,r.convertTextCaseToTextTransform=i,r.convertSubfamilyToFontWeight=l,r.convertTypographyTokenToCSS=function(e,r=!1){let t=e.value.font,n=e.value.fontSize,a=e.value.fontSize.measure,o=e.value.textDecoration,c=i(e.value.textCase),u=l(e.value.font.subfamily),d=t.family.includes(" ")?`'${t.family}', '${t.family.replace(" ","")}', Inter, sans-serif`:`'${t.family}', Inter, sans-serif`;return!0===r&&n.measure>24&&(a=24),`font-family: ${d}; font-weight: ${u}; font-size: ${a}${s(n.unit)}; text-decoration: ${o.toLowerCase()}; text-transform: ${c};`},r.getColorValueFromSettings=function(e,r){return null!==e?e:null!==r?`#${r.value.hex}`:null}},"./typescript/src/doc_functionality/urls.ts":(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.slugifyHeading=r.textBlockPlainText=r.removeVersionFromDomainUrl=r.assetUrl=r.rootUrl=r.pageIdentifier=r.pageAnchorUrl=r.pageUrlForFilepath=r.pageUrl=void 0;const n=t("./typescript/src/doc_functionality/lookup.ts");function a(e,r){var t;if(!e)return"#";let a=null;if(a="Page"===e.type?e:(0,n.firstPageFromTop)(e),!a)return"";const o=[r,...a.relativeUrl.split("/").filter(Boolean)].join("/"),s=null===(t=Pulsar.systemData)||void 0===t?void 0:t.call(Pulsar);return s&&"extension"===s.environment?o+".html":o}function o(e){return e.text.spans.map((e=>e.text)).join("")}function s(e,r=""){return"section-"+function(e=""){if(!e)return"";e=(e=e.replace(/^\s+|\s+$/g,"")).toLowerCase();for(var r="àáãäâèéëêìíïîòóöôùúüûñç·/_,:;",t="aaaaaeeeeiiiioooouuuunc------",n=0,a=r.length;n<a;n++)e=e.replace(new RegExp(r.charAt(n),"g"),t.charAt(n));return e=e.replace(/[^a-z0-9 -]/g,"").replace(/\s+/g,"-").replace(/-+/g,"-")}(r)+"-"+e.substring(0,2)}r.pageUrl=a,r.pageUrlForFilepath=function(e,r){let t=a(e,r);return t.endsWith(".html")?t:t+".html"},r.pageAnchorUrl=function(e,r,t,n){const o=a(e,n);return r&&t?o+"#"+s(r,t):o},r.pageIdentifier=function(e){if(!e)return"#";let r=null;return r="Page"===e.type?e:(0,n.firstPageFromTop)(e),r?["page","body",r.relativeUrl].join("/").replace("/","-"):""},r.rootUrl=function(e,r){return[r,e].join("/")},r.assetUrl=function(e,r){return[r,"assets",e].join("/")},r.removeVersionFromDomainUrl=function(e){return e.substring(0,e.lastIndexOf("/"))},r.textBlockPlainText=o,r.slugifyHeading=function(e){return s(e.id,o(e))}},"./node_modules/wcag-contrast/dist/index.m.js":(e,r,t)=>{"use strict";t.r(r),t.d(r,{hex:()=>c,luminance:()=>i,rgb:()=>l,score:()=>u});var n=1/12.92;function a(e){return Math.pow((e+.055)/1.055,2.4)}function o(e){var r=e[0]/255,t=e[1]/255,o=e[2]/255;return.2126*(r<=.03928?r*n:a(r))+.7152*(t<=.03928?t*n:a(t))+.0722*(o<=.03928?o*n:a(o))}function s(e){var r=255;8===(e=e.replace(/^#/,"")).length&&(r=parseInt(e.slice(6,8),16),e=e.substring(0,6)),4===e.length&&(r=parseInt(e.slice(3,4).repeat(2),16),e=e.substring(0,3)),3===e.length&&(e=e[0]+e[0]+e[1]+e[1]+e[2]+e[2]);var t=parseInt(e,16);return[t>>16,t>>8&255,255&t,r]}function i(e,r){return(Math.max(e,r)+.05)/(Math.min(e,r)+.05)}function l(e,r){return i(o(e),o(r))}function c(e,r){return l(s(e),s(r))}function u(e){return e>=7?"AAA":e>=4.5?"AA":e>=3?"AA Large":"Fail"}},"./node_modules/colorjs.io/dist/color.cjs":(e,r)=>{"use strict";function t(e,r){let t=e.length;Array.isArray(e[0])||(e=[e]),Array.isArray(r[0])||(r=r.map((e=>[e])));let n=r[0].length,a=r[0].map(((e,t)=>r.map((e=>e[t])))),o=e.map((e=>a.map((r=>{let t=0;if(!Array.isArray(e)){for(let n of r)t+=e*n;return t}for(let n=0;n<e.length;n++)t+=e[n]*(r[n]||0);return t}))));return 1===t&&(o=o[0]),1===n?o.map((e=>e[0])):o}function n(e){return"string"===a(e)}function a(e){return(Object.prototype.toString.call(e).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function o(e,{precision:r,unit:t}){return s(e)?"none":l(e,r)+(t??"")}function s(e){return Number.isNaN(e)||e instanceof Number&&e?.none}function i(e){return s(e)?0:e}function l(e,r){if(0===e)return 0;let t=~~e,n=0;t&&r&&(n=1+~~Math.log10(Math.abs(t)));const a=10**(r-n);return Math.floor(e*a+.5)/a}Object.defineProperty(r,"__esModule",{value:!0});const c={deg:1,grad:.9,rad:180/Math.PI,turn:360};function u(e){if(!e)return;e=e.trim();const r=/^-?[\d.]+$/,t=/%|deg|g?rad|turn$/,n=/\/?\s*(none|[-\w.]+(?:%|deg|g?rad|turn)?)/g;let a=e.match(/^([a-z]+)\((.+?)\)$/i);if(a){let e=[];return a[2].replace(n,((n,a)=>{let o=a.match(t),s=a;if(o){let e=o[0],r=s.slice(0,-e.length);"%"===e?(s=new Number(r/100),s.type="<percentage>"):(s=new Number(r*c[e]),s.type="<angle>",s.unit=e)}else r.test(s)?(s=new Number(s),s.type="<number>"):"none"===s&&(s=new Number(NaN),s.none=!0);n.startsWith("/")&&(s=s instanceof Number?s:new Number(s),s.alpha=!0),"object"==typeof s&&s instanceof Number&&(s.raw=a),e.push(s)})),{name:a[1].toLowerCase(),rawName:a[1],rawArgs:a[2],args:e}}}function d(e){return e[e.length-1]}function p(e,r,t){return isNaN(e)?r:isNaN(r)?e:e+(r-e)*t}function f(e,r,t){return(t-e)/(r-e)}function h(e,r,t){return p(r[0],r[1],f(e[0],e[1],t))}function g(e){return e.map((e=>e.split("|").map((e=>{let r=(e=e.trim()).match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(r){let e=new String(r[1]);return e.range=[+r[2],+r[3]],e}return e}))))}function m(e,r,t){return Math.max(Math.min(t,r),e)}function b(e,r){return Math.sign(e)===Math.sign(r)?e:-e}function _(e,r){return b(Math.abs(e)**r,e)}function w(e,r){return 0===r?0:e/r}function v(e,r,t=0,n=e.length){for(;t<n;){const a=t+n>>1;e[a]<r?t=a+1:n=a}return t}var y=Object.freeze({__proto__:null,bisectLeft:v,clamp:m,copySign:b,interpolate:p,interpolateInv:f,isNone:s,isString:n,last:d,mapRange:h,multiplyMatrices:t,parseCoordGrammar:g,parseFunction:u,serializeNumber:o,skipNone:i,spow:_,toPrecision:l,type:a,zdiv:w});const k=new class{add(e,r,t){if("string"==typeof arguments[0])(Array.isArray(e)?e:[e]).forEach((function(e){this[e]=this[e]||[],r&&this[e][t?"unshift":"push"](r)}),this);else for(var e in arguments[0])this.add(e,arguments[0][e],arguments[1])}run(e,r){this[e]=this[e]||[],this[e].forEach((function(e){e.call(r&&r.context?r.context:r,r)}))}};var M={gamut_mapping:"css",precision:5,deltaE:"76",verbose:"test"!==globalThis?.process?.env?.NODE_ENV?.toLowerCase(),warn:function(e){this.verbose&&globalThis?.console?.warn?.(e)}};const x={D50:[.3457/.3585,1,.2958/.3585],D65:[.3127/.329,1,.3583/.329]};function P(e){return Array.isArray(e)?e:x[e]}function C(e,r,n,a={}){if(e=P(e),r=P(r),!e||!r)throw new TypeError(`Missing white point to convert ${e?"":"from"}${e||r?"":"/"}${r?"":"to"}`);if(e===r)return n;let o={W1:e,W2:r,XYZ:n,options:a};if(k.run("chromatic-adaptation-start",o),o.M||(o.W1===x.D65&&o.W2===x.D50?o.M=[[1.0479297925449969,.022946870601609652,-.05019226628920524],[.02962780877005599,.9904344267538799,-.017073799063418826],[-.009243040646204504,.015055191490298152,.7518742814281371]]:o.W1===x.D50&&o.W2===x.D65&&(o.M=[[.955473421488075,-.02309845494876471,.06325924320057072],[-.0283697093338637,1.0099953980813041,.021041441191917323],[.012314014864481998,-.020507649298898964,1.330365926242124]])),k.run("chromatic-adaptation-end",o),o.M)return t(o.M,o.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}const j=new Set(["<number>","<percentage>","<angle>"]);function S(e,r,t,n){let a=Object.entries(e.coords).map((([e,a],o)=>{let s,i=r.coordGrammar[o],l=n[o],c=l?.type;if(s=l.none?i.find((e=>j.has(e))):i.find((e=>e==c)),!s){let r=a.name||e;throw new TypeError(`${c??l.raw} not allowed for ${r} in ${t}()`)}let u=s.range;"<percentage>"===c&&(u||=[0,1]);let d=a.range||a.refRange;return u&&d&&(n[o]=h(u,d,n[o])),s}));return a}function z(e,{meta:r}={}){let t={str:String(e)?.trim()};if(k.run("parse-start",t),t.color)return t.color;if(t.parsed=u(t.str),t.parsed){let e=t.parsed.name;if("color"===e){let e=t.parsed.args.shift(),n=e.startsWith("--")?e.substring(2):`--${e}`,a=[e,n],o=t.parsed.rawArgs.indexOf("/")>0?t.parsed.args.pop():1;for(let n of A.all){let s=n.getFormat("color");if(s&&(a.includes(s.id)||s.ids?.filter((e=>a.includes(e))).length)){const a=Object.keys(n.coords).map(((e,r)=>t.parsed.args[r]||0));let i;return s.coordGrammar&&(i=S(n,s,"color",a)),r&&Object.assign(r,{formatId:"color",types:i}),s.id.startsWith("--")&&!e.startsWith("--")&&M.warn(`${n.name} is a non-standard space and not currently supported in the CSS spec. Use prefixed color(${s.id}) instead of color(${e}).`),e.startsWith("--")&&!s.id.startsWith("--")&&M.warn(`${n.name} is a standard space and supported in the CSS spec. Use color(${s.id}) instead of prefixed color(${e}).`),{spaceId:n.id,coords:a,alpha:o}}}let s="",i=e in A.registry?e:n;if(i in A.registry){let e=A.registry[i].formats?.color?.id;e&&(s=`Did you mean color(${e})?`)}throw new TypeError(`Cannot parse color(${e}). `+(s||"Missing a plugin?"))}for(let n of A.all){let a=n.getFormat(e);if(a&&"function"===a.type){let o=1;(a.lastAlpha||d(t.parsed.args).alpha)&&(o=t.parsed.args.pop());let s,i=t.parsed.args;return a.coordGrammar&&(s=S(n,a,e,i)),r&&Object.assign(r,{formatId:a.name,types:s}),{spaceId:n.id,coords:i,alpha:o}}}}else for(let e of A.all)for(let n in e.formats){let a=e.formats[n];if("custom"!==a.type)continue;if(a.test&&!a.test(t.str))continue;let o=a.parse(t.str);if(o)return o.alpha??=1,r&&(r.formatId=n),o}throw new TypeError(`Could not parse ${e} as a color. Missing a plugin?`)}function E(e){if(Array.isArray(e))return e.map(E);if(!e)throw new TypeError("Empty color reference");n(e)&&(e=z(e));let r=e.space||e.spaceId;return r instanceof A||(e.space=A.get(r)),void 0===e.alpha&&(e.alpha=1),e}class A{constructor(e){this.id=e.id,this.name=e.name,this.base=e.base?A.get(e.base):null,this.aliases=e.aliases,this.base&&(this.fromBase=e.fromBase,this.toBase=e.toBase);let r=e.coords??this.base.coords;for(let e in r)"name"in r[e]||(r[e].name=e);this.coords=r;let t=e.white??this.base.white??"D65";this.white=P(t),this.formats=e.formats??{};for(let e in this.formats){let r=this.formats[e];r.type||="function",r.name||=e}this.formats.color?.id||(this.formats.color={...this.formats.color??{},id:e.cssId||this.id}),e.gamutSpace?this.gamutSpace="self"===e.gamutSpace?this:A.get(e.gamutSpace):this.isPolar?this.gamutSpace=this.base:this.gamutSpace=this,this.gamutSpace.isUnbounded&&(this.inGamut=(e,r)=>!0),this.referred=e.referred,Object.defineProperty(this,"path",{value:T(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),k.run("colorspace-init-end",this)}inGamut(e,{epsilon:r=75e-6}={}){if(!this.equals(this.gamutSpace))return e=this.to(this.gamutSpace,e),this.gamutSpace.inGamut(e,{epsilon:r});let t=Object.values(this.coords);return e.every(((e,n)=>{let a=t[n];if("angle"!==a.type&&a.range){if(Number.isNaN(e))return!0;let[t,n]=a.range;return(void 0===t||e>=t-r)&&(void 0===n||e<=n+r)}return!0}))}get isUnbounded(){return Object.values(this.coords).every((e=>!("range"in e)))}get cssId(){return this.formats?.color?.id||this.id}get isPolar(){for(let e in this.coords)if("angle"===this.coords[e].type)return!0;return!1}getFormat(e){if("object"==typeof e)return e=L(e,this);let r;return r="default"===e?Object.values(this.formats)[0]:this.formats[e],r?(r=L(r,this),r):null}equals(e){return!!e&&(this===e||this.id===e||this.id===e.id)}to(e,r){if(1===arguments.length){const t=E(e);[e,r]=[t.space,t.coords]}if(e=A.get(e),this.equals(e))return r;r=r.map((e=>Number.isNaN(e)?0:e));let t,n,a=this.path,o=e.path;for(let e=0;e<a.length&&a[e].equals(o[e]);e++)t=a[e],n=e;if(!t)throw new Error(`Cannot convert between color spaces ${this} and ${e}: no connection space was found`);for(let e=a.length-1;e>n;e--)r=a[e].toBase(r);for(let e=n+1;e<o.length;e++)r=o[e].fromBase(r);return r}from(e,r){if(1===arguments.length){const t=E(e);[e,r]=[t.space,t.coords]}return(e=A.get(e)).to(this,r)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let e=[];for(let r in this.coords){let t=this.coords[r],n=t.range||t.refRange;e.push(n?.min??0)}return e}static registry={};static get all(){return[...new Set(Object.values(A.registry))]}static register(e,r){if(1===arguments.length&&(e=(r=arguments[0]).id),r=this.get(r),this.registry[e]&&this.registry[e]!==r)throw new Error(`Duplicate color space registration: '${e}'`);if(this.registry[e]=r,1===arguments.length&&r.aliases)for(let e of r.aliases)this.register(e,r);return r}static get(e,...r){if(!e||e instanceof A)return e;if("string"===a(e)){let r=A.registry[e.toLowerCase()];if(!r)throw new TypeError(`No color space found with id = "${e}"`);return r}if(r.length)return A.get(...r);throw new TypeError(`${e} is not a valid color space`)}static resolveCoord(e,r){let t,n,o=a(e);if("string"===o?e.includes(".")?[t,n]=e.split("."):[t,n]=[,e]:Array.isArray(e)?[t,n]=e:(t=e.space,n=e.coordId),t=A.get(t),t||(t=r),!t)throw new TypeError(`Cannot resolve coordinate reference ${e}: No color space specified and relative references are not allowed here`);if(o=a(n),"number"===o||"string"===o&&n>=0){let e=Object.entries(t.coords)[n];if(e)return{space:t,id:e[0],index:n,...e[1]}}t=A.get(t);let s=n.toLowerCase(),i=0;for(let e in t.coords){let r=t.coords[e];if(e.toLowerCase()===s||r.name?.toLowerCase()===s)return{space:t,id:e,index:i,...r};i++}throw new TypeError(`No "${n}" coordinate found in ${t.name}. Its coordinates are: ${Object.keys(t.coords).join(", ")}`)}static DEFAULT_FORMAT={type:"functions",name:"color"}}function T(e){let r=[e];for(let t=e;t=t.base;)r.push(t);return r}function L(e,{coords:r}={}){if(e.coords&&!e.coordGrammar){e.type||="function",e.name||="color",e.coordGrammar=g(e.coords);let t=Object.entries(r).map((([r,t],n)=>{let a=e.coordGrammar[n][0],o=t.range||t.refRange,s=a.range,i="";return"<percentage>"==a?(s=[0,100],i="%"):"<angle>"==a&&(i="deg"),{fromRange:o,toRange:s,suffix:i}}));e.serializeCoords=(e,r)=>e.map(((e,n)=>{let{fromRange:a,toRange:s,suffix:i}=t[n];return a&&s&&(e=h(a,s,e)),e=o(e,{precision:r,unit:i})}))}return e}var $=new A({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]});class F extends A{constructor(e){e.coords||(e.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),e.base||(e.base=$),e.toXYZ_M&&e.fromXYZ_M&&(e.toBase??=r=>{let n=t(e.toXYZ_M,r);return this.white!==this.base.white&&(n=C(this.white,this.base.white,n)),n},e.fromBase??=r=>(r=C(this.base.white,this.white,r),t(e.fromXYZ_M,r))),e.referred??="display",super(e)}}function I(e,r){return e=E(e),!r||e.space.equals(r)?e.coords.slice():(r=A.get(r)).from(e)}function B(e,r){e=E(e);let{space:t,index:n}=A.resolveCoord(r,e.space);return I(e,t)[n]}function R(e,r,t){return e=E(e),r=A.get(r),e.coords=r.to(e.space,t),e}function H(e,r,t){if(e=E(e),2===arguments.length&&"object"===a(arguments[1])){let r=arguments[1];for(let t in r)H(e,t,r[t])}else{"function"==typeof t&&(t=t(B(e,r)));let{space:n,index:a}=A.resolveCoord(r,e.space),o=I(e,n);o[a]=t,R(e,n,o)}return e}R.returns="color",H.returns="color";var N=new A({id:"xyz-d50",name:"XYZ D50",white:"D50",base:$,fromBase:e=>C($.white,"D50",e),toBase:e=>C("D50",$.white,e)});const O=24/116,D=24389/27;let q=x.D50;var U=new A({id:"lab",name:"Lab",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:q,base:N,fromBase(e){let r=e.map(((e,r)=>e/q[r])).map((e=>e>.008856451679035631?Math.cbrt(e):(D*e+16)/116));return[116*r[1]-16,500*(r[0]-r[1]),200*(r[1]-r[2])]},toBase(e){let r=[];return r[1]=(e[0]+16)/116,r[0]=e[1]/500+r[1],r[2]=r[1]-e[2]/200,[r[0]>O?Math.pow(r[0],3):(116*r[0]-16)/D,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/D,r[2]>O?Math.pow(r[2],3):(116*r[2]-16)/D].map(((e,r)=>e*q[r]))},formats:{lab:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function V(e){return(e%360+360)%360}var G=new A({id:"lch",name:"LCH",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,150],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:U,fromBase(e){let r,[t,n,a]=e;return r=Math.abs(n)<.02&&Math.abs(a)<.02?NaN:180*Math.atan2(a,n)/Math.PI,[t,Math.sqrt(n**2+a**2),V(r)]},toBase(e){let[r,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[r,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{lch:{coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}});const W=25**7,Z=Math.PI,Y=180/Z,X=Z/180;function J(e){const r=e*e;return r*r*r*e}function K(e,r,{kL:t=1,kC:n=1,kH:a=1}={}){[e,r]=E([e,r]);let[o,s,i]=U.from(e),l=G.from(U,[o,s,i])[1],[c,u,d]=U.from(r),p=G.from(U,[c,u,d])[1];l<0&&(l=0),p<0&&(p=0);let f=J((l+p)/2),h=.5*(1-Math.sqrt(f/(f+W))),g=(1+h)*s,m=(1+h)*u,b=Math.sqrt(g**2+i**2),_=Math.sqrt(m**2+d**2),w=0===g&&0===i?0:Math.atan2(i,g),v=0===m&&0===d?0:Math.atan2(d,m);w<0&&(w+=2*Z),v<0&&(v+=2*Z),w*=Y,v*=Y;let y,k=c-o,x=_-b,P=v-w,C=w+v,j=Math.abs(P);b*_==0?y=0:j<=180?y=P:P>180?y=P-360:P<-180?y=P+360:M.warn("the unthinkable has happened");let S,z=2*Math.sqrt(_*b)*Math.sin(y*X/2),A=(o+c)/2,T=(b+_)/2,L=J(T);S=b*_==0?C:j<=180?C/2:C<360?(C+360)/2:(C-360)/2;let $=(A-50)**2,F=1+.015*$/Math.sqrt(20+$),I=1+.045*T,B=1;B-=.17*Math.cos((S-30)*X),B+=.24*Math.cos(2*S*X),B+=.32*Math.cos((3*S+6)*X),B-=.2*Math.cos((4*S-63)*X);let R=1+.015*T*B,H=30*Math.exp(-1*((S-275)/25)**2),N=2*Math.sqrt(L/(L+W)),O=(k/(t*F))**2;return O+=(x/(n*I))**2,O+=(z/(a*R))**2,O+=-1*Math.sin(2*H*X)*N*(x/(n*I))*(z/(a*R)),Math.sqrt(O)}const Q=[[.819022437996703,.3619062600528904,-.1288737815209879],[.0329836539323885,.9292868615863434,.0361446663506424],[.0481771893596242,.2642395317527308,.6335478284694309]],ee=[[1.2268798758459243,-.5578149944602171,.2813910456659647],[-.0405757452148008,1.112286803280317,-.0717110580655164],[-.0763729366746601,-.4214933324022432,1.5869240198367816]],re=[[.210454268309314,.7936177747023054,-.0040720430116193],[1.9779985324311684,-2.42859224204858,.450593709617411],[.0259040424655478,.7827717124575296,-.8086757549230774]],te=[[1,.3963377773761749,.2158037573099136],[1,-.1055613458156586,-.0638541728258133],[1,-.0894841775298119,-1.2914855480194092]];var ne=new A({id:"oklab",name:"Oklab",coords:{l:{refRange:[0,1],name:"Lightness"},a:{refRange:[-.4,.4]},b:{refRange:[-.4,.4]}},white:"D65",base:$,fromBase(e){let r=t(Q,e).map((e=>Math.cbrt(e)));return t(re,r)},toBase(e){let r=t(te,e).map((e=>e**3));return t(ee,r)},formats:{oklab:{coords:["<percentage> | <number>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function ae(e,r){[e,r]=E([e,r]);let[t,n,a]=ne.from(e),[o,s,i]=ne.from(r),l=t-o,c=n-s,u=a-i;return Math.sqrt(l**2+c**2+u**2)}function oe(e,r,{epsilon:t=75e-6}={}){e=E(e),r||(r=e.space),r=A.get(r);let n=e.coords;return r!==e.space&&(n=r.from(e)),r.inGamut(n,{epsilon:t})}function se(e){return{space:e.space,coords:e.coords.slice(),alpha:e.alpha}}function ie(e,r,t="lab"){let n=(t=A.get(t)).from(e),a=t.from(r);return Math.sqrt(n.reduce(((e,r,t)=>{let n=a[t];return isNaN(r)||isNaN(n)?e:e+(n-r)**2}),0))}const le=Math.PI/180;var ce=new A({id:"xyz-abs-d65",cssId:"--xyz-abs-d65",name:"Absolute XYZ D65",coords:{x:{refRange:[0,9504.7],name:"Xa"},y:{refRange:[0,1e4],name:"Ya"},z:{refRange:[0,10888.3],name:"Za"}},base:$,fromBase:e=>e.map((e=>Math.max(203*e,0))),toBase:e=>e.map((e=>Math.max(e/203,0)))});const ue=1.15,de=.66,pe=2610/16384,fe=.8359375,he=2413/128,ge=18.6875,me=32/(1.7*2523),be=-.56,_e=16295499532821565e-27,we=[[.41478972,.579999,.014648],[-.20151,1.120649,.0531008],[-.0166008,.2648,.6684799]],ve=[[1.9242264357876067,-1.0047923125953657,.037651404030618],[.35031676209499907,.7264811939316552,-.06538442294808501],[-.09098281098284752,-.3127282905230739,1.5227665613052603]],ye=[[.5,.5,0],[3.524,-4.066708,.542708],[.199076,1.096799,-1.295875]],ke=[[1,.1386050432715393,.05804731615611886],[.9999999999999999,-.1386050432715393,-.05804731615611886],[.9999999999999998,-.09601924202631895,-.8118918960560388]];var Me=new A({id:"jzazbz",name:"Jzazbz",coords:{jz:{refRange:[0,1],name:"Jz"},az:{refRange:[-.5,.5]},bz:{refRange:[-.5,.5]}},base:ce,fromBase(e){let[r,n,a]=e,o=t(we,[ue*r-(ue-1)*a,de*n-(de-1)*r,a]).map((function(e){return((fe+he*(e/1e4)**pe)/(1+ge*(e/1e4)**pe))**134.03437499999998})),[s,i,l]=t(ye,o);return[(1+be)*s/(1+be*s)-_e,i,l]},toBase(e){let[r,n,a]=e,o=t(ke,[(r+_e)/(1+be-be*(r+_e)),n,a]).map((function(e){return 1e4*((fe-e**me)/(ge*e**me-he))**6.277394636015326})),[s,i,l]=t(ve,o),c=(s+(ue-1)*l)/ue;return[c,(i+(de-1)*c)/de,l]},formats:{color:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),xe=new A({id:"jzczhz",name:"JzCzHz",coords:{jz:{refRange:[0,1],name:"Jz"},cz:{refRange:[0,1],name:"Chroma"},hz:{refRange:[0,360],type:"angle",name:"Hue"}},base:Me,fromBase(e){let r,[t,n,a]=e;const o=2e-4;return r=Math.abs(n)<o&&Math.abs(a)<o?NaN:180*Math.atan2(a,n)/Math.PI,[t,Math.sqrt(n**2+a**2),V(r)]},toBase:e=>[e[0],e[1]*Math.cos(e[2]*Math.PI/180),e[1]*Math.sin(e[2]*Math.PI/180)]});const Pe=.8359375,Ce=2413/128,je=18.6875,Se=2610/16384,ze=2523/32,Ee=16384/2610,Ae=32/2523,Te=[[.3592832590121217,.6976051147779502,-.035891593232029],[-.1920808463704993,1.100476797037432,.0753748658519118],[.0070797844607479,.0748396662186362,.8433265453898765]],Le=[[.5,.5,0],[6610/4096,-13613/4096,7003/4096],[17933/4096,-17390/4096,-543/4096]],$e=[[.9999999999999998,.0086090370379328,.111029625003026],[.9999999999999998,-.0086090370379328,-.1110296250030259],[.9999999999999998,.5600313357106791,-.3206271749873188]],Fe=[[2.0701522183894223,-1.3263473389671563,.2066510476294053],[.3647385209748072,.6805660249472273,-.0453045459220347],[-.0497472075358123,-.0492609666966131,1.1880659249923042]];var Ie=new A({id:"ictcp",name:"ICTCP",coords:{i:{refRange:[0,1],name:"I"},ct:{refRange:[-.5,.5],name:"CT"},cp:{refRange:[-.5,.5],name:"CP"}},base:ce,fromBase:e=>function(e){let r=e.map((function(e){return((Pe+Ce*(e/1e4)**Se)/(1+je*(e/1e4)**Se))**ze}));return t(Le,r)}(t(Te,e)),toBase(e){let r=function(e){return t($e,e).map((function(e){return 1e4*(Math.max(e**Ae-Pe,0)/(Ce-je*e**Ae))**Ee}))}(e);return t(Fe,r)}});const Be=x.D65,Re=1/.42,He=2*Math.PI,Ne=[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],Oe=[[1.8620678550872327,-1.0112546305316843,.14918677544445175],[.38752654323613717,.6214474419314753,-.008973985167612518],[-.015841498849333856,-.03412293802851557,1.0499644368778496]],De=[[460,451,288],[460,-891,-261],[460,-220,-6300]],qe={dark:[.8,.525,.8],dim:[.9,.59,.9],average:[1,.69,1]},Ue={h:[20.14,90,164.25,237.53,380.14],e:[.8,.7,1,1.2,.8],H:[0,100,200,300,400]},Ve=180/Math.PI,Ge=Math.PI/180;function We(e,r){const t=e.map((e=>{const t=_(r*Math.abs(e)*.01,.42);return 400*b(t,e)/(t+27.13)}));return t}function Ze(e,r,n,a,o){const s={};s.discounting=o,s.refWhite=e,s.surround=a;const i=e.map((e=>100*e));s.la=r,s.yb=n;const l=i[1],c=t(Ne,i),u=(a=qe[s.surround])[0];s.c=a[1],s.nc=a[2];const d=(1/(5*s.la+1))**4;s.fl=d*s.la+.1*(1-d)*(1-d)*Math.cbrt(5*s.la),s.flRoot=s.fl**.25,s.n=s.yb/l,s.z=1.48+Math.sqrt(s.n),s.nbb=.725*s.n**-.2,s.ncb=s.nbb;const f=o?1:Math.max(Math.min(u*(1-1/3.6*Math.exp((-s.la-42)/92)),1),0);s.dRgb=c.map((e=>p(1,l/e,f))),s.dRgbInv=s.dRgb.map((e=>1/e));const h=c.map(((e,r)=>e*s.dRgb[r])),g=We(h,s.fl);return s.aW=s.nbb*(2*g[0]+g[1]+.05*g[2]),s}const Ye=Ze(Be,64/Math.PI*.2,20,"average",!1);function Xe(e,r){if(!(void 0!==e.J^void 0!==e.Q))throw new Error("Conversion requires one and only one: 'J' or 'Q'");if(!(void 0!==e.C^void 0!==e.M^void 0!==e.s))throw new Error("Conversion requires one and only one: 'C', 'M' or 's'");if(!(void 0!==e.h^void 0!==e.H))throw new Error("Conversion requires one and only one: 'h' or 'H'");if(0===e.J||0===e.Q)return[0,0,0];let n=0;n=void 0!==e.h?V(e.h)*Ge:function(e){let r=(e%400+400)%400;const t=Math.floor(.01*r);r%=100;const[n,a]=Ue.h.slice(t,t+2),[o,s]=Ue.e.slice(t,t+2);return V((r*(s*n-o*a)-100*n*s)/(r*(s-o)-100*s))}(e.H)*Ge;const a=Math.cos(n),o=Math.sin(n);let s=0;void 0!==e.J?s=.1*_(e.J,.5):void 0!==e.Q&&(s=.25*r.c*e.Q/((r.aW+4)*r.flRoot));let i=0;void 0!==e.C?i=e.C/s:void 0!==e.M?i=e.M/r.flRoot/s:void 0!==e.s&&(i=4e-4*e.s**2*(r.aW+4)/r.c);const l=_(i*Math.pow(1.64-Math.pow(.29,r.n),-.73),10/9),c=.25*(Math.cos(n+2)+3.8),u=r.aW*_(s,2/r.c/r.z),d=5e4/13*r.nc*r.ncb*c,p=u/r.nbb,f=23*(p+.305)*w(l,23*d+l*(11*a+108*o)),h=function(e,r){const t=100/r*2588.068098016295;return e.map((e=>{const r=Math.abs(e);return b(t*_(r/(400-r),Re),e)}))}(t(De,[p,f*a,f*o]).map((e=>1*e/1403)),r.fl);return t(Oe,h.map(((e,t)=>e*r.dRgbInv[t]))).map((e=>e/100))}function Je(e,r){const n=e.map((e=>100*e)),a=We(t(Ne,n).map(((e,t)=>e*r.dRgb[t])),r.fl),o=a[0]+(-12*a[1]+a[2])/11,s=(a[0]+a[1]-2*a[2])/9,i=(Math.atan2(s,o)%He+He)%He,l=.25*(Math.cos(i+2)+3.8),c=_(5e4/13*r.nc*r.ncb*w(l*Math.sqrt(o**2+s**2),a[0]+a[1]+1.05*a[2]+.305),.9)*Math.pow(1.64-Math.pow(.29,r.n),.73),u=_(r.nbb*(2*a[0]+a[1]+.05*a[2])/r.aW,.5*r.c*r.z),d=100*_(u,2),p=4/r.c*u*(r.aW+4)*r.flRoot,f=c*u,h=f*r.flRoot,g=V(i*Ve),m=function(e){let r=V(e);r<=Ue.h[0]&&(r+=360);const t=v(Ue.h,r)-1,[n,a]=Ue.h.slice(t,t+2),[o,s]=Ue.e.slice(t,t+2),i=(r-n)/o;return Ue.H[t]+100*i/(i+(a-r)/s)}(g);return{J:d,C:f,h:g,s:50*_(r.c*c/(r.aW+4),.5),Q:p,M:h,H:m}}var Ke=new A({id:"cam16-jmh",cssId:"--cam16-jmh",name:"CAM16-JMh",coords:{j:{refRange:[0,100],name:"J"},m:{refRange:[0,105],name:"Colorfulness"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:$,fromBase(e){const r=Je(e,Ye);return[r.J,r.M,r.h]},toBase:e=>Xe({J:e[0],M:e[1],h:e[2]},Ye)});const Qe=x.D65,er=24389/27;function rr(e){return e>8?Math.pow((e+16)/116,3):e/er}function tr(e,r){const t=116*((n=e[1])>.008856451679035631?Math.cbrt(n):(er*n+16)/116)-16;var n;if(0===t)return[0,0,0];const a=Je(e,nr);return[V(a.h),a.C,t]}const nr=Ze(Qe,200/Math.PI*rr(50),100*rr(50),"average",!1);var ar=new A({id:"hct",name:"HCT",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},c:{refRange:[0,145],name:"Colorfulness"},t:{refRange:[0,100],name:"Tone"}},base:$,fromBase:e=>tr(e),toBase:e=>function(e,r){let[t,n,a]=e,o=[],s=0;if(0===a)return[0,0,0];let i=rr(a);s=a>0?.00379058511492914*a**2+.608983189401032*a+.9155088574762233:9514440756550361e-21*a**2+.08693057439788597*a-21.928975842194614;let l=0,c=1/0;for(;l<=15;){o=Xe({J:s,C:n,h:t},r);const e=Math.abs(o[1]-i);if(e<c){if(e<=2e-12)return o;c=e}s-=(o[1]-i)*s/(2*o[1]),l+=1}return Xe({J:s,C:n,h:t},r)}(e,nr),formats:{color:{id:"--hct",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}});const or=Math.PI/180,sr=[1,.007,.0228];function ir(e){e[1]<0&&(e=ar.fromBase(ar.toBase(e)));const r=Math.log(Math.max(1+sr[2]*e[1]*nr.flRoot,1))/sr[2],t=e[0]*or,n=r*Math.cos(t),a=r*Math.sin(t);return[e[2],n,a]}var lr={deltaE76:function(e,r){return ie(e,r,"lab")},deltaECMC:function(e,r,{l:t=2,c:n=1}={}){[e,r]=E([e,r]);let[a,o,s]=U.from(e),[,i,l]=G.from(U,[a,o,s]),[c,u,d]=U.from(r),p=G.from(U,[c,u,d])[1];i<0&&(i=0),p<0&&(p=0);let f=a-c,h=i-p,g=(o-u)**2+(s-d)**2-h**2,m=.511;a>=16&&(m=.040975*a/(1+.01765*a));let b,_=.0638*i/(1+.0131*i)+.638;Number.isNaN(l)&&(l=0),b=l>=164&&l<=345?.56+Math.abs(.2*Math.cos((l+168)*le)):.36+Math.abs(.4*Math.cos((l+35)*le));let w=Math.pow(i,4),v=Math.sqrt(w/(w+1900)),y=(f/(t*m))**2;return y+=(h/(n*_))**2,y+=g/(_*(v*b+1-v))**2,Math.sqrt(y)},deltaE2000:K,deltaEJz:function(e,r){[e,r]=E([e,r]);let[t,n,a]=xe.from(e),[o,s,i]=xe.from(r),l=t-o,c=n-s;Number.isNaN(a)&&Number.isNaN(i)?(a=0,i=0):Number.isNaN(a)?a=i:Number.isNaN(i)&&(i=a);let u=a-i,d=2*Math.sqrt(n*s)*Math.sin(u/2*(Math.PI/180));return Math.sqrt(l**2+c**2+d**2)},deltaEITP:function(e,r){[e,r]=E([e,r]);let[t,n,a]=Ie.from(e),[o,s,i]=Ie.from(r);return 720*Math.sqrt((t-o)**2+.25*(n-s)**2+(a-i)**2)},deltaEOK:ae,deltaEHCT:function(e,r){[e,r]=E([e,r]);let[t,n,a]=ir(ar.from(e)),[o,s,i]=ir(ar.from(r));return Math.sqrt((t-o)**2+(n-s)**2+(a-i)**2)}};function cr(e){const r=e?Math.floor(Math.log10(Math.abs(e))):0;return Math.max(parseFloat("1e"+(r-2)),1e-6)}const ur={hct:{method:"hct.c",jnd:2,deltaEMethod:"hct",blackWhiteClamp:{}},"hct-tonal":{method:"hct.c",jnd:0,deltaEMethod:"hct",blackWhiteClamp:{channel:"hct.t",min:0,max:100}}};function dr(e,{method:r=M.gamut_mapping,space:t,deltaEMethod:a="",jnd:o=2,blackWhiteClamp:i={}}={}){if(e=E(e),n(arguments[1])?t=arguments[1]:t||(t=e.space),oe(e,t=A.get(t),{epsilon:0}))return e;let l;if("css"===r)l=fr(e,{space:t});else{if("clip"===r||oe(e,t))l=hr(e,t);else{Object.prototype.hasOwnProperty.call(ur,r)&&({method:r,jnd:o,deltaEMethod:a,blackWhiteClamp:i}=ur[r]);let n=K;if(""!==a)for(let e in lr)if("deltae"+a.toLowerCase()===e.toLowerCase()){n=lr[e];break}let c=dr(hr(e,t),{method:"clip",space:t});if(n(e,c)>o){if(3===Object.keys(i).length){let r=A.resolveCoord(i.channel),t=B(hr(e,r.space),r.id);if(s(t)&&(t=0),t>=i.max)return hr({space:"xyz-d65",coords:x.D65},e.space);if(t<=i.min)return hr({space:"xyz-d65",coords:[0,0,0]},e.space)}let a=A.resolveCoord(r),c=a.space,u=a.id,d=hr(e,c);d.coords.forEach(((e,r)=>{s(e)&&(d.coords[r]=0)}));let p=(a.range||a.refRange)[0],f=cr(o),h=p,g=B(d,u);for(;g-h>f;){let e=se(d);e=dr(e,{space:t,method:"clip"}),n(d,e)-o<f?h=B(d,u):g=B(d,u),H(d,u,(h+g)/2)}l=hr(d,t)}else l=c}if("clip"===r||!oe(l,t,{epsilon:0})){let e=Object.values(t.coords).map((e=>e.range||[]));l.coords=l.coords.map(((r,t)=>{let[n,a]=e[t];return void 0!==n&&(r=Math.max(n,r)),void 0!==a&&(r=Math.min(r,a)),r}))}}return t!==e.space&&(l=hr(l,e.space)),e.coords=l.coords,e}dr.returns="color";const pr={WHITE:{space:ne,coords:[1,0,0]},BLACK:{space:ne,coords:[0,0,0]}};function fr(e,{space:r}={}){const t=.02,n=1e-4;e=E(e),r||(r=e.space),r=A.get(r);const a=A.get("oklch");if(r.isUnbounded)return hr(e,r);const o=hr(e,a);let s=o.coords[0];if(s>=1){const t=hr(pr.WHITE,r);return t.alpha=e.alpha,hr(t,r)}if(s<=0){const t=hr(pr.BLACK,r);return t.alpha=e.alpha,hr(t,r)}if(oe(o,r,{epsilon:0}))return hr(o,r);function i(e){const t=hr(e,r),n=Object.values(r.coords);return t.coords=t.coords.map(((e,r)=>{if("range"in n[r]){const[t,a]=n[r].range;return m(t,e,a)}return e})),t}let l=0,c=o.coords[1],u=!0,d=se(o),p=i(d),f=ae(p,d);if(f<t)return p;for(;c-l>n;){const e=(l+c)/2;if(d.coords[1]=e,u&&oe(d,r,{epsilon:0}))l=e;else if(p=i(d),f=ae(p,d),f<t){if(t-f<n)break;u=!1,l=e}else c=e}return p}function hr(e,r,{inGamut:t}={}){e=E(e);let n=(r=A.get(r)).from(e),a={space:r,coords:n,alpha:e.alpha};return t&&(a=dr(a,!0===t?void 0:t)),a}function gr(e,{precision:r=M.precision,format:t="default",inGamut:n=!0,...a}={}){let s,i=t;t=(e=E(e)).space.getFormat(t)??e.space.getFormat("default")??A.DEFAULT_FORMAT;let l=e.coords.slice();if(n||=t.toGamut,n&&!oe(e)&&(l=dr(se(e),!0===n?void 0:n).coords),"custom"===t.type){if(a.precision=r,!t.serialize)throw new TypeError(`format ${i} can only be used to parse colors, not for serialization`);s=t.serialize(l,e.alpha,a)}else{let n=t.name||"color";t.serializeCoords?l=t.serializeCoords(l,r):null!==r&&(l=l.map((e=>o(e,{precision:r}))));let a=[...l];if("color"===n){let r=t.id||t.ids?.[0]||e.space.id;a.unshift(r)}let i=e.alpha;null!==r&&(i=o(i,{precision:r}));let c=e.alpha>=1||t.noAlpha?"":`${t.commas?",":" /"} ${i}`;s=`${n}(${a.join(t.commas?", ":" ")}${c})`}return s}hr.returns="color";var mr=new F({id:"rec2020-linear",cssId:"--rec2020-linear",name:"Linear REC.2020",white:"D65",toXYZ_M:[[.6369580483012914,.14461690358620832,.1688809751641721],[.2627002120112671,.6779980715188708,.05930171646986196],[0,.028072693049087428,1.060985057710791]],fromXYZ_M:[[1.716651187971268,-.355670783776392,-.25336628137366],[-.666684351832489,1.616481236634939,.0157685458139111],[.017639857445311,-.042770613257809,.942103121235474]]});const br=1.09929682680944,_r=.018053968510807;var wr=new F({id:"rec2020",name:"REC.2020",base:mr,toBase:e=>e.map((function(e){return e<4.5*_r?e/4.5:Math.pow((e+br-1)/br,1/.45)})),fromBase:e=>e.map((function(e){return e>=_r?br*Math.pow(e,.45)-(br-1):4.5*e}))});var vr=new F({id:"p3-linear",cssId:"--display-p3-linear",name:"Linear P3",white:"D65",toXYZ_M:[[.4865709486482162,.26566769316909306,.1982172852343625],[.2289745640697488,.6917385218365064,.079286914093745],[0,.04511338185890264,1.043944368900976]],fromXYZ_M:[[2.493496911941425,-.9313836179191239,-.40271078445071684],[-.8294889695615747,1.7626640603183463,.023624685841943577],[.03584583024378447,-.07617238926804182,.9568845240076872]]});const yr=[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]];var kr=new F({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],fromXYZ_M:yr}),Mr={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[.6,50/255,.8],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,.6],lightslategrey:[119/255,136/255,.6],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[.4,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,.8],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[.4,.2,.6],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]};let xr=Array(3).fill("<percentage> | <number>[0, 255]"),Pr=Array(3).fill("<number>[0, 255]");var Cr=new F({id:"srgb",name:"sRGB",base:kr,fromBase:e=>e.map((e=>{let r=e<0?-1:1,t=e*r;return t>.0031308?r*(1.055*t**(1/2.4)-.055):12.92*e})),toBase:e=>e.map((e=>{let r=e<0?-1:1,t=e*r;return t<=.04045?e/12.92:r*((t+.055)/1.055)**2.4})),formats:{rgb:{coords:xr},rgb_number:{name:"rgb",commas:!0,coords:Pr,noAlpha:!0},color:{},rgba:{coords:xr,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:Pr},hex:{type:"custom",toGamut:!0,test:e=>/^#([a-f0-9]{3,4}){1,2}$/i.test(e),parse(e){e.length<=5&&(e=e.replace(/[a-f0-9]/gi,"$&$&"));let r=[];return e.replace(/[a-f0-9]{2}/gi,(e=>{r.push(parseInt(e,16)/255)})),{spaceId:"srgb",coords:r.slice(0,3),alpha:r.slice(3)[0]}},serialize:(e,r,{collapse:t=!0}={})=>{r<1&&e.push(r),e=e.map((e=>Math.round(255*e)));let n=t&&e.every((e=>e%17==0)),a=e.map((e=>n?(e/17).toString(16):e.toString(16).padStart(2,"0"))).join("");return"#"+a}},keyword:{type:"custom",test:e=>/^[a-z]+$/i.test(e),parse(e){let r={spaceId:"srgb",coords:null,alpha:1};if("transparent"===(e=e.toLowerCase())?(r.coords=Mr.black,r.alpha=0):r.coords=Mr[e],r.coords)return r}}}}),jr=new F({id:"p3",cssId:"display-p3",name:"P3",base:vr,fromBase:Cr.fromBase,toBase:Cr.toBase});let Sr;if(M.display_space=Cr,"undefined"!=typeof CSS&&CSS.supports)for(let e of[U,wr,jr]){let r=e.getMinCoords(),t=gr({space:e,coords:r,alpha:1});if(CSS.supports("color",t)){M.display_space=e;break}}function zr(e){return B(e,[$,"y"])}function Er(e,r){H(e,[$,"y"],r)}var Ar=Object.freeze({__proto__:null,getLuminance:zr,register:function(e){Object.defineProperty(e.prototype,"luminance",{get(){return zr(this)},set(e){Er(this,e)}})},setLuminance:Er});function Tr(e){return e>=.022?e:e+(.022-e)**1.414}function Lr(e){let r=e<0?-1:1,t=Math.abs(e);return r*Math.pow(t,2.4)}const $r=24/116,Fr=24389/27;let Ir=x.D65;var Br=new A({id:"lab-d65",name:"Lab D65",coords:{l:{refRange:[0,100],name:"Lightness"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:Ir,base:$,fromBase(e){let r=e.map(((e,r)=>e/Ir[r])).map((e=>e>.008856451679035631?Math.cbrt(e):(Fr*e+16)/116));return[116*r[1]-16,500*(r[0]-r[1]),200*(r[1]-r[2])]},toBase(e){let r=[];return r[1]=(e[0]+16)/116,r[0]=e[1]/500+r[1],r[2]=r[1]-e[2]/200,[r[0]>$r?Math.pow(r[0],3):(116*r[0]-16)/Fr,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/Fr,r[2]>$r?Math.pow(r[2],3):(116*r[2]-16)/Fr].map(((e,r)=>e*Ir[r]))},formats:{"lab-d65":{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});const Rr=.5*Math.pow(5,.5)+.5;var Hr=Object.freeze({__proto__:null,contrastAPCA:function(e,r){let t,n,a,o,s,i;r=E(r),e=E(e),r=hr(r,"srgb"),[o,s,i]=r.coords;let l=.2126729*Lr(o)+.7151522*Lr(s)+.072175*Lr(i);e=hr(e,"srgb"),[o,s,i]=e.coords;let c=.2126729*Lr(o)+.7151522*Lr(s)+.072175*Lr(i),u=Tr(l),d=Tr(c),p=d>u;return Math.abs(d-u)<5e-4?n=0:p?(t=d**.56-u**.57,n=1.14*t):(t=d**.65-u**.62,n=1.14*t),a=Math.abs(n)<.1?0:n>0?n-.027:n+.027,100*a},contrastDeltaPhi:function(e,r){e=E(e),r=E(r);let t=B(e,[Br,"l"]),n=B(r,[Br,"l"]),a=Math.abs(Math.pow(t,Rr)-Math.pow(n,Rr)),o=Math.pow(a,1/Rr)*Math.SQRT2-40;return o<7.5?0:o},contrastLstar:function(e,r){e=E(e),r=E(r);let t=B(e,[U,"l"]),n=B(r,[U,"l"]);return Math.abs(t-n)},contrastMichelson:function(e,r){e=E(e),r=E(r);let t=Math.max(zr(e),0),n=Math.max(zr(r),0);n>t&&([t,n]=[n,t]);let a=t+n;return 0===a?0:(t-n)/a},contrastWCAG21:function(e,r){e=E(e),r=E(r);let t=Math.max(zr(e),0),n=Math.max(zr(r),0);return n>t&&([t,n]=[n,t]),(t+.05)/(n+.05)},contrastWeber:function(e,r){e=E(e),r=E(r);let t=Math.max(zr(e),0),n=Math.max(zr(r),0);return n>t&&([t,n]=[n,t]),0===n?5e4:(t-n)/n}});function Nr(e){let[r,t,n]=I(e,$),a=r+15*t+3*n;return[4*r/a,9*t/a]}function Or(e){let[r,t,n]=I(e,$),a=r+t+n;return[r/a,t/a]}var Dr=Object.freeze({__proto__:null,register:function(e){Object.defineProperty(e.prototype,"uv",{get(){return Nr(this)}}),Object.defineProperty(e.prototype,"xy",{get(){return Or(this)}})},uv:Nr,xy:Or});function qr(e,r,t={}){n(t)&&(t={method:t});let{method:a=M.deltaE,...o}=t;for(let t in lr)if("deltae"+a.toLowerCase()===t.toLowerCase())return lr[t](e,r,o);throw new TypeError(`Unknown deltaE method: ${a}`)}var Ur=Object.freeze({__proto__:null,darken:function(e,r=.25){return H(e,[A.get("oklch","lch"),"l"],(e=>e*(1-r)))},lighten:function(e,r=.25){return H(e,[A.get("oklch","lch"),"l"],(e=>e*(1+r)))}});function Vr(e,r,t=.5,n={}){return[e,r]=[E(e),E(r)],"object"===a(t)&&([t,n]=[.5,t]),Wr(e,r,n)(t)}function Gr(e,r,t={}){let n;Zr(e)&&([n,t]=[e,r],[e,r]=n.rangeArgs.colors);let{maxDeltaE:a,deltaEMethod:o,steps:s=2,maxSteps:i=1e3,...l}=t;n||([e,r]=[E(e),E(r)],n=Wr(e,r,l));let c=qr(e,r),u=a>0?Math.max(s,Math.ceil(c/a)+1):s,d=[];if(void 0!==i&&(u=Math.min(u,i)),1===u)d=[{p:.5,color:n(.5)}];else{let e=1/(u-1);d=Array.from({length:u},((r,t)=>{let a=t*e;return{p:a,color:n(a)}}))}if(a>0){let e=d.reduce(((e,r,t)=>{if(0===t)return 0;let n=qr(r.color,d[t-1].color,o);return Math.max(e,n)}),0);for(;e>a;){e=0;for(let r=1;r<d.length&&d.length<i;r++){let t=d[r-1],a=d[r],o=(a.p+t.p)/2,s=n(o);e=Math.max(e,qr(s,t.color),qr(s,a.color)),d.splice(r,0,{p:o,color:n(o)}),r++}}}return d=d.map((e=>e.color)),d}function Wr(e,r,t={}){if(Zr(e)){let[t,n]=[e,r];return Wr(...t.rangeArgs.colors,{...t.rangeArgs.options,...n})}let{space:n,outputSpace:a,progression:o,premultiplied:s}=t;e=E(e),r=E(r),e=se(e),r=se(r);let i={colors:[e,r],options:t};if(n=n?A.get(n):A.registry[M.interpolationSpace]||e.space,a=a?A.get(a):n,e=hr(e,n),r=hr(r,n),e=dr(e),r=dr(r),n.coords.h&&"angle"===n.coords.h.type){let a=t.hue=t.hue||"shorter",o=[n,"h"],[s,i]=[B(e,o),B(r,o)];isNaN(s)&&!isNaN(i)?s=i:isNaN(i)&&!isNaN(s)&&(i=s),[s,i]=function(e,r){if("raw"===e)return r;let[t,n]=r.map(V),a=n-t;return"increasing"===e?a<0&&(n+=360):"decreasing"===e?a>0&&(t+=360):"longer"===e?-180<a&&a<180&&(a>0?t+=360:n+=360):"shorter"===e&&(a>180?t+=360:a<-180&&(n+=360)),[t,n]}(a,[s,i]),H(e,o,s),H(r,o,i)}return s&&(e.coords=e.coords.map((r=>r*e.alpha)),r.coords=r.coords.map((e=>e*r.alpha))),Object.assign((t=>{t=o?o(t):t;let i=e.coords.map(((e,n)=>p(e,r.coords[n],t))),l=p(e.alpha,r.alpha,t),c={space:n,coords:i,alpha:l};return s&&(c.coords=c.coords.map((e=>e/l))),a!==n&&(c=hr(c,a)),c}),{rangeArgs:i})}function Zr(e){return"function"===a(e)&&!!e.rangeArgs}M.interpolationSpace="lab";var Yr=Object.freeze({__proto__:null,isRange:Zr,mix:Vr,range:Wr,register:function(e){e.defineFunction("mix",Vr,{returns:"color"}),e.defineFunction("range",Wr,{returns:"function<color>"}),e.defineFunction("steps",Gr,{returns:"array<color>"})},steps:Gr}),Xr=new A({id:"hsl",name:"HSL",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:Cr,fromBase:e=>{let r=Math.max(...e),t=Math.min(...e),[n,a,o]=e,[s,i,l]=[NaN,0,(t+r)/2],c=r-t;if(0!==c){switch(i=0===l||1===l?0:(r-l)/Math.min(l,1-l),r){case n:s=(a-o)/c+(a<o?6:0);break;case a:s=(o-n)/c+2;break;case o:s=(n-a)/c+4}s*=60}return i<0&&(s+=180,i=Math.abs(i)),s>=360&&(s-=360),[s,100*i,100*l]},toBase:e=>{let[r,t,n]=e;function a(e){let a=(e+r/30)%12,o=t*Math.min(n,1-n);return n-o*Math.max(-1,Math.min(a-3,9-a,1))}return r%=360,r<0&&(r+=360),t/=100,n/=100,[a(0),a(8),a(4)]},formats:{hsl:{coords:["<number> | <angle>","<percentage>","<percentage>"]},hsla:{coords:["<number> | <angle>","<percentage>","<percentage>"],commas:!0,lastAlpha:!0}}}),Jr=new A({id:"hsv",name:"HSV",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},v:{range:[0,100],name:"Value"}},base:Xr,fromBase(e){let[r,t,n]=e;t/=100,n/=100;let a=n+t*Math.min(n,1-n);return[r,0===a?0:200*(1-n/a),100*a]},toBase(e){let[r,t,n]=e;t/=100,n/=100;let a=n*(1-t/2);return[r,0===a||1===a?0:(n-a)/Math.min(a,1-a)*100,100*a]},formats:{color:{id:"--hsv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}}),Kr=new A({id:"hwb",name:"HWB",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},w:{range:[0,100],name:"Whiteness"},b:{range:[0,100],name:"Blackness"}},base:Jr,fromBase(e){let[r,t,n]=e;return[r,n*(100-t)/100,100-n]},toBase(e){let[r,t,n]=e;t/=100,n/=100;let a=t+n;if(a>=1){return[r,0,100*(t/a)]}let o=1-n;return[r,100*(0===o?0:1-t/o),100*o]},formats:{hwb:{coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}});var Qr=new F({id:"a98rgb-linear",cssId:"--a98-rgb-linear",name:"Linear Adobe® 98 RGB compatible",white:"D65",toXYZ_M:[[.5766690429101305,.1855582379065463,.1882286462349947],[.29734497525053605,.6273635662554661,.07529145849399788],[.02703136138641234,.07068885253582723,.9913375368376388]],fromXYZ_M:[[2.0415879038107465,-.5650069742788596,-.34473135077832956],[-.9692436362808795,1.8759675015077202,.04155505740717557],[.013444280632031142,-.11836239223101838,1.0151749943912054]]}),et=new F({id:"a98rgb",cssId:"a98-rgb",name:"Adobe® 98 RGB compatible",base:Qr,toBase:e=>e.map((e=>Math.pow(Math.abs(e),563/256)*Math.sign(e))),fromBase:e=>e.map((e=>Math.pow(Math.abs(e),256/563)*Math.sign(e)))});var rt=new F({id:"prophoto-linear",cssId:"--prophoto-rgb-linear",name:"Linear ProPhoto",white:"D50",base:N,toXYZ_M:[[.7977666449006423,.13518129740053308,.0313477341283922],[.2880748288194013,.711835234241873,8993693872564e-17],[0,0,.8251046025104602]],fromXYZ_M:[[1.3457868816471583,-.25557208737979464,-.05110186497554526],[-.5446307051249019,1.5082477428451468,.02052744743642139],[0,0,1.2119675456389452]]});var tt=new F({id:"prophoto",cssId:"prophoto-rgb",name:"ProPhoto",base:rt,toBase:e=>e.map((e=>e<.03125?e/16:e**1.8)),fromBase:e=>e.map((e=>e>=.001953125?e**(1/1.8):16*e))}),nt=new A({id:"oklch",name:"Oklch",coords:{l:{refRange:[0,1],name:"Lightness"},c:{refRange:[0,.4],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},white:"D65",base:ne,fromBase(e){let r,[t,n,a]=e;const o=2e-4;return r=Math.abs(n)<o&&Math.abs(a)<o?NaN:180*Math.atan2(a,n)/Math.PI,[t,Math.sqrt(n**2+a**2),V(r)]},toBase(e){let r,t,[n,a,o]=e;return isNaN(o)?(r=0,t=0):(r=a*Math.cos(o*Math.PI/180),t=a*Math.sin(o*Math.PI/180)),[n,r,t]},formats:{oklch:{coords:["<percentage> | <number>","<number> | <percentage>[0,1]","<number> | <angle>"]}}});let at=x.D65;const ot=24389/27,[st,it]=Nr({space:$,coords:at});var lt=new A({id:"luv",name:"Luv",coords:{l:{refRange:[0,100],name:"Lightness"},u:{refRange:[-215,215]},v:{refRange:[-215,215]}},white:at,base:$,fromBase(e){let r=[i(e[0]),i(e[1]),i(e[2])],t=r[1],[n,a]=Nr({space:$,coords:r});if(!Number.isFinite(n)||!Number.isFinite(a))return[0,0,0];let o=t<=.008856451679035631?ot*t:116*Math.cbrt(t)-16;return[o,13*o*(n-st),13*o*(a-it)]},toBase(e){let[r,t,n]=e;if(0===r||s(r))return[0,0,0];t=i(t),n=i(n);let a=t/(13*r)+st,o=n/(13*r)+it,l=r<=8?r/ot:Math.pow((r+16)/116,3);return[l*(9*a/(4*o)),l,l*((12-3*a-20*o)/(4*o))]},formats:{color:{id:"--luv",coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}}),ct=new A({id:"lchuv",name:"LChuv",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,220],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:lt,fromBase(e){let r,[t,n,a]=e;return r=Math.abs(n)<.02&&Math.abs(a)<.02?NaN:180*Math.atan2(a,n)/Math.PI,[t,Math.sqrt(n**2+a**2),V(r)]},toBase(e){let[r,t,n]=e;return t<0&&(t=0),isNaN(n)&&(n=0),[r,t*Math.cos(n*Math.PI/180),t*Math.sin(n*Math.PI/180)]},formats:{color:{id:"--lchuv",coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}});const ut=yr[0][0],dt=yr[0][1],pt=yr[0][2],ft=yr[1][0],ht=yr[1][1],gt=yr[1][2],mt=yr[2][0],bt=yr[2][1],_t=yr[2][2];function wt(e,r,t){const n=r/(Math.sin(t)-e*Math.cos(t));return n<0?1/0:n}function vt(e){const r=Math.pow(e+16,3)/1560896,t=r>.008856451679035631?r:e/903.2962962962963,n=t*(284517*ut-94839*pt),a=t*(838422*pt+769860*dt+731718*ut),o=t*(632260*pt-126452*dt),s=t*(284517*ft-94839*gt),i=t*(838422*gt+769860*ht+731718*ft),l=t*(632260*gt-126452*ht),c=t*(284517*mt-94839*_t),u=t*(838422*_t+769860*bt+731718*mt),d=t*(632260*_t-126452*bt);return{r0s:n/o,r0i:a*e/o,r1s:n/(o+126452),r1i:(a-769860)*e/(o+126452),g0s:s/l,g0i:i*e/l,g1s:s/(l+126452),g1i:(i-769860)*e/(l+126452),b0s:c/d,b0i:u*e/d,b1s:c/(d+126452),b1i:(u-769860)*e/(d+126452)}}function yt(e,r){const t=r/360*Math.PI*2,n=wt(e.r0s,e.r0i,t),a=wt(e.r1s,e.r1i,t),o=wt(e.g0s,e.g0i,t),s=wt(e.g1s,e.g1i,t),i=wt(e.b0s,e.b0i,t),l=wt(e.b1s,e.b1i,t);return Math.min(n,a,o,s,i,l)}var kt=new A({id:"hsluv",name:"HSLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:ct,gamutSpace:Cr,fromBase(e){let r,[t,n,a]=[i(e[0]),i(e[1]),i(e[2])];if(t>99.9999999)r=0,t=100;else if(t<1e-8)r=0,t=0;else{r=n/yt(vt(t),a)*100}return[a,r,t]},toBase(e){let r,[t,n,a]=[i(e[0]),i(e[1]),i(e[2])];if(a>99.9999999)a=100,r=0;else if(a<1e-8)a=0,r=0;else{r=yt(vt(a),t)/100*n}return[a,r,t]},formats:{color:{id:"--hsluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}});function Mt(e,r){return Math.abs(r)/Math.sqrt(Math.pow(e,2)+1)}function xt(e){let r=Mt(e.r0s,e.r0i),t=Mt(e.r1s,e.r1i),n=Mt(e.g0s,e.g0i),a=Mt(e.g1s,e.g1i),o=Mt(e.b0s,e.b0i),s=Mt(e.b1s,e.b1i);return Math.min(r,t,n,a,o,s)}yr[0][0],yr[0][1],yr[0][2],yr[1][0],yr[1][1],yr[1][2],yr[2][0],yr[2][1],yr[2][2];var Pt=new A({id:"hpluv",name:"HPLuv",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:ct,gamutSpace:"self",fromBase(e){let r,[t,n,a]=[i(e[0]),i(e[1]),i(e[2])];if(t>99.9999999)r=0,t=100;else if(t<1e-8)r=0,t=0;else{r=n/xt(vt(t))*100}return[a,r,t]},toBase(e){let r,[t,n,a]=[i(e[0]),i(e[1]),i(e[2])];if(a>99.9999999)a=100,r=0;else if(a<1e-8)a=0,r=0;else{r=xt(vt(a))/100*n}return[a,r,t]},formats:{color:{id:"--hpluv",coords:["<number> | <angle>","<percentage> | <number>","<percentage> | <number>"]}}});const Ct=2610/16384,jt=32/2523,St=.8359375,zt=2413/128,Et=18.6875;var At=new F({id:"rec2100pq",cssId:"rec2100-pq",name:"REC.2100-PQ",base:mr,toBase:e=>e.map((function(e){return 1e4*(Math.max(e**jt-St,0)/(zt-Et*e**jt))**6.277394636015326/203})),fromBase:e=>e.map((function(e){let r=Math.max(203*e/1e4,0);return((St+zt*r**Ct)/(1+Et*r**Ct))**78.84375}))});const Tt=.17883277,Lt=.28466892,$t=.55991073,Ft=3.7743;var It=new F({id:"rec2100hlg",cssId:"rec2100-hlg",name:"REC.2100-HLG",referred:"scene",base:mr,toBase:e=>e.map((function(e){return e<=.5?e**2/3*Ft:(Math.exp((e-$t)/Tt)+Lt)/12*Ft})),fromBase:e=>e.map((function(e){return(e/=Ft)<=1/12?Math.sqrt(3*e):Tt*Math.log(12*e-Lt)+$t}))});const Bt={};function Rt({id:e,toCone_M:r,fromCone_M:t}){Bt[e]=arguments[0]}function Ht(e,r,n="Bradford"){let a=Bt[n],[o,s,i]=t(a.toCone_M,e),[l,c,u]=t(a.toCone_M,r),d=t([[l/o,0,0],[0,c/s,0],[0,0,u/i]],a.toCone_M);return t(a.fromCone_M,d)}k.add("chromatic-adaptation-start",(e=>{e.options.method&&(e.M=Ht(e.W1,e.W2,e.options.method))})),k.add("chromatic-adaptation-end",(e=>{e.M||(e.M=Ht(e.W1,e.W2,e.options.method))})),Rt({id:"von Kries",toCone_M:[[.40024,.7076,-.08081],[-.2263,1.16532,.0457],[0,0,.91822]],fromCone_M:[[1.8599363874558397,-1.1293816185800916,.21989740959619328],[.3611914362417676,.6388124632850422,-6370596838649899e-21],[0,0,1.0890636230968613]]}),Rt({id:"Bradford",toCone_M:[[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]],fromCone_M:[[.9869929054667121,-.14705425642099013,.15996265166373122],[.4323052697233945,.5183602715367774,.049291228212855594],[-.00852866457517732,.04004282165408486,.96848669578755]]}),Rt({id:"CAT02",toCone_M:[[.7328,.4296,-.1624],[-.7036,1.6975,.0061],[.003,.0136,.9834]],fromCone_M:[[1.0961238208355142,-.27886900021828726,.18274517938277307],[.4543690419753592,.4735331543074117,.07209780371722911],[-.009627608738429355,-.00569803121611342,1.0153256399545427]]}),Rt({id:"CAT16",toCone_M:[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],fromCone_M:[[1.862067855087233,-1.0112546305316845,.14918677544445172],[.3875265432361372,.6214474419314753,-.008973985167612521],[-.01584149884933386,-.03412293802851557,1.0499644368778496]]}),Object.assign(x,{A:[1.0985,1,.35585],C:[.98074,1,1.18232],D55:[.95682,1,.92149],D75:[.94972,1,1.22638],E:[1,1,1],F2:[.99186,1,.67393],F7:[.95041,1,1.08747],F11:[1.00962,1,.6435]}),x.ACES=[.32168/.33767,1,.34065/.33767];var Nt=new F({id:"acescg",cssId:"--acescg",name:"ACEScg",coords:{r:{range:[0,65504],name:"Red"},g:{range:[0,65504],name:"Green"},b:{range:[0,65504],name:"Blue"}},referred:"scene",white:x.ACES,toXYZ_M:[[.6624541811085053,.13400420645643313,.1561876870049078],[.27222871678091454,.6740817658111484,.05368951740793705],[-.005574649490394108,.004060733528982826,1.0103391003129971]],fromXYZ_M:[[1.6410233796943257,-.32480329418479,-.23642469523761225],[-.6636628587229829,1.6153315916573379,.016756347685530137],[.011721894328375376,-.008284441996237409,.9883948585390215]]});const Ot=2**-16,Dt=-.35828683,qt=(Math.log2(65504)+9.72)/17.52;var Ut=new F({id:"acescc",cssId:"--acescc",name:"ACEScc",coords:{r:{range:[Dt,qt],name:"Red"},g:{range:[Dt,qt],name:"Green"},b:{range:[Dt,qt],name:"Blue"}},referred:"scene",base:Nt,toBase:e=>e.map((function(e){return e<=-.3013698630136986?2*(2**(17.52*e-9.72)-Ot):e<qt?2**(17.52*e-9.72):65504})),fromBase:e=>e.map((function(e){return e<=0?(Math.log2(Ot)+9.72)/17.52:e<Ot?(Math.log2(Ot+.5*e)+9.72)/17.52:(Math.log2(e)+9.72)/17.52}))}),Vt=Object.freeze({__proto__:null,A98RGB:et,A98RGB_Linear:Qr,ACEScc:Ut,ACEScg:Nt,CAM16_JMh:Ke,HCT:ar,HPLuv:Pt,HSL:Xr,HSLuv:kt,HSV:Jr,HWB:Kr,ICTCP:Ie,JzCzHz:xe,Jzazbz:Me,LCH:G,LCHuv:ct,Lab:U,Lab_D65:Br,Luv:lt,OKLCH:nt,OKLab:ne,P3:jr,P3_Linear:vr,ProPhoto:tt,ProPhoto_Linear:rt,REC_2020:wr,REC_2020_Linear:mr,REC_2100_HLG:It,REC_2100_PQ:At,XYZ_ABS_D65:ce,XYZ_D50:N,XYZ_D65:$,sRGB:Cr,sRGB_Linear:kr});class Gt{constructor(...e){let r,t,n,a;1===e.length&&(r=E(e[0])),r?(t=r.space||r.spaceId,n=r.coords,a=r.alpha):[t,n,a]=e,Object.defineProperty(this,"space",{value:A.get(t),writable:!1,enumerable:!0,configurable:!0}),this.coords=n?n.slice():[0,0,0],this.alpha=a>1||void 0===a?1:a<0?0:a;for(let e=0;e<this.coords.length;e++)"NaN"===this.coords[e]&&(this.coords[e]=NaN);for(let e in this.space.coords)Object.defineProperty(this,e,{get:()=>this.get(e),set:r=>this.set(e,r)})}get spaceId(){return this.space.id}clone(){return new Gt(this.space,this.coords,this.alpha)}toJSON(){return{spaceId:this.spaceId,coords:this.coords,alpha:this.alpha}}display(...e){let r=function(e,{space:r=M.display_space,...t}={}){let n=gr(e,t);if("undefined"==typeof CSS||CSS.supports("color",n)||!M.display_space)n=new String(n),n.color=e;else{let a=e;if((e.coords.some(s)||s(e.alpha))&&!(Sr??=CSS.supports("color","hsl(none 50% 50%)"))&&(a=se(e),a.coords=a.coords.map(i),a.alpha=i(a.alpha),n=gr(a,t),CSS.supports("color",n)))return n=new String(n),n.color=a,n;a=hr(a,r),n=new String(gr(a,t)),n.color=a}return n}(this,...e);return r.color=new Gt(r.color),r}static get(e,...r){return e instanceof Gt?e:new Gt(e,...r)}static defineFunction(e,r,t=r){let{instance:n=!0,returns:a}=t,o=function(...e){let t=r(...e);if("color"===a)t=Gt.get(t);else if("function<color>"===a){let e=t;t=function(...r){let t=e(...r);return Gt.get(t)},Object.assign(t,e)}else"array<color>"===a&&(t=t.map((e=>Gt.get(e))));return t};e in Gt||(Gt[e]=o),n&&(Gt.prototype[e]=function(...e){return o(this,...e)})}static defineFunctions(e){for(let r in e)Gt.defineFunction(r,e[r],e[r])}static extend(e){if(e.register)e.register(Gt);else for(let r in e)Gt.defineFunction(r,e[r])}}Gt.defineFunctions({get:B,getAll:I,set:H,setAll:R,to:hr,equals:function(e,r){return e=E(e),r=E(r),e.space===r.space&&e.alpha===r.alpha&&e.coords.every(((e,t)=>e===r.coords[t]))},inGamut:oe,toGamut:dr,distance:ie,toString:gr}),Object.assign(Gt,{util:y,hooks:k,WHITES:x,Space:A,spaces:A.registry,parse:z,defaults:M});for(let e of Object.keys(Vt))A.register(Vt[e]);for(let e in A.registry)Wt(e,A.registry[e]);function Wt(e,r){let t=e.replace(/-/g,"_");Object.defineProperty(Gt.prototype,t,{get(){let t=this.getAll(e);return"undefined"==typeof Proxy?t:new Proxy(t,{has:(e,t)=>{try{return A.resolveCoord([r,t]),!0}catch(e){}return Reflect.has(e,t)},get:(e,t,n)=>{if(t&&"symbol"!=typeof t&&!(t in e)){let{index:n}=A.resolveCoord([r,t]);if(n>=0)return e[n]}return Reflect.get(e,t,n)},set:(t,n,a,o)=>{if(n&&"symbol"!=typeof n&&!(n in t)||n>=0){let{index:o}=A.resolveCoord([r,n]);if(o>=0)return t[o]=a,this.setAll(e,t),!0}return Reflect.set(t,n,a,o)}})},set(r){this.setAll(e,r)},configurable:!0,enumerable:!0})}k.add("colorspace-init-end",(e=>{Wt(e.id,e),e.aliases?.forEach((r=>{Wt(r,e)}))})),Gt.extend(lr),Gt.extend({deltaE:qr}),Object.assign(Gt,{deltaEMethods:lr}),Gt.extend(Ur),Gt.extend({contrast:function(e,r,t={}){n(t)&&(t={algorithm:t});let{algorithm:a,...o}=t;if(!a){let e=Object.keys(Hr).map((e=>e.replace(/^contrast/,""))).join(", ");throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${e}`)}e=E(e),r=E(r);for(let t in Hr)if("contrast"+a.toLowerCase()===t.toLowerCase())return Hr[t](e,r,o);throw new TypeError(`Unknown contrast algorithm: ${a}`)}}),Gt.extend(Dr),Gt.extend(Ar),Gt.extend(Yr),Gt.extend(Hr),r.default=Gt},"./node_modules/css-color-list/node_modules/css-color-names/css-color-names.json":e=>{"use strict";e.exports=JSON.parse('{"aqua":"#00ffff","aliceblue":"#f0f8ff","antiquewhite":"#faebd7","black":"#000000","blue":"#0000ff","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgreen":"#006400","darkturquoise":"#00ced1","deepskyblue":"#00bfff","green":"#008000","lime":"#00ff00","mediumblue":"#0000cd","mediumspringgreen":"#00fa9a","navy":"#000080","springgreen":"#00ff7f","teal":"#008080","midnightblue":"#191970","dodgerblue":"#1e90ff","lightseagreen":"#20b2aa","forestgreen":"#228b22","seagreen":"#2e8b57","darkslategray":"#2f4f4f","darkslategrey":"#2f4f4f","limegreen":"#32cd32","mediumseagreen":"#3cb371","turquoise":"#40e0d0","royalblue":"#4169e1","steelblue":"#4682b4","darkslateblue":"#483d8b","mediumturquoise":"#48d1cc","indigo":"#4b0082","darkolivegreen":"#556b2f","cadetblue":"#5f9ea0","cornflowerblue":"#6495ed","mediumaquamarine":"#66cdaa","dimgray":"#696969","dimgrey":"#696969","slateblue":"#6a5acd","olivedrab":"#6b8e23","slategray":"#708090","slategrey":"#708090","lightslategray":"#778899","lightslategrey":"#778899","mediumslateblue":"#7b68ee","lawngreen":"#7cfc00","aquamarine":"#7fffd4","chartreuse":"#7fff00","gray":"#808080","grey":"#808080","maroon":"#800000","olive":"#808000","purple":"#800080","lightskyblue":"#87cefa","skyblue":"#87ceeb","blueviolet":"#8a2be2","darkmagenta":"#8b008b","darkred":"#8b0000","saddlebrown":"#8b4513","darkseagreen":"#8fbc8f","lightgreen":"#90ee90","mediumpurple":"#9370db","darkviolet":"#9400d3","palegreen":"#98fb98","darkorchid":"#9932cc","yellowgreen":"#9acd32","sienna":"#a0522d","brown":"#a52a2a","darkgray":"#a9a9a9","darkgrey":"#a9a9a9","greenyellow":"#adff2f","lightblue":"#add8e6","paleturquoise":"#afeeee","lightsteelblue":"#b0c4de","powderblue":"#b0e0e6","firebrick":"#b22222","darkgoldenrod":"#b8860b","mediumorchid":"#ba55d3","rosybrown":"#bc8f8f","darkkhaki":"#bdb76b","silver":"#c0c0c0","mediumvioletred":"#c71585","indianred":"#cd5c5c","peru":"#cd853f","chocolate":"#d2691e","tan":"#d2b48c","lightgray":"#d3d3d3","lightgrey":"#d3d3d3","thistle":"#d8bfd8","goldenrod":"#daa520","orchid":"#da70d6","palevioletred":"#db7093","crimson":"#dc143c","gainsboro":"#dcdcdc","plum":"#dda0dd","burlywood":"#deb887","lightcyan":"#e0ffff","lavender":"#e6e6fa","darksalmon":"#e9967a","palegoldenrod":"#eee8aa","violet":"#ee82ee","azure":"#f0ffff","honeydew":"#f0fff0","khaki":"#f0e68c","lightcoral":"#f08080","sandybrown":"#f4a460","beige":"#f5f5dc","mintcream":"#f5fffa","wheat":"#f5deb3","whitesmoke":"#f5f5f5","ghostwhite":"#f8f8ff","lightgoldenrodyellow":"#fafad2","linen":"#faf0e6","salmon":"#fa8072","oldlace":"#fdf5e6","bisque":"#ffe4c4","blanchedalmond":"#ffebcd","coral":"#ff7f50","cornsilk":"#fff8dc","darkorange":"#ff8c00","deeppink":"#ff1493","floralwhite":"#fffaf0","fuchsia":"#ff00ff","gold":"#ffd700","hotpink":"#ff69b4","ivory":"#fffff0","lavenderblush":"#fff0f5","lemonchiffon":"#fffacd","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightyellow":"#ffffe0","magenta":"#ff00ff","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","orange":"#ffa500","orangered":"#ff4500","papayawhip":"#ffefd5","peachpuff":"#ffdab9","pink":"#ffc0cb","red":"#ff0000","seashell":"#fff5ee","snow":"#fffafa","tomato":"#ff6347","white":"#ffffff","yellow":"#ffff00","rebeccapurple":"#663399"}')},"./node_modules/css-color-names/css-color-names.json":e=>{"use strict";e.exports=JSON.parse('{"aliceblue":"#f0f8ff","antiquewhite":"#faebd7","aqua":"#00ffff","aquamarine":"#7fffd4","azure":"#f0ffff","beige":"#f5f5dc","bisque":"#ffe4c4","black":"#000000","blanchedalmond":"#ffebcd","blue":"#0000ff","blueviolet":"#8a2be2","brown":"#a52a2a","burlywood":"#deb887","cadetblue":"#5f9ea0","chartreuse":"#7fff00","chocolate":"#d2691e","coral":"#ff7f50","cornflowerblue":"#6495ed","cornsilk":"#fff8dc","crimson":"#dc143c","cyan":"#00ffff","darkblue":"#00008b","darkcyan":"#008b8b","darkgoldenrod":"#b8860b","darkgray":"#a9a9a9","darkgreen":"#006400","darkgrey":"#a9a9a9","darkkhaki":"#bdb76b","darkmagenta":"#8b008b","darkolivegreen":"#556b2f","darkorange":"#ff8c00","darkorchid":"#9932cc","darkred":"#8b0000","darksalmon":"#e9967a","darkseagreen":"#8fbc8f","darkslateblue":"#483d8b","darkslategray":"#2f4f4f","darkslategrey":"#2f4f4f","darkturquoise":"#00ced1","darkviolet":"#9400d3","deeppink":"#ff1493","deepskyblue":"#00bfff","dimgray":"#696969","dimgrey":"#696969","dodgerblue":"#1e90ff","firebrick":"#b22222","floralwhite":"#fffaf0","forestgreen":"#228b22","fuchsia":"#ff00ff","gainsboro":"#dcdcdc","ghostwhite":"#f8f8ff","goldenrod":"#daa520","gold":"#ffd700","gray":"#808080","green":"#008000","greenyellow":"#adff2f","grey":"#808080","honeydew":"#f0fff0","hotpink":"#ff69b4","indianred":"#cd5c5c","indigo":"#4b0082","ivory":"#fffff0","khaki":"#f0e68c","lavenderblush":"#fff0f5","lavender":"#e6e6fa","lawngreen":"#7cfc00","lemonchiffon":"#fffacd","lightblue":"#add8e6","lightcoral":"#f08080","lightcyan":"#e0ffff","lightgoldenrodyellow":"#fafad2","lightgray":"#d3d3d3","lightgreen":"#90ee90","lightgrey":"#d3d3d3","lightpink":"#ffb6c1","lightsalmon":"#ffa07a","lightseagreen":"#20b2aa","lightskyblue":"#87cefa","lightslategray":"#778899","lightslategrey":"#778899","lightsteelblue":"#b0c4de","lightyellow":"#ffffe0","lime":"#00ff00","limegreen":"#32cd32","linen":"#faf0e6","magenta":"#ff00ff","maroon":"#800000","mediumaquamarine":"#66cdaa","mediumblue":"#0000cd","mediumorchid":"#ba55d3","mediumpurple":"#9370db","mediumseagreen":"#3cb371","mediumslateblue":"#7b68ee","mediumspringgreen":"#00fa9a","mediumturquoise":"#48d1cc","mediumvioletred":"#c71585","midnightblue":"#191970","mintcream":"#f5fffa","mistyrose":"#ffe4e1","moccasin":"#ffe4b5","navajowhite":"#ffdead","navy":"#000080","oldlace":"#fdf5e6","olive":"#808000","olivedrab":"#6b8e23","orange":"#ffa500","orangered":"#ff4500","orchid":"#da70d6","palegoldenrod":"#eee8aa","palegreen":"#98fb98","paleturquoise":"#afeeee","palevioletred":"#db7093","papayawhip":"#ffefd5","peachpuff":"#ffdab9","peru":"#cd853f","pink":"#ffc0cb","plum":"#dda0dd","powderblue":"#b0e0e6","purple":"#800080","rebeccapurple":"#663399","red":"#ff0000","rosybrown":"#bc8f8f","royalblue":"#4169e1","saddlebrown":"#8b4513","salmon":"#fa8072","sandybrown":"#f4a460","seagreen":"#2e8b57","seashell":"#fff5ee","sienna":"#a0522d","silver":"#c0c0c0","skyblue":"#87ceeb","slateblue":"#6a5acd","slategray":"#708090","slategrey":"#708090","snow":"#fffafa","springgreen":"#00ff7f","steelblue":"#4682b4","tan":"#d2b48c","teal":"#008080","thistle":"#d8bfd8","tomato":"#ff6347","turquoise":"#40e0d0","violet":"#ee82ee","wheat":"#f5deb3","white":"#ffffff","whitesmoke":"#f5f5f5","yellow":"#ffff00","yellowgreen":"#9acd32"}')}},r={};function t(n){var a=r[n];if(void 0!==a)return a.exports;var o=r[n]={exports:{}};return e[n].call(o.exports,o,o.exports,t),o.exports}t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";var e=n;Object.defineProperty(e,"__esModule",{value:!0});const r=t("./typescript/src/doc_functionality/color.ts"),a=t("./typescript/src/doc_functionality/health.ts"),o=t("./typescript/src/doc_functionality/lookup.ts"),s=t("./typescript/src/doc_functionality/markdown.ts"),i=t("./typescript/src/doc_functionality/sandbox.ts"),l=t("./typescript/src/doc_functionality/search.ts"),c=t("./typescript/src/doc_functionality/string_utils.ts"),u=t("./typescript/src/doc_functionality/tokens.ts"),d=t("./typescript/src/doc_functionality/urls.ts"),p=t("./typescript/src/doc_functionality/general-utils.ts");Pulsar.registerFunction("firstSubgroupOfPage",o.firstSubgroupOfPage),Pulsar.registerFunction("pageOrGroupActiveInContext",o.pageOrGroupActiveInContext),Pulsar.registerFunction("flattenedPageStructure",o.flattenedPageStructure),Pulsar.registerFunction("firstPageFromTop",o.firstPageFromTop),Pulsar.registerFunction("previousPage",o.previousPage),Pulsar.registerFunction("nextPage",o.nextPage),Pulsar.registerFunction("isExportable",o.isExportable),Pulsar.registerFunction("isHomepage",o.isHomepage),Pulsar.registerFunction("isHomepageTab",o.isHomepageTab),Pulsar.registerFunction("resolveMenuLabel",o.resolveMenuLabel),Pulsar.registerFunction("getCurrentTimestamp",o.getCurrentTimestamp),Pulsar.registerFunction("checkKeyInArray",o.checkKeyInArray),Pulsar.registerFunction("firstTabGroupFromTop",o.firstTabGroupFromTop),Pulsar.registerFunction("getFullYear",p.getFullYear),Pulsar.registerFunction("getFormattedDateTime",p.getFormattedDateTime),Pulsar.registerFunction("generateCustomCSSHash",p.generateCustomCSSHash),Pulsar.registerFunction("includes",p.includes),Pulsar.registerFunction("objectValues",p.objectValues),Pulsar.registerFunction("sortVersionsBySemver",p.sortVersionsBySemver),Pulsar.registerFunction("safeArray",p.safeArray),Pulsar.registerFunction("isNonEmptyString",p.isNonEmptyString),Pulsar.registerFunction("highlightSafeString",c.highlightSafeString),Pulsar.registerFunction("withHTMLNewlines",c.withHTMLNewlines),Pulsar.registerFunction("getUrlExtension",c.getUrlExtension),Pulsar.registerFunction("escapeHtml",c.escapeHtml),Pulsar.registerFunction("addSlashes",c.addSlashes),Pulsar.registerFunction("normalizeStringForSearch",c.normalizeStringForSearch),Pulsar.registerFunction("getSearchIDString",c.getSearchIDString),Pulsar.registerFunction("getVariantClass",c.getVariantClass),Pulsar.registerFunction("buildSearchIndexJSON",l.buildSearchIndexJSON),Pulsar.registerFunction("pageUrl",d.pageUrl),Pulsar.registerFunction("pageUrlForFilepath",d.pageUrlForFilepath),Pulsar.registerFunction("pageAnchorUrl",d.pageAnchorUrl),Pulsar.registerFunction("pageIdentifier",d.pageIdentifier),Pulsar.registerFunction("rootUrl",d.rootUrl),Pulsar.registerFunction("assetUrl",d.assetUrl),Pulsar.registerFunction("slugifyHeading",d.slugifyHeading),Pulsar.registerFunction("textBlockPlainText",d.textBlockPlainText),Pulsar.registerFunction("removeVersionFromDomainUrl",d.removeVersionFromDomainUrl),Pulsar.registerFunction("formattedTokenGroupHeader",u.formattedTokenGroupHeader),Pulsar.registerFunction("fullTokenGroupName",u.fullTokenGroupName),Pulsar.registerFunction("gradientDescription",u.gradientDescription),Pulsar.registerFunction("gradientTokenValue",u.gradientTokenValue),Pulsar.registerFunction("shadowDescription",u.shadowDescription),Pulsar.registerFunction("shadowTokenValue",u.shadowTokenValue),Pulsar.registerFunction("scaledShadowTokenValue",u.scaledShadowTokenValue),Pulsar.registerFunction("measureTypeIntoReadableUnit",u.measureTypeIntoReadableUnit),Pulsar.registerFunction("typographyDescription",u.typographyDescription),Pulsar.registerFunction("convertTypographyTokenToCSS",u.convertTypographyTokenToCSS),Pulsar.registerFunction("getFormattedColor",u.getFormattedColor),Pulsar.registerFunction("getColorValueFromSettings",u.getColorValueFromSettings),Pulsar.registerFunction("markdownToHTML",s.markdownToHTML),Pulsar.registerFunction("convertHealthTagIfAny",a.convertHealthTagIfAny),Pulsar.registerFunction("sortComponentsAlphabetically",a.sortComponentsAlphabetically),Pulsar.registerFunction("getFigmaFileUrl",a.getFigmaFileUrl),Pulsar.registerFunction("htmlSafeString",i.htmlSafeString),Pulsar.registerFunction("htmlSafeUrl",i.htmlSafeUrl),Pulsar.registerFunction("contrastColor",r.contrastColor),Pulsar.registerFunction("contrastColorAPCA",r.contrastColorAPCA),Pulsar.registerFunction("returnSwatchClassnames",r.returnSwatchClassnames),Pulsar.registerFunction("getColorContrast",r.getColorContrast),Pulsar.registerFunction("getColorContrastRatio",r.getColorContrastRatio),Pulsar.registerFunction("getClassForInvertedText",r.getClassForInvertedText),Pulsar.registerFunction("changelogToEntries",c.changelogToEntries)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,